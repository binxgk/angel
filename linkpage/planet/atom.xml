<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>雅诗圈子</title>
    <subtitle>友链内容聚合</subtitle>
    <link href="https://yoooooooooo.com/atom.xml" rel="self" type="application/atom+xml" />
    <link href="https://yoooooooooo.com"/>
    <updated>2017-03-08T00:31:41+08:00</updated>
    <id>https://yoooooooooo.com</id>
    
    <author>
        <name>神楽坂雅詩</name>
        <email>cxchope@163.com</email>
    </author>
    
    <generator uri="https://github.com/phoenixlzx/planet.js">Planet.js</generator>
    
    <entry>
        <title>写在工业仿真开坑之时</title>
        <link href="http://www.0page.org/industry/simulation/1104.html"/>
        <id>http://www.0page.org/industry/simulation/1104.html</id>
        
        <author>
            <name>猎风</name>
        </author>
        
        <published>2017-03-08T00:31:41+08:00</published>
        <updated>2017-03-08T00:31:41+08:00</updated>
        
        <content type="html"><![CDATA[<p>大概忙完了这周要忙的杂事，所以是时候开这个坑了…虽然说工业仿真是个似乎说得很大的课题，但简单的说可以分成2点来讨论：</p>
<p>①针对现有工业过程进行数字模拟仿真，以将其过程模型化</p>
<p>②对某建立的工业过程进行数字模拟仿真，以验证其技术可行性</p>
<p>因此，只要有了具体的过程（无论是已投产的还是理论上的），进行数字化模拟仿真，可以在检验其可靠性的同时，进一步优化过程，以提升技术操作性。结合冶金工程（稀土方向）来说，最有意义的工业仿真方向是涉及到的冶金物理化学部分、分析化学部分与化工传输原理（传输原理的实际应用部分）。由于工艺的优化，亦或是对一些现有模型（如边界层热量传递）的计算需求，仿照各种测试平台搭建过程仿真平台，是十分利于工科学生的学习的…以上，算是我开这个坑的一个理由，另一个理由就是可以熟悉工科数学算法…</p>
<p>回归到专业来说，因为稀土专业涵盖材料、冶金、化工三大类，基础的高数计算是一方面，可是计算能力的灵魂是算法，在这一点上，学校课时有限….因此个人的学习很有必要，这里的额外学习，主要以工科数学分析、数值计算、应用逻辑为主，这类教材推荐使用国外优秀译本….</p>
<p>以高等数学为基础，工科数学分析算是对复杂工程计算的一种接触，而方法论，则是基于数值计算。如对牛顿法（用于求解非线性方程组）、分解法（求解线性方程组）、迭代法、数值积分于各种求解微分方程的方法，利用合适的方法将计算简单化，同时利用计算机来模拟、建立一类工程问题的数学求解于模拟仿真模型，也不妨作为工科生的一种学有所成的作品…</p>
<p>总体思路：基于Python来设计程序，并在Linux主机上搭建在线平台（这也是为什么选择Python的原因），后期可能会搭在树莓派上玩玩….</p>]]></content>
        
        <summary type="html">
            
            大概忙完了这周要忙的杂事，所以是时候开这个坑了…虽然说工业仿真是个似乎说得很大的课题，但简单的说可以分成2点来讨论： ①针对现有工业过程进行数字模拟仿真，以将其过程模型化 ②对某建立的工业过程进行数字模拟仿真，以验证其技术可行性 因此，只要有了具体的过程（无论是已投产的还是理论
            
        </summary>
        
        <category term="工业仿真"/>
        
    </entry>
    
    <entry>
        <title>Linear Vector Combination Problem</title>
        <link href="https://blog.0xbbc.com/2017/03/linear-vector-combination-problem/"/>
        <id>https://blog.0xbbc.com/2017/03/linear-vector-combination-problem/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-03-06T16:27:09+08:00</published>
        <updated>2017-03-06T16:27:09+08:00</updated>
        
        <content type="html"><![CDATA[<p>Linear Vector Combination Problem，即线性向量组合问题。写这个其实是由前一篇 post 而来（<a href="https://blog.0xbbc.com/2017/02/chicken-problem/" target="_blank">从百鸡问题到数学思维</a>）。</p>
<p>这篇 post 由以下几个部分构成</p>
<ul>
<li><a href="https://blog.0xbbc.com/2017/03/linear-vector-combination-problem/#symbol_define">符号定义</a></li>
<li><a href="https://blog.0xbbc.com/2017/03/linear-vector-combination-problem/#matrix_way">矩阵求法</a></li>
<li><a href="https://blog.0xbbc.com/2017/03/linear-vector-combination-problem/#code">代码实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/03/linear-vector-combination-problem/#summary">总结</a></li>
</ul>
<p><span></span></p>
<p>这里再将题目重复一下，“鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、母、雏各几何？”。</p>
<p>符号定义</p>
<hr />
<p>那么我们令</p>
<p>\begin{equation}<br />
    V=\left[<br />
        \begin{array}<br />
            \vec{v_1}\\<br />
            \vec{v_2}\\<br />
            \vdots\\<br />
            \vec{v_n}<br />
        \end{array}<br />
    \right]<br />
    \tag{1}<br />
\end{equation}</p>
<p>其中</p>
<p>\begin{equation}<br />
    \vec{v_i}=\left(<br />
        \begin{array}{}<br />
            p_1, p_2, \cdots, p_m<br />
        \end{array}<br />
    \right)<br />
    \tag{2}<br />
\end{equation}</p>
<p>因此，\(V\)是一个\(n\times m\)的矩阵，其中每一行\(v_i\)都是一个\(m\)维向量，\(v_i\)里每一个分量\(p_j\)是第\(j\)个property。</p>
<p>例如在这道题里，我们有</p>
<p>\begin{equation}<br />
    V=\left[<br />
        \begin{array}{}<br />
            \vec{v_1}\\<br />
            \vec{v_2}\\<br />
            \vec{v_3}<br />
        \end{array}<br />
    \right]<br />
    =\left[<br />
        \begin{array}{Chicken}<br />
            5 &amp; 1\\<br />
            3 &amp; 1\\<br />
            1 &amp; 3\\<br />
        \end{array}<br />
    \right]<br />
    \tag{3}<br />
\end{equation}</p>
<p>对于\(\vec{v_1}=\left(5,1\right)\)来说，第一个分量\(p_1=5\)是价格这一项属性，第二个分量\(p_2=1\)是只数这一属性。</p>
<p>那么在具体的百元百鸡问题中，我们的目标向量是\(\vec{G}=\left(100,100\right)\)，并且有一组常数组成的\(1\times n\)的矩阵\(C\)作为各\(v_i\)的系数</p>
<p>$$C=\left[\begin{array}{}c_1 &amp; c_2 &amp; \cdots &amp; c_n\end{array}\right]$$</p>
<p>使得</p>
<p>\begin{equation}<br />
    CV=G<br />
    \tag{4}<br />
\end{equation}</p>
<p>矩阵求法</p>
<hr />
<p>在这个矩阵方程中，\(C\)是我们需要求的，\(V,G\)均是已知的量。因为这是一个很简单的矩阵方程，自然会想到像这样求出\(C\)</p>
<p>\begin{equation}<br />
    \begin{aligned}<br />
        CV&amp;=G\\<br />
        CVV^{-1}&amp;=GV^{-1}\\<br />
        C&amp;=GV^{-1}<br />
    \end{aligned}<br />
    \tag{5}<br />
\end{equation}</p>
<p>不过我们并不能确定矩阵\(V\)是否是方阵，所以需要先将矩阵\(V\)变换为方阵。再提一下，\(C\)是\(1\times n\)的，\(V\)是\(n\times m\)，\(G\)是\(1\times m\)</p>
<p>这里假设有\(n\ge m\)，于是给出如下解决办法</p>
<p>先从\(V\)中提出前\(n-m\)行，组成新的\((n-m)\times m\)矩阵</p>
<p>\begin{equation}<br />
    V'=\left[<br />
        \begin{array}{}<br />
            \vec{v_1}\\<br />
            \vec{v_2}\\<br />
            \vdots\\<br />
            \vec{v}_{n-m}<br />
        \end{array}<br />
    \right]<br />
    \tag{6}<br />
\end{equation}</p>
<p>而原来的\(V\)则变成了一个\(m\times m\)的矩阵</p>
<p>\begin{equation}<br />
    V=\left[<br />
        \begin{array}{}<br />
            \vec{v}_{n-m+1}\\<br />
            \vec{v}_{n-m+2}\\<br />
            \vdots\\<br />
            \vec{v_n}<br />
        \end{array}<br />
    \right]<br />
    \tag{7}<br />
\end{equation}</p>
<p>接下来，对矩阵\(C\)也做类似的事</p>
<p>\begin{equation}<br />
    C'=\left[<br />
        \begin{array}{}<br />
            c_1 &amp; c_2 &amp; \cdots &amp; c_{n-m}<br />
        \end{array}<br />
    \right]<br />
    \tag{8}<br />
\end{equation}</p>
<div>
<pre>
\begin{equation}
    C=\left[
        \begin{array}{}
            c_{n-m+1} &amp; c_{n-m+2} &amp; \cdots &amp; c_n
        \end{array}
    \right]
    \tag{9}
\end{equation}
</pre></div>
<p>如此一来，\(C\)是\(1\times m\)的，而\(C'\)是\(1\times (n-m)\)</p>
<p>那么这样变换是为了什么呢？为了说明原因，我们暂时回到具体的问题上来，在百元百鸡问题中，</p>
<div>
<pre>
\begin{equation}
    \begin{aligned}
        &amp;CV=G\\
        &amp;c_1(5,1)+c_2(3,1)+c_3(1,3)=G\\
        &amp;c_1(5,1)+c_2(3,1)+c_3(1,3)=(100,100)\\
        &amp;c_2(3,1)+c_3(1,3)=(100,100)-c_1(5,1)
    \end{aligned}
    \tag{10}
\end{equation}
</pre></div>
<p>这里等价于我们之前用一般方法化简时的<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#spend-amount-variation" target="_blank">一组等式</a></p>
<p>（当然，这里我们移动的项不同，但从本质上来说是等价的）</p>
<p>\begin{equation}<br />
    \label{spend-amount-variation}<br />
    \left\{<br />
        \begin{aligned}<br />
            5a+3b&amp;=n-\frac{c}{3}\\<br />
            a+b&amp;=n-c<br />
        \end{aligned}<br />
    \right.<br />
\end{equation}</p>
<p>在有了上面的等式之后，我们会人工进行消去变量的操作，然后得到\(a,b\)关于\(c\)的表达式</p>
<p>在这里，或许已经能猜出来了，根据上面提到的的解决办法，我们有</p>
<p>\begin{equation}<br />
    \begin{aligned}<br />
        &amp;\left\{\begin{aligned}<br />
        C &amp;= \left[\begin{array}{}c_2 &amp; c_3\end{array}\right]\\<br />
        C'&amp;= \left[\begin{array}{}c_1\end{array}\right]\\<br />
        \end{aligned}\right.\\\\<br />
        &amp;\left\{\begin{aligned}<br />
        V &amp;= \left[\begin{array}{}3&amp;1\\1&amp;3\end{array}\right]\\<br />
        V'&amp;= \left[\begin{array}{}5&amp;1\end{array}\right]<br />
        \end{aligned}\right.<br />
    \end{aligned}<br />
    \tag{11}<br />
\end{equation}</p>
<p>那么可以观察到，\(V'C'\)正好就是\(c_1(5,1)\)，正好是和\(G=\begin{bmatrix}100 &amp; 100\end{bmatrix}\)相同，是一个\(1\times 2\)的矩阵。那么我们可以对它们进行操作，并得到</p>
<div>
<pre>
\begin{equation}
    \begin{aligned}
        CV&amp;=G-V'C'\\
        CVV^{-1}&amp;=(G-V'C')V^{-1}\\
        C&amp;=(G-V'C')V^{-1}
    \end{aligned}
    \tag{12}
\end{equation}
</pre></div>
<p>进行到这一步之后，我们一下就得到了\(c_2,c_3\)与\(c_1\)的关系。</p>
<p>放入题中则是</p>
<div>
<pre>
\begin{equation}
    \begin{aligned}
        CV&amp;=G-V'C'\\
        \begin{bmatrix}
            c_2 &amp; c_3
        \end{bmatrix}
        \begin{bmatrix}
            3 &amp; 1 \\
            1 &amp; 3
        \end{bmatrix}&amp;=
        \begin{bmatrix}
            100 - 5c_1 &amp; 100 - c_1
        \end{bmatrix}
    \end{aligned}
    \tag{13}
\end{equation}
</pre></div>
<p>接下来求出\(V^{-1}\)</p>
<div>
<pre>
\begin{equation}
    \begin{aligned}
        \begin{bmatrix}
            3 &amp; 1 \\
            1 &amp; 3
        \end{bmatrix}^{-1} = 
        \frac{1}{8}
        \begin{bmatrix}
            3 &amp; -1 \\
            -1 &amp; 3
        \end{bmatrix}
    \end{aligned}
    \tag{14}
\end{equation}
</pre></div>
<p>同时右乘</p>
<div>
<pre>
\begin{equation}
    \begin{aligned}
        C&amp;=(G-V'C')V^{-1}\\
        \begin{bmatrix}
            c_2 &amp; c_3
        \end{bmatrix}&amp;=
        \frac{1}{8}
        \begin{bmatrix}
            100 - 5c_1 &amp; 100 - c_1
        \end{bmatrix}
        \begin{bmatrix}
            3 &amp; -1 \\
            -1 &amp; 3
        \end{bmatrix}\\
        &amp;=\frac{1}{8}
        \begin{bmatrix}
            200 - 14c_1 &amp; 200 + 2c_1
        \end{bmatrix}\\
        &amp;=
        \begin{bmatrix}
            25 - \frac{7}{4}c_1 &amp; 25 + \frac{1}{4}c_1
        \end{bmatrix}
    \end{aligned}
    \tag{15}
\end{equation}
</pre></div>
<p>即</p>
<p>\begin{equation}<br />
    \left\{<br />
        \begin{aligned}<br />
            c_2 &amp;= 25 - \frac{7}{4}c_1\\<br />
            c_3 &amp;= 25 + \frac{1}{4}c_1<br />
        \end{aligned}<br />
    \right.<br />
\end{equation}</p>
<p>再之后，根据限制条件即可算出来。</p>
<p>代码实现</p>
<hr />
<pre><span><span>from</span> sympy.matrices <span>import</span> <span>*</span></span>
<span></span>
<span>n <span>=</span> <span>3</span></span>
<span>m <span>=</span> <span>2</span></span>
<span><span>V </span><span>= </span>Matrix(n, m, [<span>5</span>, <span>1</span>, <span>3</span>, <span>1</span>, <span>1</span>, <span>3</span>])</span>
<span><span>G </span><span>= </span>Matrix(<span>1</span>, m, [<span>100</span>, <span>100</span>])</span>
<span></span>
<span><span>def</span> <span>vcp</span>(<span>V</span>, <span>G</span>, <span>n</span>, <span>m</span>):</span>
<span>    <span>&quot;&quot;&quot;</span></span>
<span>    Linear Vector Combination Problem</span>
<span>    V    Vector Matrix, \(v_i=(p_1,p_2,\cdots,p_m)\)</span>
<span>    G    Goal, \(G=\left[g_1,g_2,\cdots,g_m\right]\)</span>
<span>    n    Number of vectors in \(V\)</span>
<span>    m    \(v_i\) is \(m\)-dim</span>
<span>    &quot;&quot;&quot;</span>
<span>    free_var <span>=</span> n <span>-</span> m</span>
<span>    <span>if</span> free_var <span>&gt;</span> <span>0</span>:</span>
<span><span>        V_ </span><span>= </span>Matrix(free_var, m, V[<span>0</span>:free_var <span>*</span> m])</span>
<span><span>        V </span><span> = </span>Matrix(m, m, V[free_var <span>*</span> m:])</span>
<span>    V_inv <span>=</span> <span>V.inv()</span></span>
<span>    constants <span>=</span> G <span>*</span> V_inv</span>
<span>    coeffient <span>=</span> (<span>-</span>V_ <span>*</span> V_inv).<span>transpose()</span></span>
<span>    non_free_var <span>=</span> <span>len(constants)</span></span>
<span>    denoms <span>=</span> [[]]</span>
<span></span>
<span><span>    </span><span>for</span><span> i </span><span>in </span>range(non_free_var)<span>:</span></span>
<span>        <span>print</span>(<span>&quot;x</span><span>%d</span><span> = </span><span>%d</span><span>&quot;</span> <span>%</span> (i <span>+</span> free_var, constants[i]), end<span>=</span><span>''</span>)</span>
<span><span>        </span><span>for</span><span> f </span><span>in </span>range(free_var)<span>:</span></span>
<span>            sign <span>=</span> <span>''</span></span>
<span>            fp <span>= </span>i<span>*</span>free_var<span>+</span>f</span>
<span>            <span>if</span> coeffient[fp] <span>&gt;</span> <span>0</span>:</span>
<span>                sign <span>=</span> <span>'+ '</span></span>
<span>            <span>print</span>(<span>&quot; </span><span>%s%s</span><span>x</span><span>%d</span><span>&quot;</span> <span>%</span> (sign, coeffient[fp], f), end<span>=</span><span>''</span>)</span>
<span>            <span>if</span> <span>len(denoms)</span> <span>&lt;=</span> f:</span>
<span><span>                </span>denoms.append([])</span>
<span><span>            denoms[f].</span>append(coeffient[fp].as_numer_denom()[<span>1</span>])</span>
<span>        <span>print</span>(<span>''</span>)</span>
<span></span>
<span>vcp(V, G, n, m)</span></pre>
<p><a href="https://blog.0xbbc.com/wp-content/uploads/2017/03/lvcp.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/03/lvcp.png" /></a></p>
<p>总结</p>
<hr />
<p>那么用矩阵来做的意义是什么？比起人工计算变量间的关系，现在可以用计算机来做，特别是当\(n-m&gt;1\)的时候，使用这种方法会减少不少人力。</p>
<p>另外这里的矩阵方法也回答了在一般解法中，“消去变量的意义是什么”这一问题，在线性代数中，如果我们有\(n\)个变量，但是却只有\(m\)个等式，这意味着我们有\(n-m\)个自由变量。因此，如果想要用矩阵求解，那么\(V\)必须是方阵，只有方阵才是可逆的，故选出\(n-m\)个自由变量，使得\(V\)是方阵。在经过矩阵运算之后，得到\(m\)个非自由变量与\(n-m\)个自由变量间的关系。</p>]]></content>
        
        <summary type="html">
            
            Linear Vector Combination Problem，即线性向量组合问题。写这个其实是由前一篇 post 而来（从百鸡问题到数学思维）。 这篇 post 由以下几个部分构成  符号定义 矩阵求法 代码实现 总结   这里再将题目重复一下，“鸡翁一值钱五，鸡母一值钱
            
        </summary>
        
        <category term="Mathematics"/>
        
    </entry>
    
    <entry>
        <title>精神病院一日游</title>
        <link href="http://www.0page.org/article/1079.html"/>
        <id>http://www.0page.org/article/1079.html</id>
        
        <author>
            <name>猎风</name>
        </author>
        
        <published>2017-03-04T17:01:16+08:00</published>
        <updated>2017-03-04T17:01:16+08:00</updated>
        
        <content type="html"><![CDATA[<p>实际上是半日游，原本是计划去迪卡侬买买买的，但突发了一些情况，只能临时去趟呼市，虽然理性的讲之后还会去很多次…这一次去内蒙古三医院的第五科室，也就是开放病房。昨天上午上完课就去坐动车去呼和浩特，但是出了车站发现自己没带现金就只能徒步去医院…虽然说只有3公里而且快速路那边也很熟悉，没能顺便去内蒙古图书馆算是这次的损失…之后领了生活费，就可以在医院游荡一下了：</p>
<p>从内蒙古三医院的急诊门口进入，之后直接上5楼就到开放病房了（整个建筑共5层，除了第一层和第五层在使用，其他3层都在装修），整个医院都有一种寂静岭的风格，毕竟是特殊医院，加之设备老旧，氛围还是较为诡异的…</p>
<p><img src="http://ocuytj5om.bkt.clouddn.com/IMG_20170303_145609.jpg" /></p>
<p>四楼的心理病房，实际上就是五科（开放病房），毕竟能被送到开放病房的都是温和的精神问题，即心理问题，主要以焦虑症、抑郁症、自闭症的病人为主。虽然2~4层对外宣称是在装修，但个人感觉这和废弃没什么区别，虽然大多数精神病医院都差不多是这个样子….</p>
<p><img src="http://ocuytj5om.bkt.clouddn.com/IMG_20170303_145748.jpg" /></p>
<p>单间病房，这种病房很抢手，毕竟是单间，但也只限于有人陪护才能住。本来是不想住这里的，但非单间病房的那些人…都是心理问题很大的，比如老光棍什么的，考虑到安全性就只能…就病人来说，五科的病人大多数都是一些自身的心理障碍，所谓自己和自己过不去：如隔壁病房的偏执症（负面思想太多）、产后抑郁症（真的太可怕了！我都不考虑结婚了）、自闭症（高中生，毕竟学业压力之下正常情况下是没有正常人的，只是他撑不住了）…因此一般印象中的那种攻击性很强的精神病患者这里是见不到的（据说他们都在七科），能见到的也不过是心理障碍的患者，更直白一点的说就是类似产后抑郁症或者失恋者什么的，这种人日常里也有不少，不过某种程度上，能在自治区精神病院“消费得起”的家庭都是很关爱家人的，毕竟不会拿有色眼镜去看待这样的治疗，其次带家人来治疗就是一种陪伴，现实中太多的家庭对于这样的家庭成员（抑郁倾向、失恋、自闭）完全是鄙视、冷暴力甚至家暴…所以这医院的特殊之处，不仅仅在于其接受特殊病人，更在于相比一般医院这里的患者家属更加包容，也更加不放弃，毕竟心理疾病的治疗是个持久战，一时半会儿是治不好的…</p>
<p><img src="http://ocuytj5om.bkt.clouddn.com/IMG_20170303_161712.jpg" /></p>
<p>紧锁着的大门，整个开放病房只有一个正门出口（护士站），除了病房里的小窗户，再没其他地方能见到阳光，即使有这样一个门，也是紧锁着的，日常也被拿来当晾衣架（开创性很强的用途）…从正门出去可以走楼梯（但和其他精神病医院，只要住院就会被强制服药，药物作用下正常人都难以保持平衡，行动力大幅降低，嗜睡，手抖…），也可以坐电梯（特别老的那种，而且是需要专门的电梯操作员的那种），何况外出必须有假条，所以这种地方，和监狱的差别不大….唯一能说得上阳光一点的，就是内医大那几个实习生，尤其是其中一个特别热情的大姐姐…这里必须补充一下，即使五科的病人都是正常人，仅仅是有一点点心理障碍。但是对于病情严重的，实际情况是完全丧失行为能力的，外加卫生条件也是要看陪护水平和自身经济情况，所以有一些病人真的是看起来很邋遢的…所以，一些实习生打心眼里就是觉得病人恶心，巴不得赶快结束实习期然后分配工作或者考研，只有对于真心热爱这个专业的医学生，才会对所有人都很热情，毕竟医院这种地方，悲剧更多，happy end 往往是很少的。当然说句不好听的能做到后者的医学生往往都是城市小姐姐，非城市居民不论从成长环境还是眼界上对医学专业都存在错误认知，何况是这种心理医学方向….</p>
<p>此外，精神病院的病房都是严禁带入金属和能够拿来自杀的东西的！即使是饮料也不行…所以限制太多，压抑也就更多….</p>
<p><img src="http://ocuytj5om.bkt.clouddn.com/IMG_20170303_145824.jpg" /></p>
<p>拿来装样子的椅子，风格也很寂静岭…所以有时候不得不说这种过分清净的地方到底是监狱还是病房？好在能在这里工作的护士都不错，医生也都是心理科或精神科的，医患关系方面还是不错的，比较人性化…但是至于患者之间，也仅仅是存在于表面上的热情，来到这里的人99%都是悲剧，因此总体上还是十分压抑的，过去是主动自闭，现在是被迫自闭…真不知道那些护士是怎么适应这里的….</p>
<p>所以有时候，这里能想得更开。我来这个地方参观，也是以陪护身份来的…深刻的感觉就是现代社会的人（市场经济的人）的人生，想变得有意义很简单，只要是正能量的，总比没有好。而原始社会的人（小农经济的人），我就呵呵了…和他们不能谈平等交往。在下午去附近的烧麦馆消费之后就想着回包头，反正我早已习惯这种超出年龄10岁以上的人的生活方式了….能和家里人约定好的就是暑假计划：新疆+西藏+尼泊尔+青海，骑行计划已取消，因为车子和装备的托运价格都赶上机票价格了…至少我很庆幸我的家庭很开明并且经济基础不差…</p>
<p>另外来这里也仅仅是想躲开那些有奇怪想法的人，虽然一些事情偶然间被同学知道了，而且还被优♂雅的接受了，但是一下子充满哲♂学气息就有点觉得他们的一些要求太无Fa无天了，<del>天天要原味</del></p>
<p>之后就是一个人回公寓，奔波于各个城市之间，似乎好几年前就已经习惯了呢…</p>
<p><img src="http://ocuytj5om.bkt.clouddn.com/IMG_20170303_184420.jpg" /></p>
<p>总之把握当下，习惯就好，毕竟经济基础决定上层建筑，也算是另类享受了（如果放在芒果台这绝对是个节目商机）…..</p>]]></content>
        
        <summary type="html">
            
            实际上是半日游，原本是计划去迪卡侬买买买的，但突发了一些情况，只能临时去趟呼市，虽然理性的讲之后还会去很多次…这一次去内蒙古三医院的第五科室，也就是开放病房。昨天上午上完课就去坐动车去呼和浩特，但是出了车站发现自己没带现金就只能徒步去医院…虽然说只有3公里而且快速路那边也很熟悉
            
        </summary>
        
        <category term="Life"/>
        
    </entry>
    
    <entry>
        <title>模拟登录pixiv.net后续</title>
        <link href="https://kotori.love/archives/curl-login-pixiv-next.html"/>
        <id>https://kotori.love/archives/curl-login-pixiv-next.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2017-03-03T19:30:00+08:00</published>
        <updated>2017-03-03T19:30:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>关于大学生赚钱的杂谈</title>
        <link href="http://www.0page.org/article/1076.html"/>
        <id>http://www.0page.org/article/1076.html</id>
        
        <author>
            <name>猎风</name>
        </author>
        
        <published>2017-03-03T00:23:51+08:00</published>
        <updated>2017-03-03T00:23:51+08:00</updated>
        
        <content type="html"><![CDATA[<p>关于这个问题我也考虑很久了，毕竟寒假赚了一票…所以对于这个一直被同龄人所纠结的问题，加上最近母上来巡视，还是不能和她这种rich的人比，所以我还是想来谈笑风生一下…</p>
<p>1.技术兼职</p>
<p>这个就是要有技术功底和行业背景的了，比如我…但是一般来说这并不适合短假兼职，开挖掘机开铲车（铲车收小费一天200是起步价），至于维修什么的或者其他技术支持，比较占用时间而且对于计算机项目外包…you can you up…但是特别占用时间，考虑到学业问题并不推荐。至于威客什么的，垄断行业别折腾了。</p>
<p>2.擦边球单子</p>
<p>这个要行业背景，我分开来说吧，好处是不怎么占用时间，过程简单稳定，不会太影响学业，潜在收入要大很多。</p>
<p>①wash money：这玩意比较拿不准，我就拿乌海地区的来说，主要是通过信用卡（毕竟其他方式需要大资本运作），给那些不怎么干净的wash 1000可收入50，办卡信息当然不推荐自己的，但是这单子不多…也是计件赚钱，一单50起…</p>
<p>②炒虚拟商品：炒BTC这种东西，需要大的投资，风险也大…所以给小学生（人傻钱多）炒作一些游戏装备还是可以的，可以代理一些卡盟，或者自己去刷装备…但是相对来说要投入的时间比较多，因此多多少少会影响到学业，何况存在较大的不稳定因素…</p>
<p>③出售擦边球物品：在校园内这种东西还好，宾馆附近各位读者应该懂要卖啥…但是容易被打..也是走量赚钱，实际可操作性不大。</p>
<p>④化学配方：想进去或者蹲好几年可以试试，反正我手头的不敢这样玩。</p>
<p>⑤盗版物资出售：从邀请码、那种资源到盗版书、考试答案都可以（考试答案可以通过建立助攻群来做，但是骗人被抓就要先想好后果）….</p>
<p>3.正规打工</p>
<p>①快递：校园快递或者学校附近的快递代理，缺点是特别累而且占用时间，优点是工资略高</p>
<p>②家教：这个钱不好赚，虽然时间占用不多，但是费精力…而且现在校园附近基本上是被垄断的，所以一般来说家教是被剥削的，月收入1k出头…自己单干门槛较高</p>
<p>③外卖：参考戒赌吧老哥的故事，按照IMUST的行情是一个月稳定收入1k以上，但是比较占用时间，太累</p>
<p>④替课：替课价格一节课20左右，风险也不低，三思而后行，何况是强制的占用时间…</p>
<p>4.学业/创业</p>
<p>①赞助费套现：参加各种比赛项目或者科研项目申报，或者像我一样找个企业拉赞助，可以套一部分钱…但是别玩脱了，我就玩脱了，必须偿还3k的赞助费…</p>
<p>②想办法拿助学金和奖学金，当然大学里这个东西有多黑各位都懂…</p>
<p>③运维团队：但是涉及到股份制…或者直接对某些东西参股，这个来钱稳定，但是没钱你别玩，这方面搞纯技术是傻逼，拿钱装逼才是真会玩，说白了也是套现的一种方法…虽然说现在网站挂广告也赚不了钱了…</p>
<p>至于炒股炒期货什么的我就不说了，那种东西不说学生能玩的，当然富二代除外…</p>
<p>⑤代购：特殊地方可以试试，我做过几次都没赚到钱，所以…就当是接触社会了..原味除外，这个暴利但是我不玩，太负面了…</p>
<p>至于其他什么不稳的我就不说了，具体操作还是要行业背景。这里必须说一下，在学校里那种天生穷逼还特高调的千万不要信那些人，毕竟naive…如果是富二代官二代可以一起搞一搞，其他人就算了，说白了就是传销性质，不要被骗了。</p>
<p>最后一句还是经济基础决定上层建筑，这种赚钱东西别和穷逼玩（毕竟阶级代购，其次他也不会玩玩脱了他承担不起）…至于详细的细节，以后再补充吧。</p>
<p><a href="http://www.0page.org/wp-content/uploads/2016/06/timg-7.jpg"><img src="http://www.0page.org/wp-content/uploads/2016/06/timg-7.jpg" /></a></p>]]></content>
        
        <summary type="html">
            
            关于这个问题我也考虑很久了，毕竟寒假赚了一票…所以对于这个一直被同龄人所纠结的问题，加上最近母上来巡视，还是不能和她这种rich的人比，所以我还是想来谈笑风生一下… 1.技术兼职 这个就是要有技术功底和行业背景的了，比如我…但是一般来说这并不适合短假兼职，开挖掘机开铲车（铲车收
            
        </summary>
        
        <category term="Life"/>
        
    </entry>
    
    <entry>
        <title>传输原理与稀土专业杂谈</title>
        <link href="http://www.0page.org/industry/re/1071.html"/>
        <id>http://www.0page.org/industry/re/1071.html</id>
        
        <author>
            <name>猎风</name>
        </author>
        
        <published>2017-03-01T22:47:39+08:00</published>
        <updated>2017-03-01T22:47:39+08:00</updated>
        
        <content type="html"><![CDATA[<p>原本是想放到Life分类下 的，但后来想来想去还是放到了工业研究所-稀土冶金分类下。毕竟这是一门专业课，也是原院长所讲，用的现任校长参与编写的教材…</p>
<p>冶金传输原理实际上是属于冶金反应过程学的一门基础课，《传输原理》分为3个部分：动量传输（流体力学）、热量传输（传热学）、质量传输（传质学），总体上属于物理范畴，并不严格的归属于冶金专业，仅仅是在适用性上更突出一些。</p>
<p>传输原理的核心是数论，尤其是定义推导！因为很多物理学范畴的东西一旦利用必须要基于数学去深刻理解，关于计算完全是计算机的事情，但理解完全是高等数学的定义基础部分，即只懂算法然并卵，必须知道其数理关系。传输原理的主要平衡法思路是：微元平衡阀、壳体平衡法、整体平衡法。其中前二者基于微分学，整体平衡法则是微元平衡法的积分形式，因此核心的数理基础就是高数部分中微分方程于积分部分（还包括最初导数的定义与推导）。</p>
<p>因此在数值计算部分，常用思路有：欧拉法、预报-校正法、四阶龙格-库塔法等（具体参考《计算方法》中有关微分方程的计算），同样积分部分的运算同理，这里不做过多解释，推荐先修《计算方法》并现学《高等数学》。</p>
<p>关于稀土专业</p>
<p>《冶金传输原理》是原稀土学院院长张胤负责教的，所以很多…很呵呵，我一直想不明白为什么一直在鼓吹考研，而且仅仅是鼓吹考材料或者冶金的研，还把这种行为认为是一种很争气很成功可以改变人生的行为。可是略懂材料和冶金行业的都知道这个坑有多恶心…</p>
<p>总是说“05年开头，15年结束，你们最后一届给我们挣点气”….我就interesting了！！！稀土专业在之前的就业率有多烂他自己又不是不知道，现在就业又能怎样？依旧特别特别烂，暂且不说那种2k工资永远工人的待遇…所以最后人生的价值也就体现在所谓的“好好学习”上了？</p>
<p>在下实在是不敢苟同，本来中国大学就被各种农村学生这样的劣质生源给毁了（我说的是实话，经济基础决定上层建筑，底层的黑暗才是真黑），如果要把人生价值，让别人认可的话，收入和生活质量都是体现，可是恕我直言，我家一个月的收入顶这种工作（3k月薪）5年的收入….再说矿业和冶金是个什么人文环境，我已经身经百战了，你不恶心人别人就恶心你！！所以我想不明白他们为什么要如此像个中学或者教育产业者一样鼓吹这种东西？本来渣，没钱没本事出国深造，那还读个j8？故意装逼显得自己很牛逼？呵呵了….</p>
<p>也许对于这种“歪门邪道”的东西再也不会感冒了，如果真像他们说的那么好，为什么他们自己现在还混得那么差？毕竟是个一堆垃圾生源的垃圾学校，实在是interesting…..窝还是继续搞自己的东西吧，毕竟专业是自己给自己定的，正确深造，方可不人云亦云….</p>]]></content>
        
        <summary type="html">
            
            原本是想放到Life分类下 的，但后来想来想去还是放到了工业研究所-稀土冶金分类下。毕竟这是一门专业课，也是原院长所讲，用的现任校长参与编写的教材… 冶金传输原理实际上是属于冶金反应过程学的一门基础课，《传输原理》分为3个部分：动量传输（流体力学）、热量传输（传热学）、质量传输
            
        </summary>
        
        <category term="稀土冶金"/>
        
    </entry>
    
    <entry>
        <title>如果重回到学生时代，我想这样做</title>
        <link href="http://blog.lilydjwg.me/posts/208794.html"/>
        <id>http://blog.lilydjwg.me/posts/208794.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2017-02-28T21:25:58+08:00</published>
        <updated>2017-02-28T21:25:58+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>试题太多了做不完就挑喜欢的做。自习没意思就去图书馆里借书看。累了就休息，困了就睡觉。</p>
<p>老师要是有意见，就告诉TA，你别管我这么多，反正考试的时候给你拿年级前五。要是还不同意，每次考试时就这么干：</p>
<p>所有单选题，一律选正确答案后边那项。多选择题该全选的就选A，否则就只选错误的部分。数值填空题就把正确值加一再填上，解答题就只写上答案，然后解释说太困了就不写过程了，或者手写作业写酸了过程就省掉了。英文填空就填反义词。没反义词的就随便找个押韵的词填上好了。作文当然向现在网传的各种高考零分作文看齐。要不就写社论。社论太敏感就写相对论，或者总结一下微积分啊抽象代数啥的，也可以教教阅卷老师编程。</p>
<p>当然抗议完了，有意思的东西还是照学不误。除了高考这样的考试，分数都是老师家长的，但知识和<del>思考能力</del>是自己的。反正推掉了那么一大堆重复的试题，自己有的是时间把那么点儿知识学得融会贯通嘛。当然在此之前，要对自己好点，该吃就吃，慢慢吃，要吃得健康。到点就睡觉，休息好，精神爽，身体棒，才能够好好地生活。</p>
<hr />
<p>我的学生时代，父母听信了 CCTV 和学校老师的谎言，为虎作伥，编织了一个美丽的谎言。在那时候，没有人关心我的感受，关注我的将来、我的命运。那是一个充满敌意的世界。那是一段灰暗无光的童年与青春。直到结束了他们制定的行程，走入社会多年，我才发现，那个美丽的未来不过是个谎言，是牢笼的围栏，也是那个充满敌意的世界里虚构的天堂。</p>
<hr />
<blockquote>
To be who you are and become what you are capable of is the only goal worth living.
—Alvin Ailey
</blockquote>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。试题太多了做不完就挑喜欢的做。自习没意思就去图书馆里借书看。累了就休息，困了就睡觉。  老师要是有意见，就告诉TA，你别管我这么多，反正考试的时候给你拿年级前五。要是还不同意，每次考试时就这么干：  所有单选题，一律选正确答案后边那项。多
            
        </summary>
        
        <category term="未分类"/>
        
    </entry>
    
    <entry>
        <title>某个深夜</title>
        <link href="http://www.eric21.com/2017/02/27/511"/>
        <id>http://www.eric21.com/2017/02/27/511</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2017-02-27T04:30:09+08:00</published>
        <updated>2017-02-27T04:30:09+08:00</updated>
        
        <content type="html"><![CDATA[<p>朋友圈，微博，QQ，Twitter，Instagram 到处都是亲友，想吐槽完全不知道应该写在哪里，我想我差不多该退出所有的社交媒体了。然而我想起来还有这个博客，开个网站就为了写日记，而且完全没人知道，这真是顶级的行为艺术。</p>
<p>最近的困惑是关于一个女人，是个朋友的朋友，从Instagram关注，面姬之后到现在不过两个多月而已。她比我大一岁，和我一样完全不显老。和她什么话题都能聊，虽然刚认识但却像多年的老朋友。第一次叫她，梳个双马尾，穿个jk，娇小的身材，萌的我心都要化了。<br />
然而问题就在这里，虽然是朋友，但我对她是有感觉的。然而我害怕的是，一旦坦白可能连朋友都做不成，就好像洗脸的毛巾错当成洗脚的毛巾，是个不可逆的过程。还不止这些，她是有男友的，而且交往了两年多了，虽然她男友比她小11岁。还有个问题就是她家条件比我家条件好太多了，并不是门当户对的状况。她是个朋友非常多的人，周末很少待在家，经常各种聚会。她也经常和其他异性朋友出去，所以我也不知道自己在她内心算什么地位。<br />
现在闲下来的时候就满脑子都是她，我也不知道自己怎么了。<br />
毕竟自己也单身了七年了，我和她都超过三十岁了。年纪大了觉得自己有点爱无能，却也很渴望爱情。</p>
<p>终有一天自己会成长为平静面对孤独，衰老和死亡的强大的人，但还不是现在。偶尔的周末能见到她是我现在最开心的事，紧紧抓住这小小的幸福吧，即使它可能某天就一去不复返。<br />
编辑于2017年2月27日上午4:30</p>]]></content>
        
        <summary type="html">
            
            朋友圈，微博，QQ，Twitter，Instagram 到处都是亲友，想吐槽完全不知道应该写在哪里，我想我差不多该退出所有的社交媒体了。然而我想起来还有这个博客，开个网站就为了写日记，而且完全没人知道，这真是顶级的行为艺术。 最近的困惑是关于一个女人，是个朋友的朋友，从Inst
            
        </summary>
        
        <category term="日记"/>
        
    </entry>
    
    <entry>
        <title>想象中的孤独，印象中的自由</title>
        <link href="http://www.0page.org/article/1057.html"/>
        <id>http://www.0page.org/article/1057.html</id>
        
        <author>
            <name>猎风</name>
        </author>
        
        <published>2017-02-26T20:29:52+08:00</published>
        <updated>2017-02-26T20:29:52+08:00</updated>
        
        <content type="html"><![CDATA[<p>上一次有这样的紧迫感的时候是在多会儿？高考倒计时进入100天？还是数学建模比赛的第三天？还是说上小学时常走的那条回家小路，总是担心走得太快而在眨眼之间度过那段时光….？</p>
<p>人生的折腾总是在时间快要耗尽时才能有所醒悟。<br />
<br />
学前班毕业的那天依稀的记得下了太阳雨，回家之后还傻傻的在写生字作业….一直到秋季去那个新的班级报道，才想起来自己已经是小学生了。</p>
<p>画室的点点滴滴，英语补习班的记忆，在的时候无比厌恨，总觉得占用时间。当它失去了反而会有一丝庆幸，而N年之后，不论是即将小学毕业时看到校报上曾经的旧画室，墙角隐隐约约还有自己当年的作品….还是，再次路过那个极其复古的校门时，感叹对里面景象的似曾相识，或是勾起了曾经那个不怎么喜欢的课堂上所留下的珍贵回忆….</p>
<p>只有失去才懂得珍惜，小学毕业的那天依旧是感觉什么都没发生，然后和大部分同学7年之内再无相见；中考之后是对自己毕业的一丝庆幸，而高考之后，则是一片迷茫….因为年龄一大了，自己的事，也就不完全是自己的事了；自己的自由，也已完全不属于自己，而是顺应别人的施舍，恰似半个行尸走肉一般去折腾“理想中”的未来…..</p>
<p>马上就要进入大学的第四个学期…此时（除去本学期）距离毕业还有4个学期，人生中所谓重要的4年已经要过去一半了。回首过去，不过是朝花夕拾，捡的尽是枯萎。恨曾经那个浪费时间的自己，又怀念进入倒计时之前的那份自由…迷之熟悉的紧迫感又来了，也许感到无路可退正是因为退路太多，但是骑虎难下的境地，又有谁能体会？反正现在，对于家人，过一天少一天。对于各方面的准备，也是浪费一天，荒废一天，人生苟活一天….</p>
<p>没有体会，又何来理解？</p>
<p><a href="http://www.0page.org/wp-content/uploads/2017/02/timg-6.jpg"><img src="http://www.0page.org/wp-content/uploads/2017/02/timg-6-1024x639.jpg" /></a></p>
<h3>一</h3>
<p>还在高中的那个倒计时当中的某天，如果没记错的话应该还剩200多天…</p>
<p>“羡慕你这个不用高考的家伙…”</p>
<p>“我去了2年内考不上，就滚回来了，不喜欢的专业更没必要读”</p>
<p>“想读什么？”</p>
<p>“机器人与人工智能，你呢？”</p>
<p>“也许是重型机械或者功能材料啊…”</p>
<p>“那你怎么不考虑去毛子留学啊？那边这个学科比较强…”</p>
<p>“忙着赚钱怎么会想浪费时间呢？我家现在技术上任人宰割….”</p>
<p>“你又不缺钱…..”</p>
<p>“有机会的话我会去看你的”</p>
<p>“老子再也不想和你做同桌了…”</p>
<p>自那之后就好像没怎么说过话了，一直到高考前一个月，更是见不到他了，即使是高考之后的那次聚会，也没有见到….最近的一次最近距离，是出去一年半之后的那次春节，赶着紧迫的时间回来和家人聚一聚，之后又马上飞回去，继续一个学渣的孤独在外求学路…</p>
<h3>二</h3>
<p>独居的生活是什么样的？至少作为学生，拿着每个月的生活费并不会安心….</p>
<p>不要熬夜，即使知道一熬夜就会影响效率，脸上起痘痘，甚至回忆起悲惨过去…孤独和抑郁也不过一线之隔，看似自由，实则被束缚于牢笼当中。</p>
<p>坚持早起，把握好效率最高的那段时间；白天也不要想着把事情推到晚上去做然后提前休息，安静换来的就是低效低能…如果还能回到那个每周都能阅读，对图书馆和博物馆无比熟悉的状态，生活也是比较充实的，如果有机会的话能刷完mooc和B站上所有的教学资源和纪录片，再去考几个语言成绩或者开几个坑，那么也算赚了。</p>
<p>总之，即使是这种早晚都要面对的东西，却不推荐过早的面对….普通学生为什么要过着类似留学党的生活，明明年轻却为何要提前步入中老年生活？</p>
<h3>三</h3>
<p>如果有一天时间重来，我又会做什么？就像某人所说，不要活在过去也不要活在未来，把握一天是一天，即使不自由，但能做到不浪费也可知足。4个月前还在幻想着能拿个英语成绩去申请一下港科大的暑期学校试试，现在看来，能坚持着去试就已难能可贵了。就像经营博客一样，就像那个@世界尽头的默川的博主一样，在剩下的2年时间里，如果能多读一些书，多学一点外语、一些技术，可以开几个坑，看足那些优质纪录片和电影…以及安顿好重要的人…..</p>
<p>反正对于倒计时，对于输不起的一场赌博，我无能为力….无力的话就不要反抗了，希望退回到小的圈子里，能不再浪费已经浪费不起的时间….</p>
<p>I could never find the right way to tell you,</p>
<p>have you noticed I’ve been gone?</p>
<p>Because I left behind the home that you made me,</p>
<p>but I will carry it along.</p>
<p>Mm, it’s a long way forward,</p>
<p>so trust in me.</p>
<p>I’ll give them shelter like you’ve done for me,</p>
<p>and I know I’m not alone,</p>
<p>you’ll be watching over us.</p>
<p>Until you’re gone.</p>
<p>When I’m older I’ll be silent beside you,</p>
<p>I know words won’t be enough.</p>
<p>And they won’t need to know our names or our faces,</p>
<p>but they will carry on for us.</p>
<p>Mm, it’s a long way forward,</p>
<p>so trust in me.</p>
<p>I’ll give them shelter like you’ve done for me,</p>
<p>and I know I’m not alone,</p>
<p>you’ll be watching over us.</p>
<p>Until you’re gone.</p>
<p> </p>]]></content>
        
        <summary type="html">
            
            上一次有这样的紧迫感的时候是在多会儿？高考倒计时进入100天？还是数学建模比赛的第三天？还是说上小学时常走的那条回家小路，总是担心走得太快而在眨眼之间度过那段时光….？ 人生的折腾总是在时间快要耗尽时才能有所醒悟。  学前班毕业的那天依稀的记得下了太阳雨，回家之后还傻傻的在写生
            
        </summary>
        
        <category term="Life"/>
        
    </entry>
    
    <entry>
        <title>中键的功能</title>
        <link href="http://blog.lilydjwg.me/posts/208757.html"/>
        <id>http://blog.lilydjwg.me/posts/208757.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2017-02-25T12:39:24+08:00</published>
        <updated>2017-02-25T12:39:24+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	鼠标中键，就是左键和右键之间的那个键啦。常见的鼠标上它在滚轮上。所以你知道了，滚轮是可以往下按的哦。如果是触摸板并且没有中键的话，可以配置双指点击来作为中键使用的（<code>synclient ClickFinger2=3</code>）。</p>
<p>
	中键具有以下好用的功能哦～（括号里是适用的场景）</p>
<ul>
	<li>
		粘贴选择区，不用按复制和粘贴的快捷键了～不过选择区的寿命通常比较短，只适合快速的粘贴操作。另见 <a href="http://blog.lilydjwg.me/2013/11/24/clipboards-in-x-window.41800.html">X Window 中的剪贴板</a>一文。（Linux 桌面、macOS 终端、gpm）</li>
	<li>
		在后台新标签页打开链接（火狐、Google Chrome 等浏览器都支持）</li>
	<li>
		关闭标签页（基本上也是用于网页浏览器。我自己的 <a href="https://github.com/lilydjwg/vim">GVim</a> 也支持）</li>
	<li>
		定位滚动条，可以快速地定位到开头、结尾，或者之前的位置。不需要拖来拖去的麻烦。可惜 GTK 3 里这个功能不好用的了。（GTK 2、Qt）</li>
	<li>
		移动画布（GIMP、Inkscape 等作图软件、GNOME 的文档查看器 Evince）</li>
</ul>
<p>
	这只是比较通用的功能。我的 Awesome 还配置了使用中键关闭窗口呢（「关闭标签页」语义的扩展）。火狐的一些菜单项也支持中键点击，比如书签菜单，右键的「查看图像」菜单，比如前进/后退按钮，以及在它上边点击右键出来的历史记录项目。</p>
<p>
	总结一下中键的语义：</p>
<ul>
	<li>
		在可以粘贴的地方，粘贴</li>
	<li>
		在打开对象时，打开新对象而不取代已有者</li>
	<li>
		在打开的对象本身上时，关闭之</li>
	<li>
		在可定位对象上，移动之</li>
</ul>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   鼠标中键，就是左键和右键之间的那个键啦。常见的鼠标上它在滚轮上。所以你知道了，滚轮是可以往下按的哦。如果是触摸板并且没有中键的话，可以配置双指点击来作为中键使用的（synclient ClickFinger2=3）。     中键具
            
        </summary>
        
        <category term="Linux"/>
        
    </entry>
    
    <entry>
        <title>从百鸡问题到数学思维</title>
        <link href="https://blog.0xbbc.com/2017/02/chicken-problem/"/>
        <id>https://blog.0xbbc.com/2017/02/chicken-problem/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-02-24T01:37:45+08:00</published>
        <updated>2017-02-24T01:37:45+08:00</updated>
        
        <content type="html"><![CDATA[<blockquote><p>鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、母、雏各几何？</p>
<p>——张丘建《算经》</p>
</blockquote>
<p>这里从最最简单的算法开始一步一步讲如何优化，主要涉及的还是数学，Roger Bacon曾在《Opus Majus》写到</p>
<blockquote><p>It is impossible to know things of this world unless you know mathematics.</p>
<p>——Roger Bacon《Opus Majus》</p>
</blockquote>
<p>虽然这篇 post 会一直讲百鸡问题，但是主要还是想以此记录一些在解决某些问题是可能用到的数学思维，并不是只为了做百鸡问题。当然，我的数学也不怎么样qwq不过至少在这道题上，应用数学之后的算法在时间上的减少是比较明显的。</p>
<p>这篇 post 由以下几个部分构成</p>
<ul>
<li><a href="https://blog.0xbbc.com/2017/02/chicken-problem/#bad_impl">一个糟糕的实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/02/chicken-problem/#slightly-better-impl">稍好一点的实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/02/chicken-problem/#impl-with-trivial-optimization">再略微优化一点点</a></li>
<li><a href="https://blog.0xbbc.com/2017/02/chicken-problem/#perhaps-a-good-one">更好的算法</a></li>
<li><a href="https://blog.0xbbc.com/2017/02/chicken-problem/#multi-var">考虑多变量时的情况</a></li>
<li><a href="https://blog.0xbbc.com/2017/02/chicken-problem/#summary">总结</a></li>
</ul>
<p><span></span></p>
<p>一个糟糕的实现</p>
<hr />
<p>说到糟糕的实现，大概就是这样的吧，看完题目之后，就决定开始穷举</p>
<pre>
<span><span>void</span> chicken() {</span>
<span>    <span>for</span> (<span>int</span> a = <span>0</span>; a &lt;= <span>100</span>; a++) {</span>
<span>        <span>for</span> (<span>int</span> b = <span>0</span>; b &lt;= <span>100</span>; b++) {</span>
<span>            <span>for</span> (<span>int</span> c = <span>0</span>; c &lt;= <span>100</span>; c++) {</span>
<span>                <span>int</span> amount = a + b + c;</span>
<span>                <span>int</span> cost = <span>15</span>*a + <span>9</span>*b + c;</span>
<span>                // 抱歉, 实在不忍心把这个版本写上来</span>
<span>                // int cost = 5*a + 3*b + c/3;</span>
<span>                // 这样写连算法的正确性都不能保证</span>
<span>                <span>if</span> (amount == <span>100</span> &amp;&amp; cost == <span>300</span>) {</span>
<span>                    <span>printf</span>(<span>&quot;%d, %d, %d\n&quot;</span>, a, b, c);</span>
<span>                }</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>}</span></pre>
<p>三重循环，每层都是100，于是最内层要跑100*100*100，也就是一百万次。如果这是才开始学的人写的程序，或许还能忍。这要是哪个程序猿／媛写的代码的话……<del>反手就是一煤气罐</del></p>
<p>稍好一点的实现</p>
<hr />
<p>那么稍好一点的实现是什么呢？稍微思考一下，不难得出，因为只有100元，所以即便是全部用来买鸡翁，也才100 / 5 = 20只，同理，全部用来买鸡母则是100 / 3 = 33只，虽然全部买鸡雏可以买到300只，但是题目要求是只能恰好100只。并且很简单的，我们知道因为一共100只，所以只要知道其中两种的确切数量，第三种就可以用100来减去已知的两种的数量得到。</p>
<p>整理成表达式的话就是</p>
<p>\begin{equation}<br />
    \left\{<br />
        \begin{aligned}<br />
            0\le a&amp;\le 20\\<br />
            0\le b&amp;\le 33\\<br />
            0\le c&amp;\le 100\\<br />
            a + b &amp;= 100 - c<br />
        \end{aligned}<br />
    \right.<br />
\end{equation}</p>
<p>翻译到代码则是</p>
<pre><span><span>void</span> chicken() {</span>
<span>    <span>for</span> (<span>int</span> a = <span>0</span>; a &lt;= <span>20</span> <span>/* 100 / 5 */</span>; a++) {</span>
<span>        <span>for</span> (<span>int</span> b = <span>0</span>; b &lt;= <span>33</span> <span>/* 100 / 3 */</span>; b++) {</span>
<span>            <span>int</span> c = <span>100</span> - a - b;</span>
<span>            <span>int</span> cost = <span>15</span>*a + <span>9</span>*b + c;</span>
<span>            <span>if</span> (cost == <span>300</span>) {</span>
<span>                <span>printf</span>(<span>&quot;%d, %d, %d\n&quot;</span>, a, b, c);</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>}</span></pre>
<p>这个算法有两层循环，最内层的部分将会运行21 * 34 = 714次，可以看到，从之前的 1000000 一下子就降到了 714，好几个数量级呢。</p>
<p>如果我们将“百元百鸡”的“百”看作是变量n的话，那么先前的算法的最内层运行了\(n^3\)次，复杂度也是\(O(n^3)\)，而现在的算法则是最内层运行\(\frac{n}{5}\frac{n}{3}=\frac{n^2}{15}\)次，复杂度为\(O(n^2)\)。</p>
<p>再略微优化一点点</p>
<hr />
<p>那么既然引入了变量n，不如继续看看还有没有别的可优化的。比如这个变量c，因为题目中说“鸡雏三值钱一”，则必然变量c是3的倍数。我们可以先验证变量c，再去判断总花费是否符合要求。</p>
<pre><span><span>void</span> chicken(<span>int</span> n) {</span>
<span>    <span>for</span> (<span>int</span> a = <span>0</span>; a &lt;= <span>20</span> <span>/* 100 / 5 */</span>; a++) {</span>
<span>        <span>for</span> (<span>int</span> b = <span>0</span>; b &lt;= <span>33</span> <span>/* 100 / 3 */</span>; b++) {</span>
<span>            <span>int</span> c = n - a - b;</span>
<span>            <span>if</span> (c % <span>3</span> == <span>0</span>) {</span>
<span>                <span>int</span> cost = <span>5</span>*a + <span>3</span>*b + c/<span>3</span>;</span>
<span>                <span>if</span> (cost == n) {</span>
<span>                    <span>printf</span>(<span>&quot;%d, %d, %d\n&quot;</span>, a, b, c);</span>
<span>                }</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>}</span></pre>
<p>在这个算法中，我们的确省掉了\(c\not=0\pmod{3}\)的情形，但是整体上仍旧是有两层循环，复杂度依旧是\(O(n^2)\)</p>
<p>更好的算法</p>
<hr />
<p>可以看到，如果不再做更深入的数学上的分析的话，似乎很难提高算法的效率了。那么现在开始用一些数学的方法来一步一步地分析吧。</p>
<p>由“百鸡”可知</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{constraints-1}<br />
    \left\{<br />
        \begin{aligned}<br />
            0\le a&amp;\le n\\<br />
            0\le b&amp;\le n\\<br />
            0\le c&amp;\le n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{1}<br />
\end{equation}</p>
<p>再由“百钱买百鸡”有</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{spend-amount}<br />
    \left\{<br />
        \begin{aligned}<br />
            5a+3b+\frac{c}{3}&amp;=n\\<br />
            a+b+c&amp;=n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{2}<br />
\end{equation}</p>
<p>由刚才我们讨论过的“鸡雏三值钱一”可知</p>
<p>\begin{equation}<br />
    c \equiv 0\pmod{3}<br />
    \tag{3}<br />
\end{equation}</p>
<p>因为总的花费为\(n=5a+3b+\frac{c}{3}\)，故每一部分的上界都是\(n\)，即下列不等式</p>
<p>\begin{equation}<br />
    \label{constraints-2}<br />
    \left\{<br />
        \begin{aligned}<br />
            0\le a\le \lfloor\frac{n}{5}\rfloor\\<br />
            0\le b\le \lfloor\frac{n}{3}\rfloor\\<br />
            0\le c\le 3n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{4}<br />
\end{equation}</p>
<p>结合先前的<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#constraints-1">限制条件 (1)</a>，得到如下不等式</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{constraints-final}<br />
    \left\{<br />
        \begin{aligned}<br />
            0&amp;\le a\le \lfloor\frac{n}{5}\rfloor\\<br />
            0&amp;\le b\le \lfloor\frac{n}{3}\rfloor\\<br />
            0&amp;\le c\le n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{5}<br />
\end{equation}</p>
<p>现对<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#spend-amount">式2</a>变形</p>
<p><span> </span><br />
\begin{equation}<br />
    \label{spend-amount-variation}<br />
    \left\{<br />
        \begin{aligned}<br />
            5a+3b&amp;=n-\frac{c}{3}\\<br />
            a+b&amp;=n-c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{6}<br />
\end{equation}</p>
<p>消去变量\(b\)</p>
<p>\begin{equation}<br />
    \label{elminate-b}<br />
    \left\{<br />
        \begin{aligned}<br />
            15a + 9b &amp;= 3n - c\\<br />
            9a + 9b &amp;= 9n - 9c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{7}<br />
\end{equation}</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{var-a}<br />
    a = -n + \frac{4}{3}c<br />
    \tag{8}<br />
\end{equation}</p>
<p>由<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#constraints-final">限制条件 (5)</a>可得</p>
<p>\begin{equation}<br />
    \label{constraint-a}<br />
    0 \le -n + \frac{4}{3}c \le \lfloor\frac{n}{5}\rfloor<br />
    \tag{9}<br />
\end{equation}</p>
<p>解得</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{constraint-a-c}<br />
    \left\{<br />
        \begin{aligned}<br />
            \frac{3}{4}n &amp;\le c\\<br />
            c &amp;\le \frac{3}{4}\lfloor\frac{n}{5}\rfloor + \frac{3}{4}n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{10}<br />
\end{equation}</p>
<p>同理，消去变量\(a\)，得到关于\(c\)的不等式</p>
<p>\begin{equation}<br />
    \label{elminate-a}<br />
    \left\{<br />
        \begin{aligned}<br />
            15a + 9b &amp;= 3n - c\\<br />
            15a + 15b &amp;= 15n - 15c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{11}<br />
\end{equation}</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{var-b}<br />
    b = 2n - \frac{7}{3}c<br />
    \tag{12}<br />
\end{equation}</p>
<p>\begin{equation}<br />
    \label{constraint-b}<br />
    0 \le 2n - \frac{7}{3}c \le \lfloor\frac{n}{3}\rfloor<br />
    \tag{13}<br />
\end{equation}</p>
<p><span> </span></p>
<p>\begin{equation}<br />
    \label{constraint-b-c}<br />
    \left\{<br />
        \begin{aligned}<br />
            c &amp;\le \frac{6}{7}n\\<br />
            \frac{6}{7}n - \frac{3}{7}\lfloor\frac{n}{3}\rfloor &amp;\le c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{14}<br />
\end{equation}</p>
<p>最后，可由式<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#constraint-a-c">(10)</a>与式<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#constraint-b-c">(14)</a>确定\(c\)的范围</p>
<p><span> </span></p>
<div>
<pre>
\begin{equation}
    \label{constraint-c-final}
    \left\{
        \begin{aligned}
            c &amp;\le\text{min}(\frac{6}{7}n,\frac{3}{4}\lfloor\frac{n}{5}\rfloor + \frac{3}{4}n)\\
            c &amp;\ge\text{max}(\frac{6}{7}n - \frac{3}{7}\lfloor\frac{n}{3}\rfloor, \frac{3}{4}n)
        \end{aligned}
    \right.
    \tag{15}
\end{equation}
</pre></div>
<p>因为\(c \equiv 0\pmod{3}\)，故分别将\(c\)的上下界调整为3的整倍数，调整方法如下</p>
<div>
<pre>
\begin{equation}
    \label{upper-lower-bound-adjustment}
    \left\{
        \begin{aligned}
            c_{upper} &amp;= c_{upper} - (c_{upper} \mod{3})\\
            c_{lower} &amp;= \left\{
                             \begin{aligned}
                                 c_{lower} + 3 - (c_{lower} \mod 3) \quad&amp;\text{if }c_{lower} = 0 \pmod 3\\
                                 c_{lower}\quad&amp;\text{ otherwise}
                             \end{aligned}
                         \right.
        \end{aligned}
    \right.
    \tag{16}
\end{equation}
</pre></div>
<p>随后从\(c_{lower}\)开始循环，每次增加3，直到\(c\)等于\(c_{upper}\)。循环体内，通过式<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#var-a">(8)</a>、式<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#var-b">(12)</a>计算\(a,b\)的值即可。</p>
<p>因为向下取整在C++中与两个整数类型的变量相除等价，故式<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#constraint-c-final">(15)</a>可重写为</p>
<p>\begin{equation}<br />
    \label{constraint-c-computer}<br />
    \left\{<br />
        \begin{aligned}<br />
            c &amp;\le\text{min}(\frac{6}{7}n,\frac{9}{10}n)\\<br />
            c &amp;\ge\text{max}(\frac{5}{7}n, \frac{3}{4}n)<br />
        \end{aligned}<br />
    \right.<br />
\end{equation}</p>
<p>显然的有</p>
<p>\begin{equation}<br />
    \left\{<br />
        \begin{aligned}<br />
            c &amp;\le\frac{6}{7}n\\<br />
            c &amp;\ge\frac{3}{4}n<br />
        \end{aligned}<br />
    \right.<br />
\end{equation}</p>
<p>最后，C++代码实现如下</p>
<pre><span>#include <span>&lt;stdio.h&gt;</span></span>
<span><span>#include </span>&lt;iostream&gt;</span>
<span></span>
<span><span>void</span> chicken(<span>int</span> n) {</span>
<span>    <span>int</span> c = <span>3</span>*n/<span>4</span>;</span>
<span>    <span>if</span> (c % <span>3</span> != <span>0</span>) c += <span>3</span> - c % <span>3</span>;</span>
<span>    <span>int</span> c_upper = <span>6</span>*n/<span>7</span>;</span>
<span>    c_upper -= c_upper % <span>3</span>;</span>
<span>    <span>for</span> (; c &lt;= c_upper; c += <span>3</span>) {</span>
<span><span>        </span>// 因为整除的原因</span>
<span><span>        </span>// 需要判断a的值是否小于0</span>
<span>        <span>int</span> a = <span>4</span>*c/<span>3</span> - n;</span>
<span>        <span>if</span> (a &lt; <span>0</span>) <span>continue</span>;</span>
<span>        <span>printf</span>(<span>&quot;%d, %d, %d\n&quot;</span>, a, <span>2</span>*n - <span>7</span>*c/<span>3</span>, c);</span>
<span>    }</span>
<span>}</span>
<span></span>
<span><span>int</span> main(<span>int</span> argc, <span>const</span> <span>char</span> * argv[]) {</span>
<span>    <span>chicken</span>(<span>100</span>);</span>
<span>}</span></pre>
<p>现在，我们的算法中只有一个循环了，</p>
<p>\begin{equation}<br />
    \begin{aligned}<br />
        &amp;\frac{c_{upper} - c_{lower}}{3}\\<br />
        =&amp;\frac{\frac{6}{7}n - \frac{3}{4}n}{3}\\<br />
        =&amp;\frac{\frac{3}{28}n}{3}\\<br />
        =&amp;\frac{n}{28}<br />
    \end{aligned}<br />
\end{equation}</p>
<p>循环部分共执行了\(\frac{n}{28}\)次，于是这个算法的复杂度是\(O(n)\)</p>
<p>多变量时的情况</p>
<hr />
<p>首先我们来定义变量，</p>
<ul>
<li>\(n\)，总花费、总购买只数</li>
<li>\(x\)，鸡翁价格</li>
<li>\(y\)，鸡母价格</li>
<li>\(z\)，鸡雏价格</li>
<li>\(p\)，每\(x\)元可买\(p\)只鸡翁</li>
<li>\(q\)，每\(y\)元可买\(q\)只鸡母</li>
<li>\(w\)，每\(z\)元可买\(w\)只鸡雏</li>
</ul>
<p>最后，目标是求</p>
<ul>
<li>\(a\)，购买\(a\)只鸡翁</li>
<li>\(b\)，购买\(b\)只鸡母</li>
<li>\(c\)，购买\(c\)只鸡雏</li>
</ul>
<p>同样的，由“百鸡”这一信息有</p>
<p>\begin{equation}<br />
    \label{constraints-1-multi}<br />
    \left\{<br />
        \begin{aligned}<br />
            0&amp;\le \frac{a}{p}x\le n\\<br />
            0&amp;\le \frac{b}{q}y\le n\\<br />
            0&amp;\le \frac{c}{w}z\le n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{17}<br />
\end{equation}</p>
<p>“百钱买百鸡”</p>
<p><span> </span><br />
\begin{equation}<br />
    \label{spend-amount-multi}<br />
    \left\{<br />
        \begin{aligned}<br />
            \frac{a}{p}x+\frac{b}{q}y+\frac{c}{w}z&amp;=n\\<br />
            a+b+c&amp;=n<br />
        \end{aligned}<br />
    \right.<br />
    \tag{18}<br />
\end{equation}</p>
<p>类似的，由“鸡雏三值钱一”可知</p>
<p>\begin{equation}<br />
    \label{constraint-multi}<br />
    \left\{<br />
        \begin{aligned}<br />
            a &amp;\equiv 0\pmod{p}\\<br />
            b &amp;\equiv 0\pmod{q}\\<br />
            c &amp;\equiv 0\pmod{w}<br />
        \end{aligned}<br />
    \right.<br />
    \tag{19}<br />
\end{equation}</p>
<p>对<a href="https://blog.0xbbc.com/2017/02/chicken-problem/#spend-amount-multi">式18</a>变形，得到</p>
<p>\begin{equation}<br />
    \label{spend-amount-variation-multi}<br />
    \left\{<br />
        \begin{aligned}<br />
            \frac{a}{p}x+\frac{b}{q}y&amp;=n-\frac{c}{w}z\\<br />
            a+b&amp;=n-c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{20}<br />
\end{equation}</p>
<p>消去变量\(b\)</p>
<p>\begin{equation}<br />
    \label{elminate-b-multi}<br />
    \left\{<br />
        \begin{aligned}<br />
            \frac{a}{p}x+\frac{b}{q}y&amp;=n-\frac{c}{w}z\\<br />
            \frac{y}{q}a+\frac{y}{q}b&amp;=\frac{y}{q}n-\frac{y}{q}c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{21}<br />
\end{equation}</p>
<p>化简得到\(a\)关于\(c\)的表达式</p>
<div>
<pre>
\begin{equation}
    \label{var-a-multi}
    \begin{aligned}
        \frac{ya}{q}-\frac{ax}{p}&amp;=(\frac{y}{q}-1)n-(\frac{y}{q}c-\frac{c}{w}z)\\
        \frac{yap-axq}{pq}&amp;=\frac{y-q}{q}n-\frac{ycw-zcq}{wq}\\
        yap-axq&amp;=pn(y-q)-\frac{pycw-pzcq}{w}\\
        a(yp-xq)&amp;=pn(y-q)-\frac{pycw-pzcq}{w}\\
        a&amp;=\frac{pn(y-q)}{yp-xq}-\frac{pc(yw-zq)}{w(yp-xq)}
    \end{aligned}
    \tag{22}
\end{equation}
</pre></div>
<p>同样的，消去变量\(a\)</p>
<p>\begin{equation}<br />
    \label{elminate-a-multi}<br />
    \left\{<br />
        \begin{aligned}<br />
            \frac{a}{p}x+\frac{b}{q}y&amp;=n-\frac{c}{w}z\\<br />
            \frac{x}{p}a+\frac{x}{p}b&amp;=\frac{x}{p}n-\frac{x}{p}c<br />
        \end{aligned}<br />
    \right.<br />
    \tag{23}<br />
\end{equation}</p>
<p>化简得到\(b\)关于\(c\)的表达式</p>
<div>
<pre>
\begin{equation}
    \label{var-b-multi}
    \begin{aligned}
        \frac{xb}{p}-\frac{yb}{q}&amp;=(\frac{x}{p}-1)n-(\frac{x}{p}c-\frac{z}{w}c)\\
        \frac{xbq-ybp}{pq}&amp;=\frac{x-p}{p}n-\frac{xcw-zcp}{wq}\\
        xbq-ybp&amp;=qn(x-p)-\frac{qxcw-qzcp}{w}\\
        b(xq-yp)&amp;=qn(x-p)-\frac{qxcw-qzcp}{w}\\
        b&amp;=\frac{qn(x-p)}{xq-yp}-\frac{qc(xw-zp)}{w(xq-yp)}
    \end{aligned}
    \tag{24}
\end{equation}
</pre></div>
<p>此时对变量\(c\)迭代即可得出\(a,b\)</p>
<p>C++代码实现如下</p>
<pre><span><span>#include </span>&lt;iostream&gt;</span>
<span>#include <span>&lt;tuple&gt;</span></span>
<span>#include <span>&lt;vector&gt;</span></span>
<span></span>
<span>/**</span>
<span> *  百鸡问题</span>
<span> *  @param n    总花费、总购买只数</span>
<span> *  @param x    鸡翁价格</span>
<span> *  @param y    鸡母价格</span>
<span> *  @param z    鸡雏价格</span>
<span> *  @param p    每\(x\)元可买\(p\)只鸡翁</span>
<span> *  @param q    每\(y\)元可买\(q\)只鸡母</span>
<span> *  @param w    每\(z\)元可买\(w\)只鸡雏</span>
<span> *  @return     [(a, b, c)] 在给定条件下的所有可行购买方案</span>
<span> */</span>
<span><span>std</span>::<span>vector</span>&lt;<span>std</span>::<span>tuple</span>&lt;<span>int</span>,<span>int</span>,<span>int</span>&gt;&gt; chicken(<span>int</span> n, <span>int</span> x, <span>int</span> y, <span>int</span> z, <span>int</span> p, <span>int</span> q, <span>int</span> w) {</span>
<span>    <span>std</span>::<span>vector</span>&lt;<span>std</span>::<span>tuple</span>&lt;<span>int</span>,<span>int</span>,<span>int</span>&gt;&gt; result;</span>
<span>    <span>for</span> (<span>int</span> c = <span>0</span>; c &lt;= n; c += w) {</span>
<span>        // \(a=\frac{pn(y-q)}{yp-xq}-\frac{pc(yw-zq)}{w(yp-xq)}\)</span>
<span>        <span>int</span> a = (p*n*(y-q))/(p*y-q*x) - p*c*(y*w-z*q)/(w*(p*y-q*x));</span>
<span>        <span>if</span> (a &lt; <span>0</span>) <span>continue</span>;</span>
<span>        // \(b=\frac{qn(x-p)}{xq-yp}-\frac{qc(xw-zp)}{w(xq-yp)}\)</span>
<span>        <span>int</span> b = (q*n*(x-p))/(q*x-p*y) - q*c*(x*w-z*p)/(w*(q*x-p*y));</span>
<span>        <span>if</span> (b &gt;= <span>0</span>) result.<span>emplace_back</span>(a,b,c);</span>
<span>    }</span>
<span>    <span>return</span> result;</span>
<span>}</span>
<span></span>
<span><span>int</span> main(<span>int</span> argc, <span>const</span> <span>char</span> * argv[]) {</span>
<span>    <span>int</span> a,b,c;</span>
<span>    <span>for</span> (<span>auto</span> p : <span>chicken</span>(<span>100</span>, <span>5</span>, <span>3</span>, <span>1</span>, <span>1</span>, <span>1</span>, <span>3</span>)) {</span>
<span>        <span>std</span>::<span>tie</span>(a,b,c) = p;</span>
<span>        <span>std</span>::<span>cout</span> &lt;&lt; a &lt;&lt; <span>&quot;, &quot;</span> &lt;&lt; b &lt;&lt; <span>&quot;, &quot;</span> &lt;&lt; c &lt;&lt; <span>'\n'</span>;</span>
<span>    }</span>
<span>}</span></pre>
<p>总结</p>
<hr />
<p>可以看到，解决百鸡问题，算法的复杂度从完全不带脑子的\(O(n^3)\)，到思考之后的\(O(n^2)\)，再降到利用数学作为工具分析之后的\(O(n)\)。当时，一般写出来会是\(O(n^2)\)的复杂度，但是也别小看\(O(n^2)\)到\(O(n)\)的差距，当规模n变到足够大的时候，时间上的差异将会是相当惊人的。</p>
<p>（即便如此，最后提出的这个算法也不见得是最优的QAQ）</p>]]></content>
        
        <summary type="html">
            
            鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、母、雏各几何？ ——张丘建《算经》  这里从最最简单的算法开始一步一步讲如何优化，主要涉及的还是数学，Roger Bacon曾在《Opus Majus》写到 It is impossible to know thin
            
        </summary>
        
        <category term="Mathematics"/>
        
    </entry>
    
    <entry>
        <title>一道神奇的JavaScript面试题</title>
        <link href="https://kotori.love/archives/a-javascript-question-create-json-object-from-server.html"/>
        <id>https://kotori.love/archives/a-javascript-question-create-json-object-from-server.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2017-02-21T16:00:00+08:00</published>
        <updated>2017-02-21T16:00:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>微信浏览器下pushState的坑</title>
        <link href="https://kotori.love/archives/vulnerable-pushstate-in-wechat-browser.html"/>
        <id>https://kotori.love/archives/vulnerable-pushstate-in-wechat-browser.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2017-02-20T11:41:00+08:00</published>
        <updated>2017-02-20T11:41:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>又回到最初的起点，记忆中你清澈的脸</title>
        <link href="https://www.xuefenfei.cc/blog/134.html"/>
        <id>https://www.xuefenfei.cc/blog/134.html</id>
        
        <author>
            <name>雪纷飞</name>
        </author>
        
        <published>2017-02-18T08:14:26+08:00</published>
        <updated>2017-02-18T08:14:26+08:00</updated>
        
        <content type="html"><![CDATA[<p><br />
最近有点忙，有点累。博客暂停更新~发个视频；证明我还活着→_→大妈的日常逗比生活……（视频无法播放已修正~）<br />
<div>
<a href="https://www.xuefenfei.cc/blog/go.php?url=aHR0cHM6Ly93ZWwueHVlZmVuZmVpLmNjL3d6L3ZpZGVvL3ZpZGVvLTEubXA0">https://wel.xuefenfei.cc/wz/video/video-1.mp4</a></div></p>
<p></p>]]></content>
        
        <summary type="html">
            
             最近有点忙，有点累。博客暂停更新~发个视频；证明我还活着→_→大妈的日常逗比生活……（视频无法播放已修正~）  https://wel.xuefenfei.cc/wz/video/video-1.mp4 
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="犯二"/>
        
        <category term="逗比生活"/>
        
    </entry>
    
    <entry>
        <title>不平和的一周</title>
        <link href="https://yoooooooooo.com/yukari/?p=88"/>
        <id>https://yoooooooooo.com/yukari/?p=88</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2017-02-16T19:22:12+08:00</published>
        <updated>2017-02-16T19:22:12+08:00</updated>
        
        <content type="html"><![CDATA[<p>我不是特别经常写文章。这次除外，虽然也不长。这周，公司在我们完全不清楚实际情况的情况下改组了。我们的主编这周去休假了，另外一个组就直接开始动手。</p>
<p> </p>
<p>从周一开始，隔级的领导不仅开始隔级插手日常工作，并且还天天找茬，不过这也就算了。</p>
<p> </p>
<p>“那就按要求做，以现在的流量，各位一周只能可以考虑找工作了”  什么？这是大清洗吗？“这个名字我一个月之前就说了，毫无看点。” 什么？刚调过去第二天诶！這也算了。</p>
<div></div>
<p>这周三，我们去开新部门的集体会，散会时新部门的领导居然直接要把我们拆开了，并且现在的主编并不知情……不过我们暂时靠嘴皮子还在一块。但是这怎么行呢？以我们组人数过多为借口就调走两个人？然后还天天找茬？最可气的是前年被调走的编导被调回来当新主编。</p>
<p> </p>
<p>然后今天又要在考勤上动手脚……绩效周期从半年改到三个月……本来年终奖发的就有问题……如果继续留在这，我很难想象今年开始忙的话会出什么乱子，不如早早离开了事。</p>
<p> </p>
<p>对了，还有姐姐们~这个星期姐姐大概特别忙……从周二开始，也是我最痛苦的时候并不能抱着哭什么的……不过还好有雯姐姐。雯姐姐的话和姐姐一样喜欢&gt;&lt;，只是雯姐姐不太能经常见面……雯姐姐是通过姐姐喵认识的……一开始发生了一些事，不过总算是得到了很开心的结果~</p>
<p>一直以来我都是偶尔会找姐姐诉苦……我想姐姐也是很辛苦吧……有这样一个又爱又恨的妹妹……这次的话是雯姐姐……雯姐姐果然对这些事很了解呢……能让妹妹消气一些……如果没有雯姐姐，我的这几天估计是一片灰暗的……感谢姐姐和雯姐姐~</p>
<p> </p>
<p>紫</p>
<p> </p>]]></content>
        
        <summary type="html">
            
            我不是特别经常写文章。这次除外，虽然也不长。这周，公司在我们完全不清楚实际情况的情况下改组了。我们的主编这周去休假了，另外一个组就直接开始动手。   从周一开始，隔级的领导不仅开始隔级插手日常工作，并且还天天找茬，不过这也就算了。   “那就按要求做，以现在的流量，各位一周只能
            
        </summary>
        
        <category term="神楽坂紫"/>
        
    </entry>
    
    <entry>
        <title>AutoCAD 2017简体中文正式版</title>
        <link href="https://www.xuefenfei.cc/blog/130.html"/>
        <id>https://www.xuefenfei.cc/blog/130.html</id>
        
        <author>
            <name>雪纷飞</name>
        </author>
        
        <published>2017-02-08T14:47:11+08:00</published>
        <updated>2017-02-08T14:47:11+08:00</updated>
        
        <content type="html"><![CDATA[<p>AutoCAD 2017简体中文正式版+注册机</p>
<p><img src="https://wel.xuefenfei.cc/images/wz/CAD/CAD-1.jpg" /></p>
<p>AutoCAD Autodesk公司全新推出AutoCAD版本，完美支持win7、win8/8.1和win10的32位和64位系统，需要注意的是该版本不在支持xp系统了，可以说是欧特克公司最新推出的版本，主要用于二维绘图、详细绘制、设计文档和基本三维设计，现已经成为国际上广为流行的绘图工具。借助AutoCAD你可以准确地和客户共享设计数据。您可以体验本地DWG格式所带来的强大优势。DWG是业界使用最广泛的设计数据格式之一，您可以通过它让所有人员随时了解您的最新设计决策。借助AutoCAD 支持演示的图形、渲染工具和强大的绘图和三维打印功能，您的设计将会更加出色。它可以在各种操作系统支持的微型计算机和工作站上运行，完美支持win8/8.1/Win7<br />
等各个32和64位操作系统。</p>
<p><img src="https://wel.xuefenfei.cc/images/wz/CAD/CAD-2.jpg" /></p>
<p>AutoCAD 2017主要特性：<br />
1、优化界面、新标签页、功能区库、命令预览、帮助窗口、地理位置、实景计算、Exchange应用程序、计划提要、线平滑新增暗黑色调界面，这不是酷不酷，而是界面协调深沉利于工作。<br />
2、底部状态栏整体优化更实用便捷。<br />
3、硬件加速效果相当明显。<br />
4、Auto CAD 2016的硬件加速无论平滑效果与流畅度都令人完全满意。</p>
<p><span>AutoCAD 2017激活步骤：</span><br />
<span>1.断开网络（拔除网线或禁用网卡）；</span><br />
<span>2.安装时输入序列号：666-69696969 667-98989898 400-45454545 066-66666666(任意一个)，产品密钥：001I1；</span><br />
<span>3.安装完毕后启动AutoCAD 2017，点击“激活”，然后选择“使用脱机方法申请激活码”，点击下一步，将“</span><br />
<span>请求号”复制下来备用，然后点击“关闭”；</span><br />
<span>4.重新启动AutoCAD 2017，点击“激活”，选择“我具有Autodesk激活码”。</span><br />
<span>5.以管理员身份运行注册机，首先点击“补丁”，然后将“请求码”复制到注册机中，点击“生成”，即可在</span><br />
<span>注册机的窗口中得到“激活码”；</span><br />
<span>6.将上一步得到的“激活码”复制到AutoCAD 2017激活界面中，点击下一步即可完成激活！</span></p>]]></content>
        
        <summary type="html">
            
            AutoCAD 2017简体中文正式版+注册机  AutoCAD Autodesk公司全新推出AutoCAD版本，完美支持win7、win8/8.1和win10的32位和64位系统，需要注意的是该版本不在支持xp系统了，可以说是欧特克公司最新推出的版本，主要用于二维绘图、详细绘
            
        </summary>
        
        <category term="软件分享"/>
        
        <category term="AutoCAD"/>
        
        <category term="AutoCAD2017"/>
        
    </entry>
    
    <entry>
        <title>让你放弃和等待，是为了给你最好的安排</title>
        <link href="https://www.xuefenfei.cc/blog/129.html"/>
        <id>https://www.xuefenfei.cc/blog/129.html</id>
        
        <author>
            <name>雪纷飞</name>
        </author>
        
        <published>2017-02-05T20:41:46+08:00</published>
        <updated>2017-02-05T20:41:46+08:00</updated>
        
        <content type="html"><![CDATA[<p>这是普普通通的一天。</p>
<p>早上起来，她发现家里停电了。于是没办法用热水洗漱，用电吹风吹头发，不能热牛奶，烤面包，只好草草打理一下就出门。</p>
<p>刚走进电梯，邻居家养的小狗一下子冲进来扑住，上周刚买的米白长裙上顿时出现两只黑黑的爪印儿。</p>
<p>让你放弃和等待，是为了给你最好的</p>
<p>开车被警察拦，才想起来今天限行，罚了一百。</p>
<p>到了公司，正好晚了一分钟，又罚五十。</p>
<p>冲进会议室开例会，老板正在宣布工作调整的名单。她的业务居然被无故暂停，她的职位则被一个不学无术的家伙所取代。</p>
<p>午餐时间，所有人都闹着要新任主管请客，一窝蜂笑闹着出了门，没有人叫她。</p>
<p>她一个人去了餐厅，刚把一口饭送进嘴里，重要客户打来电话。对方取消了金额最大的一笔订单，年底的奖金泡汤了。</p>
<p>她看着面前的午餐，再无半分胃口。</p>
<p>刚回公司，电话响起，妈妈在电话那端哽咽，说姥姥的病又重了，可能熬不过这个月了。</p>
<p>她安慰着妈妈，丝毫不敢提及自己的工作变动，只说一定尽快回去看姥姥。<br />
放下电话，短信声响起。</p>
<p>居然是暗恋了十年的对象发来的消息：“Hi，我要结婚了。”</p>
<p>黄昏，她站在回家的路边等着打车，可每位司机听到要去的地点都拒载。无奈，她踩着高跟鞋，拎着沉重的电脑包，向家的方向走去。</p>
<p>脚很快磨出了血泡，实在走不动了，太痛了，她蹲下来缓缓地揉着伤口。</p>
<p>夜色笼罩，头顶的月亮冷冷地俯瞰着她，仿佛无声的提醒，家里还是一片黑暗。</p>
<p>她的眼泪在一瞬间夺眶而出。</p>
<p>……</p>
<p>看起来，我们的生活充满了悲伤。拼尽全力的会急转直下，刻骨铭心的会草草结局，飞蛾扑火的会灰飞烟灭。</p>
<p>于是我们失望、沮丧、困惑、挣扎，甚至绝望，对这一切产生深深的不信任感与抗拒感。终于觉得筋疲力尽，无路可走。可是真的走不下去了吗？</p>
<p>……</p>
<p>她站起来，擦干眼泪，摇晃着继续往前走。</p>
<p>直到下一个路口，有一辆车终于停下来。报了地址，司机和气地说这么巧，我们住同一个小区，看小姑娘你走得辛苦，正好收工，免费送你回家。</p>
<p>她连声道着谢上了车，电话响起。</p>
<p>客户在另一端说，虽然订单取消，可是她的敬业态度让他觉得感动。不知她是否对新的岗位感兴趣？如果愿意跳到自己的公司，薪水涨一倍，职务也提升。他说，其实我等你辞职已经等了好久。</p>
<p>她惊喜地说着谢谢，心情豁然开朗起来。</p>
<p>于是顺手给暗恋对象回了个短信，说祝你幸福。</p>
<p>手机屏幕闪亮，是他发来的回复：今天我跟阿姨通了电话，我们这周末一起回家看姥姥吧。</p>
<p>她惊疑地回：为什么你要陪我回家看姥姥？他发来一个笑脸：“如果不是想让姥姥开心，我不会把求婚提前这么久的。”</p>
<p>她不敢置信地望着那一行话，张大了嘴巴，手足无措。他像知道她的心事，又发：“我都知道，我喜欢你。”她眼圈一下子又红了，心里却轰轰炸开几朵烟花。</p>
<p>一路抿着嘴笑。回家，拿出钥匙，邻居家的门却先开了。</p>
<p>邻居笑眯眯地说：“今天我遛狗回来，发现你家的电闸坏了，就叫我老公帮你修好了。”</p>
<p>在她的身后，那只小狗探出头来，汪汪两声，欢快地摇着尾巴。</p>
<p>她推开家门，一室融融，满眼暖意。</p>
<p>所有的故事都会有一个答案。所有的答案却未必都如最初所愿。重要的是，在最终答案到来之前，你是否耐得住性子，守得稳初心，等得到转角的光明。</p>
<p>随时、随性、随缘。随喜，随遇而安。山有峰顶，海有彼岸。漫漫长途，终有回转。余味苦涩，终有回甘。</p>
<p>在恐惧中安抚自己不安的心，在失落中收拾自己破碎的情绪，也许下一个瞬间，坠入的无边深渊，会忽然在黑暗中闪烁起点点星火。</p>
<p>失去了铁斧，神明会送上金斧银斧。吃下毒苹果，是为了王子的亲吻。</p>
<p>所有的丢失，都是为了珍爱之物的来临腾出位置；所有的匍匐，都是高高跃起前的热身；所有的支离破碎，都是为了来之不易的圆满。</p>
<p>上天不会无缘无故做出莫名其妙的决定。它让你放弃和等待，是为了给你最好的。</p>
<p>所有的欺骗、侮辱和伤害，只是这个世界温柔补偿的序曲。那些星星点点的微芒，终会成为燃烧生命的熊熊之光。</p>
<p>一切都是最好的安排。</p>
<p>Author：辉姑娘</p>]]></content>
        
        <summary type="html">
            
            这是普普通通的一天。 早上起来，她发现家里停电了。于是没办法用热水洗漱，用电吹风吹头发，不能热牛奶，烤面包，只好草草打理一下就出门。 刚走进电梯，邻居家养的小狗一下子冲进来扑住，上周刚买的米白长裙上顿时出现两只黑黑的爪印儿。 让你放弃和等待，是为了给你最好的 开车被警察拦，才想
            
        </summary>
        
        <category term="精选散文"/>
        
    </entry>
    
    <entry>
        <title>使用 Reabble 在 Kindle 上阅读 InoReader 里的文章</title>
        <link href="http://blog.lilydjwg.me/posts/208449.html"/>
        <id>http://blog.lilydjwg.me/posts/208449.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2017-02-04T22:32:16+08:00</published>
        <updated>2017-02-04T22:32:16+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	<strong>2017年02月08日更新</strong>：已经无法通过 InoReader 的 OAuth 功能登录。现只能通过提交 InoReader 账号和密码到 Reabble 的方式登录。我正考虑放弃此服务。</p>
<hr />
<p>
	InoReader 的核心在于阅读。Kindle 的核心也在于阅读。</p>
<p>
	InoReader 的重点在于，它是在线 RSS 阅读器，手机 app 还支持离线，不仅可以在电脑前研读，还可以随时随地使用手机来闲读。可有个问题：长时间盯着 LCD 屏幕看，对眼睛不好！</p>
<p>
	而这正是使用电子墨水的阅读器——如 Kindle——所解决的问题。所以，怎么把两者结合起来呢？</p>
<p>
	土木坛子<a href="https://tumutanzi.com/archives/15555">介绍了</a>一个名为 kindle4rss 的服务，通过电子邮件推送 RSS 源。其实我之前也听朋友说过，RSS 源是可以推送到 Kindle 的。但是这样是针对单个的 RSS 设置，推送到 Kindle 的部分不能和其它地方的阅读同步。然后，我顺着 kindle4rss 看了一下，忽然眼前一亮：他们基于 InoReader 的 API 做了一个网页版的、适合 Kindle 使用的阅读器！</p>
<p>
	就是 <a href="https://reabble.com/">Reabble</a> 啦。其实它支持各种浏览器的，只是配色、操作方式是为 Kindle 优化的。（说起来，我挺讨厌像<a href="http://campus.meituan.com/">美团招聘</a>或者 AirDroid 局域网 HTTPS 版那样故意不支持特定客户端的行为，明明能用的，却偏偏不让用户用。）</p>
<p>
	直接访问就可以试用啦。黑白的界面，在电脑上看着挺丑的，不过在 Kindle 上看就大不一样啦。左边是文章列表界面（调整过选项，隐藏了侧栏和已读文章），右边是文章阅读界面（打开了菜单）：</p>
<p>
	<a href="https://lilyimg.b0.upaiyun.com/blog/reabble/reabble-list.jpg"><img src="https://lilyimg.b0.upaiyun.com/blog/reabble/reabble-list.jpg!thumb" /></a> <a href="https://lilyimg.b0.upaiyun.com/blog/reabble/reabble-article.jpg"><img src="https://lilyimg.b0.upaiyun.com/blog/reabble/reabble-article.jpg!thumb" /></a></p>
<p>
	在 Kindle 上的体验非常好。而且 Kindle 上的登录做得非常棒：只需要在电脑上通过 InoReader 的 OAuth 授权登录，之后就可以获得一串代码，在 Kindle 那边填写就可以了。我的 InoReader 是用 Google 账号登录的，要是让我在 Kindle 上登录我大概会直接放弃的。</p>
<p>
	它要求有 Wi-Fi 网络（废话，Kindle 那个破浏览器又不支持离线模式）。不过这对我来说不是问题。真要没 Wi-Fi 的话，用手机开个热点用也成。</p>
<p>
	不过有些小问题：</p>
<ul>
	<li>
		不支持广播和赞，只支持加星标。</li>
	<li>
		侧栏里没有未读文章的项、以及星标数不能隐藏。</li>
	<li>
		免费用户只能每天阅读15篇文章，但是并没有阅读到那么多就会出现提示。好像重新打开又可以继续读了。</li>
</ul>
<p>
	最后，这服务收费也非常便宜，一年只要18RMB，订更久还会更便宜～最重要的是，它的支付方式对于我很方便！（谁去帮 InoReader 接入支付宝或者微信支付吧，这样我就不用看广告了～）另外，推荐它的话，可以获赠两年的使用权。</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   2017年02月08日更新：已经无法通过 InoReader 的 OAuth 功能登录。现只能通过提交 InoReader 账号和密码到 Reabble 的方式登录。我正考虑放弃此服务。       InoReader 的核心在于阅
            
        </summary>
        
        <category term="网络"/>
        
    </entry>
    
    <entry>
        <title>Beginning主题添加背景视频方法</title>
        <link href="https://www.xuefenfei.cc/blog/126.html"/>
        <id>https://www.xuefenfei.cc/blog/126.html</id>
        
        <author>
            <name>雪纷飞</name>
        </author>
        
        <published>2017-02-03T20:54:49+08:00</published>
        <updated>2017-02-03T20:54:49+08:00</updated>
        
        <content type="html"><![CDATA[<p><img src="https://wel.xuefenfei.cc/images/wz/Beginning/Beginning.jpg" /></p>
<p>说到<a href="https://www.xuefenfei.cc/blog/go.php?url=aHR0cHM6Ly93d3cuYmdiay5vcmcv" target="_blank">Beginning主题</a>（斌果博客）；用的人也蛮多的吧~知道的人肯定也会想到<a href="https://www.xuefenfei.cc/blog/go.php?url=aHR0cHM6Ly9pLnNob2pvLmNj" target="_blank">烧酒博客</a>，浓浓的二次元风格的博客。</p>
<p>这里就来说下如何在该主题下（Beginning主题），添加背景视频。<br />
其实添加方法很简单；这里就用百度经验里《如何用视频背景做网页背景》的方法；来试做下。</p>
<p><span>注：这里只说实现方法；其他方面的修改这里不探讨。</span></p>
<p>1、首先打开该主题目录下的header.php文件。<br />
在&lt;body&gt;后，插入以下代码：</p>
<pre><code>
&lt;video autoplay loop id=&quot;bgvideo&quot;&gt;
&lt;source src=&quot;bg.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
</code></pre>
<p>2、在style.css里添加：</p>
<pre><code>
video#bgvideo { 
  position: fixed; 
  right: 0; 
  bottom: 0; 
  min-width: 100%;
  min-height: 100%; 
  width: auto; 
  height: auto; 
  z-index: -100;   }
</code></pre>
<p><span>最后保存就完成了~如有错误；望指出~至于做成像烧酒那样的；这里不详说。</span><br />
<span> 还有就是移动端什么的；呵呵呵呵~这里也不详说~</span></p>
]]></content>
        
        <summary type="html">
            
             说到Beginning主题（斌果博客）；用的人也蛮多的吧~知道的人肯定也会想到烧酒博客，浓浓的二次元风格的博客。 这里就来说下如何在该主题下（Beginning主题），添加背景视频。 其实添加方法很简单；这里就用百度经验里《如何用视频背景做网页背景》的方法；来试做下。 注：这
            
        </summary>
        
        <category term="WordPress"/>
        
        <category term="Beginning主题"/>
        
        <category term="视频背景"/>
        
    </entry>
    
    <entry>
        <title>Html5背景视频代码</title>
        <link href="https://www.xuefenfei.cc/blog/123.html"/>
        <id>https://www.xuefenfei.cc/blog/123.html</id>
        
        <author>
            <name>雪纷飞</name>
        </author>
        
        <published>2017-02-02T22:01:43+08:00</published>
        <updated>2017-02-02T22:01:43+08:00</updated>
        
        <content type="html"><![CDATA[<p><img src="https://wel.xuefenfei.cc/images/wz/html5-bg/html5-bg.jpg" /></p>
<p>以前介绍过一款支持<a href="https://www.xuefenfei.cc/blog/74.html" target="_blank">移动端的视频背景插件</a>。这个插件是今天整理移动硬盘时发现的。</p>
<p>试了以下；效果还不错，蛮简洁的。当然到你手中；可自己改变样式。<a href="https://www.xuefenfei.cc/blog/go.php?url=aHR0cDovL3d3dy50b2tpbWVraW9sLmNj" target="_blank">演示地址</a></p>]]></content>
        
        <summary type="html">
            
             以前介绍过一款支持移动端的视频背景插件。这个插件是今天整理移动硬盘时发现的。 试了以下；效果还不错，蛮简洁的。当然到你手中；可自己改变样式。演示地址
            
        </summary>
        
        <category term="HTML"/>
        
        <category term="插件"/>
        
        <category term="视频背景"/>
        
    </entry>
    
    <entry>
        <title>【魔兽世界】骑死亡之翼袭击暴风城+骑红龙女王</title>
        <link href="http://www.eric21.com/2017/02/02/503"/>
        <id>http://www.eric21.com/2017/02/02/503</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2017-02-02T19:18:22+08:00</published>
        <updated>2017-02-02T19:18:22+08:00</updated>
        
        <content type="html"><![CDATA[<p>#魔兽世界,#终极坐骑,#最屌的坐骑,#最牛逼的坐骑<br />
<a href="https://www.flickr.com/photos/131143436@N06/32541226531/in/dateposted/"><img src="https://c1.staticflickr.com/1/371/32541226531_5e1a95dd47_b.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/32663519015/in/photostream/"><img src="https://c1.staticflickr.com/1/499/32663519015_d4726ce1ef_b.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/32663518135/in/photostream/"><img src="https://c1.staticflickr.com/1/484/32663518135_6978e718ac_b.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/32510382472/in/photostream/"><img src="https://c1.staticflickr.com/1/359/32510382472_d2d21606d3_b.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/31851145753/in/photostream/"><img src="https://c1.staticflickr.com/1/764/31851145753_276f677efe_b.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/32541229351/in/photostream/"><img src="https://c1.staticflickr.com/1/475/32541229351_cd59a75a6a_b.jpg" /></a></p>]]></content>
        
        <summary type="html">
            
            #魔兽世界,#终极坐骑,#最屌的坐骑,#最牛逼的坐骑      
            
        </summary>
        
        <category term="魔兽世界"/>
        
    </entry>
    
    <entry>
        <title>给自己的wordpress博客添加下雪效果</title>
        <link href="https://www.xuefenfei.cc/blog/122.html"/>
        <id>https://www.xuefenfei.cc/blog/122.html</id>
        
        <author>
            <name>雪纷飞</name>
        </author>
        
        <published>2017-02-01T21:13:15+08:00</published>
        <updated>2017-02-01T21:13:15+08:00</updated>
        
        <content type="html"><![CDATA[<p>本代码需要加载jquery，如果你的博客没有加载可打开header.php模板文件，在&lt;head&gt;&lt;/head&gt;之间添加：</p>
<pre><code>
&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;?php bloginfo('stylesheet_directory'); ?&gt;/js/jquery.min.js&quot; &gt;&lt;/script&gt;</code></pre>
<p>将以下代码调用到你想放入的地方，或者直接放入你的js文件中（<span>注意要去掉&lt;script&gt;&lt;/script&gt;</span>）。</p>
<pre><code>
&lt;script&gt;(function($){$.fn.snow = function(options){var $flake = $('<div>').css({'position': 'absolute','z-index':'9999', 'top': '-50px'}).html('&amp;#10052;'),documentHeight= $(document).height(),documentWidth= $(document).width(),defaults = {minSize:10,maxSize:20,newOn:1000,flakeColor: &quot;#FFFFFF&quot;/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */},options= $.extend({}, defaults, options);var interval= setInterval( function(){var startPositionLeft = Math.random() * documentWidth - 100,startOpacity = 0.5 + Math.random(),sizeFlake = options.minSize + Math.random() * options.maxSize,endPositionTop = documentHeight - 200,endPositionLeft = startPositionLeft - 500 + Math.random() * 500,durationFall = documentHeight * 10 + Math.random() * 5000; $flake.clone().appendTo('body').css({left: startPositionLeft,opacity:startOpacity,'font-size': sizeFlake,color: options.flakeColor}).animate({top: endPositionTop,left: endPositionLeft,opacity: 0.2},durationFall,'linear',function(){$(this).remove()});}, options.newOn);};})(jQuery);$(function(){$.fn.snow({minSize:6,/* 定义雪花最小尺寸 */ maxSize:16,/* 定义雪花最大尺寸 */newOn:230/* 定义密集程度，数字越小越密集 */});});&lt;/script&gt;</div></code></pre>
<p><span>PS:由于太占用CPU；所以本站已取消~</span></p>
]]></content>
        
        <summary type="html">
            
            本代码需要加载jquery，如果你的博客没有加载可打开header.php模板文件，在&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;之间添加：   &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;&amp;lt;?php 
            
        </summary>
        
        <category term="WordPress"/>
        
        <category term="下雪效果"/>
        
        <category term="网页特效"/>
        
    </entry>
    
    <entry>
        <title>sbeam垃圾游戏体验——disunity</title>
        <link href="https://www.261day.com/sbeam%e5%9e%83%e5%9c%be%e6%b8%b8%e6%88%8f%e4%bd%93%e9%aa%8c-disunity/"/>
        <id>https://www.261day.com/sbeam%e5%9e%83%e5%9c%be%e6%b8%b8%e6%88%8f%e4%bd%93%e9%aa%8c-disunity/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2017-02-01T00:29:07+08:00</published>
        <updated>2017-02-01T00:29:07+08:00</updated>
        
        <content type="html"><![CDATA[<p>sbeam是一个神奇的平台，充满了各种各样的辣鸡游戏。挂卡的时候无意间发现了一个disunity这个游戏。游戏大概就是砍树，被树干砸到就死，时间到就死。总体来说就是一个比赛反应的游戏。</p>
<p>嗯，这种比反应的辣鸡游戏，简单……嗯……额，似乎不太简单呀。费半天才能解锁一个角色。去查一下成就……嗯，最高成就需要的分数是我分数的几十倍？？？</p>
<p>是时候干老本行改游戏了。游戏引擎Unity，好的，这就是说代码就老老实实躺在那里。</p>
<p>ILSpy带着Reflexil插件，走起！Assembly-CSharp.dll，嗯，显然代码都在这里。</p>
<p><a href="https://www.261day.com/wp-content/uploads/2017/02/YRW_WETF6SJF3TE3F.png"><img src="https://www.261day.com/wp-content/uploads/2017/02/YRW_WETF6SJF3TE3F.png" /></a></p>
<p>这里可以看到这个辣鸡游戏的代码都很松散的堆在这里，根本没有划分包。具体一看这游戏的功能，似乎还很全，似乎连语音通讯什么的都做了。厉害了这辣鸡游戏。</p>
<p><a href="https://www.261day.com/wp-content/uploads/2017/02/1D5C9RJ9WBKDQTS3JQ.png"><img src="https://www.261day.com/wp-content/uploads/2017/02/1D5C9RJ9WBKDQTS3JQ-1024x557.png" /></a>在一番寻找之后在WoodPart的initBranch里找到了树枝生成的代码。经过一番对字节码的狂怼，终于吧字节码给魔改掉了，右面就是被我魔改后的字节码。</p>
<div>—</div>
<p><strong>最后再在这里给出patch之后的作弊dll文件吧。注意，这个作弊可以在多人游戏中使用！</strong></p>
<p><a href="https://zuo.261day.com/Timberman/Assembly-CSharp.dll">https://zuo.261day.com/Timberman/Assembly-CSharp.dll</a></p>]]></content>
        
        <summary type="html">
            
            sbeam是一个神奇的平台，充满了各种各样的辣鸡游戏。挂卡的时候无意间发现了一个disunity这个游戏。游戏大概就是砍树，被树干砸到就死，时间到就死。总体来说就是一个比赛反应的游戏。 嗯，这种比反应的辣鸡游戏，简单……嗯……额，似乎不太简单呀。费半天才能解锁一个角色。去查一下
            
        </summary>
        
        <category term="原创"/>
        
        <category term="杂记"/>
        
        <category term="disunity"/>
        
        <category term="steam"/>
        
        <category term="作弊"/>
        
    </entry>
    
    <entry>
        <title>解读STL里的std::sort函数</title>
        <link href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/"/>
        <id>https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-01-31T00:49:53+08:00</published>
        <updated>2017-01-31T00:49:53+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文是个人对 C++ 标准库里的 std::sort 函数的分析、解读。鉴于个人能力有限，文中若有错误、疏漏还请各位<del>来打我啊</del>多多<del>调</del>指教QAQ</p>
<p>当然，各家编译器的实现可能不同，这里我是用的是 LLVM 的实现。</p>
<p><a href="http://llvm.org/svn/llvm-project/libcxx/branches/release_37/include/algorithm" target="_blank">LLVM &gt; libcxx release 37 &gt; algorithm</a></p>
<p>即 Xcode 8.2.1 中所使用的版本。其实在某一行上的实现方式有微小的不同，但是实际上是等价的。而且那一行也不涉及到这里讨论的 std::sort 函数。</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/trivial-difference.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/trivial-difference.png" /></a>trivial difference
<p>这篇 post 由以下几个部分构成</p>
<ul>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#intro">引入</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#implementation">真正的 sort 实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#small_amount_in_0_5">0 ~ 5 个元素时的排序</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#small_amount_func___sort3">__sort3 的实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#small_amount_func___sort4_5">__sort4, __sort5 的实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#small_to_limit">6 ~ limit 的实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#large_amount">较大规模时的实现</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#insertion_sort_incomplete">不完全的插入排序</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#summary">总结</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/analysis-of-std-sort-function/#code">附带注释的 std::sort</a></li>
</ul>
<p><span></span></p>
<p>引入</p>
<hr />
<p>假设有一组由 vector 保存的元素。这里为了简单，我们使用 int 这种基本数据类型，并且直接指定为一组数字。</p>
<pre><span><span>std</span>::<span>vector</span>&lt;<span>int</span>&gt; array{<span>2</span>, <span>8</span>, <span>5</span>, <span>7</span>, <span>3</span>, <span>9</span>, <span>1</span>, <span>0</span>, <span>5</span>};</span></pre>
<p>当我们准备调用 std::sort 时，可以看到，IDE 的代码提示告诉我们有 5 种不同的 std::sort。</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/five-sort-functions.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/five-sort-functions.png" /></a>five std::sort functions
<p>阅读 algorithm 的源代码，可以发现其实后四种最终都是调用的</p>
<pre><span>template</span> &lt;<span>class</span> _RandomAccessIterator, <span>class</span> _Compare&gt;
<span>inline </span><span>void </span>sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)&gt;</pre>
<p>于是从这个函数开始分析吧。在 algorithm 中的实现如下</p>
<pre><span>// This forwarder keeps the top call and the recursive calls using the same instantiation, forcing a reference _Compare</span>
<span><span>template</span> &lt;<span>class</span> _RandomAccessIterator, <span>class</span> _Compare&gt;</span>
<span><span>inline</span>_LIBCPP_INLINE_VISIBILITY</span>
<span>void</span>
<span>sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span>#ifdef _LIBCPP_DEBUG</span>
<span>    <span>typedef</span> <span>typename</span> add_lvalue_reference&lt;__debug_less&lt;_Compare&gt; &gt;::type _Comp_ref;</span>
<span>    __debug_less&lt;_Compare&gt; __c(__comp);</span>
<span>    __sort&lt;_Comp_ref&gt;(__first, __last, __c);</span>
<span><span>#else  </span>// _LIBCPP_DEBUG</span>
<span>    <span>typedef</span> <span>typename</span> <span>add_lvalue_reference</span>&lt;_Compare&gt;::type _Comp_ref;</span>
<span>    __sort&lt;<span>_Comp_ref</span>&gt;(__first, __last, __comp);</span>
<span><span>#endif  </span>// _LIBCPP_DEBUG</span>
<span>}</span>
</pre>
<p>首先需要一个可以随机访问的迭代器，如果是使用了 STL 容器的话。如果是普通的数组的话，就直接传递地址。然后是一个比较函数的类型，既可以使用 std::less 或者 std::greater，也可以根据自己的需求传入一个 lambda 函数，传入 lambda 函数时，_Compare 类型会由编译器自动推导。</p>
<p>std::sort 函数传入需要排序的第一个元素和最后一个元素的位置。然后是刚才说的比较大小的函数，这个函数将会被传入两个元素，并且返回这两个元素的比较大小之后的结果。需要注意的是，这个比较必须是严格小于（仅当 “a 小于 b” 时才返回 true），而不能是返回一个 “a 小于等于 b” 的比较结果。</p>
<p>在函数体中，有一个用于 libcxx 调试时的宏，这里我们直接看 release 部分的代码。</p>
<pre><span><span>typedef</span> <span>typename</span> <span>add_lvalue_reference</span>&lt;_Compare&gt;::type _Comp_ref;</span>
<span>__sort&lt;<span>_Comp_ref</span>&gt;(__first, __last, __comp);</span>
</pre>
<p>先是给模版的 _Compare 类型定义了一个的左值引用类型，这里是为了之后我们递归调用自己时，能够保持比较函数使用引用方式进行传递。然后第二行调用了真正的排序实现。</p>
<p>真正的 sort 实现</p>
<hr />
<pre><span>/// 具体实现的函数</span>
<span>/// _RandomAccessIterator 支持随机访问的迭代器</span>
<span>/// _Compare 比较函数的类型</span>
<span>/// __first 需要排序的开始的地方</span>
<span>/// __last 需要排序的结束的地方</span>
<span>/// __comp 比较函数</span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>void</span> <span>__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span></pre>
<p>可以看到，这个模版函数将 _Compare 类型放到了 _RandomAccessIterator 类型之前，这是为了之后递归调用时只需要写明 _Compare 的类型，而 _RandomAccessIterator 类型由编译器推导。</p>
<p>在有了第一个元素和最后一个元素的位置（我们将迭代器当作指针使用）之后，需要得到一共有多少个元素，元素的个数决定了排序的规模和我们的策略。但是对于真正的迭代器类型，两个迭代器相减，可能有不同的返回值类型，为了避免type casting，我们使用 type_traits 中提供的 std::iterator_traits 获得差值类型。</p>
<pre><span><span>typedef</span> <span>typename</span> <span>std</span>::<span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::difference_type difference_type;</span></pre>
<p>有了迭代器做减法所得到的差值的类型之后，我们还需要迭代器本身指向的元素的类型。</p>
<pre><span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</pre>
<p>为什么需要这个 value_type 呢，因为在 C++ 中，一个（广义的）对象可能是用户自己定义的 class、struct 或者 union，又或者是诸如 int、double 这样的基本数据类型。单个基本数据类型在构造 (construct) 或赋值 (assign) 时产生的开销我们可以忽略不计，但如果是用户定义的类型，则会根据具体情况而变化。例如用户自己显式定义了对象的复制构造函数，在这个函数中做了大量数据的复制操作。（在显示定义了对象的复制复制函数也有类似的情况）</p>
<p>于是这一点决定了我们的策略，即在什么规模下，我们使用某种排序方式（稍后则会提到）是可接受的。于是有了这一句判断</p>
<pre><span><span>const</span> difference_type<span> __limit = </span>
    <span>std<span>::</span></span>is_trivially_copy_constructible<span>&lt;</span>value_type<span>&gt;::value &amp;&amp;</span></span>
    <span><span><span>std<span>::</span></span>is_trivially_copy_assignable</span>&lt;<span>value_type</span>&gt;::value ? <span>30</span> : <span>6</span>;</span></pre>
<p>刚才简单的解释了为什么要这两个条件，接下来解释这两个条件的含义以及成立的要求。</p>
<p>对第一个，<span>std<span>::</span>is_trivially_copy_constructible</span>。先抛开 trivially 这个修饰词，copy constructible type（可复制构造类型）的含义很简单，如果一个类型有显式或隐式的复制构造函数，那么就是可复制构造的</p>
<blockquote><p>A copy constructible class is a class that has a copy constructor (either its implicit constructor or a custom defined one).</p>
<p><a href="http://www.cplusplus.com/reference/type_traits/is_copy_constructible/"> is_copy_constructible - cplusplus</a></p>
</blockquote>
<p>那么加上前面的 trivially 这个修饰词之后呢？trivially copy constructible type（简单复制构造类型) 是指一个可以通过同类型的值或者引用构造的类型。标量类型、可以简单复制构造的类 和 数组 都是这种类型。</p>
<blockquote><p>A trivially copy constructible type is a type which can be trivially constructed from a value or reference of the same type. This includes scalar types, trivially copy constructible classes and arrays of such types.</p>
<p><a href="http://www.cplusplus.com/reference/type_traits/is_trivially_copy_constructible/"> is_trivially_copy_constructible - cplusplus</a></p>
</blockquote>
<p>简单复制构造的类是这样一种类（它通过class, struct, union关键字定义）：</p>
<ul>
<li>使用隐式定义的复制构造函数</li>
<li>没有virtual成员</li>
<li>它的基类和非静态数据成员（如果有的话），也必须是简单复制构造类型</li>
</ul>
<p>下一个条件，is_trivially_copy_assignable。与上面的类似，如果说一个类型是copy assignable的话，那么它有显式或隐式的复制赋值函数。加上前面的 trivially 这个修饰词之后，即如果说一个类型是 trivially copy assignable的话，那么</p>
<ul>
<li>使用隐式定义的复制赋值函数</li>
<li>没有virtual成员</li>
<li>它的基类和非静态数据成员（如果有的话），也必须是简单复制赋值类型</li>
</ul>
<p>0 ~ 5 个元素时的排序</p>
<hr />
<p>之后是一个超大的 while 循环，我们先来看它的前面部分（加上注释之后）</p>
<pre><span>    while<span> (</span>true<span>)</span></span>
<span>    {</span>
<span>    __restart:</span>
<span>        // 拿到需要排序的元素的长度</span>
<span>        <span>difference_type</span> __len = __last - __first;</span>
<span>        // 处理长度为 0 到 5 时的排序</span>
<span>        <span>switch</span> (__len)</span>
<span>        {</span>
<span>        // 长度为 0 或 1 时就无需排序了</span>
<span>        <span>case</span> <span>0</span>:</span>
<span>        <span>case</span> <span>1</span>:</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>2</span>:</span>
<span>            // 只有2个元素时，直接比较并交换（如果需要交换的话）</span>
<span>            <span>if</span> (__comp(*--__last, *__first))</span>
<span>                swap(*__first, *__last);</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>3</span>:</span>
<span>            // 只有3个元素时，同样直接比较并交换（不过加了一层函数调用，稍后分析）</span>
<span>            <span>_VSTD</span>::__sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, --__last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>4</span>:</span>
<span>            // 只有4个元素时，同上</span>
<span>            <span>_VSTD</span>::__sort4&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, --__last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>5</span>:</span>
<span>            // 只有5个元素时，同上</span>
<span>            <span>_VSTD</span>::__sort5&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, __first+<span>3</span>, --__last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        }</span></pre>
<p>__sort3 的实现</p>
<hr />
那么 0 到 2 个元素时就不说了，看看 __sort3 做了什么。<p></p>
<pre><span>// stable, 2-3 compares, 0-2 swaps</span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z, _Compare __c)</span></pre>
<p>可以看到，这是只有 3 个元素时的排序函数，它使用 2 到 3 次比较，0 到 2 次交换即可完成，排序完成时，有 \(x 注意，x、y、z是指针，我们交换的是指向的元素的值，指针本身指向的位置并没有改变。知道这一点的话，注释读起来就很简单了。</p>
<pre>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z, _Compare __c)</span>
<span>{</span>
<span>    <span>unsigned</span> __r = <span>0</span>;</span>
<span>    <span>if</span> (!__c(*__y, *__x))          <span>// if x &lt;= y</span></span>
<span>    {</span>
<span>        <span>if</span> (!__c(*__z, *__y))      <span>// if y &lt;= z</span></span>
<span>            <span>return</span> __r;            <span>// x &lt;= y &amp;&amp; y &lt;= z</span></span>
<span>                                   <span>// x &lt;= y &amp;&amp; y &gt; z</span></span>
<span>        swap(*__y, *__z);          <span>// x &lt;= z &amp;&amp; y &lt; z</span></span>
<span>        __r = <span>1</span>;</span>
<span>        <span>if</span> (__c(*__y, *__x))       <span>// if x &gt; y</span></span>
<span>        {</span>
<span>            swap(*__x, *__y);      <span>// x &lt; y &amp;&amp; y &lt;= z</span></span>
<span>            __r = <span>2</span>;</span>
<span>        }</span>
<span>        <span>return</span> __r;                <span>// x &lt;= y &amp;&amp; y &lt; z</span></span>
<span>    }</span>
<span>    <span>if</span> (__c(*__z, *__y))           <span>// x &gt; y, if y &gt; z</span></span>
<span>    {</span>
<span>        swap(*__x, *__z);          <span>// x &lt; y &amp;&amp; y &lt; z</span></span>
<span>        __r = <span>1</span>;</span>
<span>        <span>return</span> __r;</span>
<span>    }</span>
<span>    swap(*__x, *__y);              <span>// x &gt; y &amp;&amp; y &lt;= z</span></span>
<span>    __r = <span>1</span>;                       <span>// x &lt; y &amp;&amp; x &lt;= z</span></span>
<span>    <span>if</span> (__c(*__z, *__y))           <span>// if y &gt; z</span></span>
<span>    {</span>
<span>        swap(*__y, *__z);          <span>// x &lt;= y &amp;&amp; y &lt; z</span></span>
<span>        __r = <span>2</span>;</span>
<span>    }</span>
<span>    <span>return</span> __r;</span>
<span>}                                  <span>// x &lt;= y &amp;&amp; y &lt;= z</span></span>
<span> </span>
</pre>
<p>__sort4, __sort5 的实现</p>
<hr />
在看懂 __sort3 之后，__sort4 和 __sort5 其实就很简单了。先来看 __sort4<p></p>
<pre><span>// stable, 3-6 compares, 0-5 swaps</span>
<span></span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,</span>
<span>            _ForwardIterator __x4, _Compare __c)</span></pre>
<p>它接受 5 个参数，第一个到第四个是需要排序的 x1, x2, x3, x4，最后一个仍是比较函数。__sort4 的想法非常简单，不论你传入的顺序是什么，__sort4 都利用 __sort3 将 x1, x2, x3 排好序，最后找准 x4 的位置就行，找位置的方式是将 x4 与排序好的三个数按从大到小的顺序比较，即先和 x3 比较，若 x4 大于等于 x3，则顺序是 x1, x2, x3, x4。若 x4 小于 x3，则交换 x4 和 x3 指向的元素的值（指针本身指向的位置并没有改变），然后将 x3（x3 指向的元素就是原来 x4 所指向的） 和 x2 比较……以此类推。</p>
<pre><span>// stable, 3-6 compares, 0-5 swaps</span>
<span></span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,</span>
<span>            _ForwardIterator __x4, _Compare __c)</span>
<span>{</span>
<span>    // 先利用__sort3 将 x1, x2, x3 排好序</span>
<span>    <span>unsigned</span> __r = __sort3&lt;_Compare&gt;(__x1, __x2, __x3, __c);</span>
<span></span>
<span>    // 此时有 x1 
<span>    // 接下来找好 x4 的位置</span>
<span>    <span>if</span> (__c(*__x4, *__x3))</span>
<span>    {</span>
<span>        // 如果 x4 &lt; x3</span>
<span>        // 交换 x3 和 x4</span>
<span>        swap(*__x3, *__x4);</span>
<span>        ++__r;</span>
<span>        <span>if</span> (__c(*__x3, *__x2))</span>
<span>        {</span>
<span>            // 如果 x3 &lt; x2</span>
<span>            // 交换 x2 和 x3</span>
<span>            swap(*__x2, *__x3);</span>
<span>            ++__r;</span>
<span>            <span>if</span> (__c(*__x2, *__x1))</span>
<span>            {</span>
<span>                // 如果 x2 &lt; x1</span>
<span>                // 交换 x1 和 x2</span>
<span>                swap(*__x1, *__x2);</span>
<span>                ++__r;</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>    <span>return</span> __r;</span>
<span>}</span></span></pre>
<p>接下来的 __sort5 和 __sort4 的做法几乎一样，除了先是使用 __sort4 排序好前四个之外。</p>
<pre><span>// stable, 4-10 compares, 0-9 swaps</span>
<span></span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort5(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,</span>
<span>            _ForwardIterator __x4, _ForwardIterator __x5, _Compare __c)</span>
<span>{</span>
<span>    // 先将 x1, x2, x3, x4 排好序</span>
<span>    <span>unsigned</span> __r = __sort4&lt;_Compare&gt;(__x1, __x2, __x3, __x4, __c);</span>
<span></span>
<span>    // 此时有 x1 
<span>    // 接下来找好 x5 的位置</span>
<span>    <span>if</span> (__c(*__x5, *__x4))</span>
<span>    {</span>
<span>        // 如果 x5 &lt; x4</span>
<span>        // 交换 x4 和 x5</span>
<span>        swap(*__x4, *__x5);</span>
<span>        ++__r;</span>
<span>        <span>if</span> (__c(*__x4, *__x3))</span>
<span>        {</span>
<span>            // 如果 x4 &lt; x3</span>
<span>            // 交换 x3 和 x4</span>
<span>            swap(*__x3, *__x4);</span>
<span>            ++__r;</span>
<span>            <span>if</span> (__c(*__x3, *__x2))</span>
<span>            {</span>
<span>                // 如果 x3 &lt; x2</span>
<span>                // 交换 x2 和 x3</span>
<span>                swap(*__x2, *__x3);</span>
<span>                ++__r;</span>
<span>                <span>if</span> (__c(*__x2, *__x1))</span>
<span>                {</span>
<span>                    // 如果 x2 &lt; x1</span>
<span>                    // 交换 x1 和 x2</span>
<span>                    swap(*__x1, *__x2);</span>
<span>                    ++__r;</span>
<span>                }</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>    <span>return</span> __r;</span>
<span>}</span>
</span></pre>
<p>以上是需要排序的元素在 0 到 5 个时的处理。</p>
<p>6 ~ limit 的实现</p>
<hr />
<p>接下来，还记得我们一开始声明的那个 __limit 变量吗，当我们排序的对象是 trivially copy constructible 且 trivially copy assignable 的时候，__limit 的值为30，否则则为6。那么它限制的是什么呢？就是排序规模在\((5, \_\_limit]\)时的策略。当排序的元素个数处于\((5, \_\_limit]\)时，</p>
<pre><span><span>if</span> (__len &lt;= __limit)</span>
<span>{</span>
<span>    <span>_VSTD</span>::__insertion_sort_3&lt;_Compare&gt;(__first, __last, __comp);</span>
<span>    <span>return</span>;</span>
<span>}</span></pre>
<p>这里调用了 __insertion_sort_3 来排序。这个比较简单，是一个插入排序，并且要求至少有 3 个元素。这里的插入排序与教科书一样的插入排序略有一些区别。</p>
<pre><span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>void</span>
<span>__insertion_sort_3(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span></pre>
<p>这里的插入排序接受的参数和 __sort 相同，然后因为需要一个临时变量，所以也先定义了一下 value_type</p>
<pre><span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</pre>
<p>随后利用刚才的 __sort3 将前三个元素排好序。于是排好序的长度为 3，并且使用 __j 指向排好序的末尾。</p>
<p>接下来令 __i = __j + 1，即 __i 指向排好序的部分的后一个元素，然后将 __i 指向的元素和 __j 指向的元素比较，如果 __i 指向的元素大于等于 __j 指向的元素，那么说明已经排好的部分，再加上 __i 指向的元素 所组成的部分也是排好序的。此时让 __j 指向新的末尾，即将 __i 赋值给 __j，这里的赋值是改变 __j 指向的位置，而不是改变 __j 所指向的元素的值。</p>
<p>那如果刚才 __i 指向的元素小于 __j 指向的元素呢？那么我们需要为 __i 指向的元素找到它应该在的位置（在排好序的部分中插入 __i 所指向的这个元素），查找的方式是先将 __i 指向的元素保存到一个临时变量中，然后从排好序的末尾开始，让那个元素往后移一位，再将临时变量与前一个比较，若结果还是小于，则将前一个也往后移一位……直到临时变量大于等于某个数，或者到了头的时候才停止。</p>
<p>例如 4 个数时，前三个已经排好序。<br />
$$1\quad 3\quad 4\quad 2$$<br />
此时先将 2 和 4 比较，得出 2 小于 4，于是将 2 保存到临时变量中，将 4 往后移一位，有<br />
$$1\quad 3\quad 4\quad 4$$<br />
再将 2 和 3 比较，得出 2 小于 3，于是再将 3 往后移一位，有<br />
$$1\quad 3\quad 3\quad 4$$<br />
最后，将 2 和 1 比较，得出 2 大于 1，于是将 2 写入 1 之后的那个位置，有<br />
$$1\quad 2\quad 3\quad 4$$</p>
<p>此时排序完成。</p>
<pre><span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>void</span>
<span>__insertion_sort_3(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span>    // 定义迭代器里面所用的值类型</span>
<span>    <span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</span>
<span></span>
<span>    // 先将传入的前三个排好序</span>
<span>    _RandomAccessIterator __j = __first+<span>2</span>;</span>
<span>    __sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, __j, __comp);</span>
<span></span>
<span>    // 为已经排好序的部分的后一个元素 i 找位置</span>
<span>    <span>for</span> (_RandomAccessIterator __i = __j+<span>1</span>; __i != __last; ++__i)</span>
<span>    {</span>
<span>        // 将 __i 所指向的元素与已经排好的最后那个比较</span>
<span>        <span>if</span> (__comp(*__i, *__j))</span>
<span>        {</span>
<span>            // 若 __i 所指向的元素小于排好序的最后那个元素</span>
<span>            // 则说明需要把这第 i 个插入到已经排好序的里面</span>
<span></span>
<span>            // 将 __i 所指向的元素保存到临时变量 t 里</span>
<span>            <span>value_type</span> __t(<span>_VSTD</span>::move(*__i));</span>
<span>            // 然后将把排好序部分，从尾到头，一个一个向后移动</span>
<span>            // 直到 t 正好大于某个数 或者 到了头的时候 停止</span>
<span></span>
<span>            // 使用 __k 来每次做比较</span>
<span>            _RandomAccessIterator __k = __j;</span>
<span>            // 使用 __j 来作为每次赋值的位置</span>
<span>            __j = __i;</span>
<span>            <span>do</span></span>
<span>            {</span>
<span>                // 将 __k 指向的元素的值赋值到 __j 指向的位置上</span>
<span>                *__j = <span>_VSTD</span>::move(*__k);</span>
<span>                // 更新 __j 指向的位置</span>
<span>                __j = __k;</span>
<span>            } <span>while</span> (__j != __first &amp;&amp; __comp(__t, *--__k));</span>
<span>            // 若 __j 还不是第一个位置</span>
<span>            // (__k 移动到 __k 的前一个位置之后)，t 的值比 __k 的值还小时，</span>
<span>            // 说明我们还没为 t 找到合适的位置</span>
<span>            // 继续我们的移动过程</span>
<span></span>
<span>            // 当循环结束时，说明 t 有了合适的位置</span>
<span>            // 将 t 赋值到 j 的位置</span>
<span>            *__j = <span>_VSTD</span>::move(__t);</span>
<span>        }</span>
<span>        // 让 __j 指向新的末尾</span>
<span>        __j = __i;</span>
<span>    }</span>
<span>}</span>
</pre>
<p>较大规模时的实现</p>
<hr />
那当排序长度大于 __limit 的时候，怎么处理呢？<p></p>
<pre><span>_RandomAccessIterator __m = __first;</span>
<span>_RandomAccessIterator __lm1 = __last;</span>
<span>--__lm1;<span> // last minus 1, 指向最后一个元素</span></span>
<span><span>unsigned</span> __n_swaps;</span>
<span>{</span>
<span><span>difference_type</span> __delta;</span>
<span><span>if</span> (__len &gt;= <span>1000</span>)</span>
<span>{</span>
<span>    // 当需要排序的元素个数大于等于 1000 时</span>
<span>    // 我们先将五等分点的元素进行排序（排序后仍在五等分点上）</span>
<span>    __delta = __len/<span>2</span>;</span>
<span>    __m += __delta;</span>
<span>    __delta /= <span>2</span>;</span>
<span>    __n_swaps = <span>_VSTD</span>::__sort5&lt;_Compare&gt;(__first, __first + __delta, __m, __m+__delta, __lm1, __comp);</span>
<span>    // 此时在五等分点的五个元素是排好序的</span>
<span>}</span>
<span><span>else</span></span>
<span>{</span>
<span>    // 当需要排序的元素个数小于 1000 时</span>
<span>    // 我们将三等分点的元素进行排序（排序后仍在三等分点上）</span>
<span>    __delta = __len/<span>2</span>;</span>
<span>    __m += __delta;</span>
<span>    __n_swaps = <span>_VSTD</span>::__sort3&lt;_Compare&gt;(__first, __m, __lm1, __comp);</span>
<span>    // 此时在三等分点的三个元素是排好序的</span>
<span>}</span>
<span>}</span>
<span>// __m 所指向的元素的值处于被选中的三个／五个元素的值中的中间
<span>// 我们的目标是区间 [__first, __m) 的元素的值都小于 __m 所指向的元素的值，[__m, __last) 的元素的值都大于等于 __m 所指向的元素的值</span>
<span>_RandomAccessIterator __i = __first;</span>
<span>_RandomAccessIterator __j = __lm1;</span>
<span>// __m 所指向的元素的值一定小于等于 __lm1 所指向的元素的值</span>
<span>// 因为无论是 3 等分还是 5 等分，__m 和 __lm1 都参与了排序，且 __m 的位置在中间</span>
</span></pre>
<p>因为我们的目标是区间 [__first, __m) 的元素的值都小于 __m 所指向的元素的值，[__m, __last) 的元素的值都大于等于 __m 所指向的元素的值，但是如果我们刚才选几个数时运气不太好，正好让 __first 所指向的元素的值等于 __m 所指向的元素的值的话，我们的第一个区间就空了，这就非常糟糕了。于是为了处理这个情况</p>
<pre><span><span>if</span> (!__comp(*__i, *__m))  <span>// if *__first == *__m，如果 __first 所指向的元素的值等于 __m 所指向的元素的值</span></span>
<span>{</span>
<span><span>    </span>// *__first == *__m, *__first doesn't go in first part</span>
<span><span>    </span>// __first 所指向的元素的值等于 __m 所指向的元素的值, 于是 __first 所指向的元素不应该在第一个区间</span>
<span><span>    </span>// manually guard downward moving __j against __i</span>
<span><span>    </span>// 手动让 __j 让 __i 靠近</span>
<span>    <span>while</span> (<span>true</span>)</span>
<span>    {</span>
<span>        <span>if</span> (__i == --__j)</span>
<span>        {</span>
<span>            // *__first == *__m, *__m &lt;= all other elements</span>
<span>            // __first 所指向的元素的值等于 __m 所指向的元素的值, __m 所指向的元素的值小于等于所有其他元素的值</span>
<span>            // Parition instead into [__first, __i) == *__first and *__first &lt; [__i, __last)</span>
<span>            // 重新划分为区间 [__first, __i) == __first 所指向的元素的值， 和 __first 所指向的元素的值小于区间 [__i, __last) 上任何元素的值</span>
<span>            ++__i;  <span>// __first + 1</span></span>
<span>            // __i 移动到 __first 所指的后一个元素（第二个）</span>
<span>            __j = __last;</span>
<span>            <span>if</span> (!__comp(*__first, *--__j))  <span>// we need a guard if *__first == *(__last-1)</span></span>
<span>                                            // 如果__first 所指向的元素的值等于 __last-1 所指向的元素（即最后一个元素）的值</span>
<span>            // 有可能全是相等的元素</span>
<span>            // 从第二个（上方的++__i）开始依次与 __first 所指向的元素的值相比</span>
<span>            {</span>
<span>                <span>while</span> (<span>true</span>)</span>
<span>                {</span>
<span>                    <span>if</span> (__i == __j)</span>
<span>                        // 如果 __i 已经指向了 __last</span>
<span>                        // 说明全都是大小相等的元素</span>
<span>                        <span>return</span><span>;  </span>// [__first, __last) all equivalent elements</span>
<span>                    <span>if</span> (__comp(*__first, *__i))</span>
<span>                    {</span>
<span>                        // 如果 __first 小于某个 __i 指向的元素</span>
<span>                        // 说明这一组不全是相等的元素</span>
<span>                        // 我们的确可以重新划分</span>
<span>                        swap(*__i, *__j);</span>
<span>                        ++__n_swaps;</span>
<span>                        ++__i;</span>
<span>                        <span>break</span>;</span>
<span>                    }</span>
<span>                    ++__i;</span>
<span>                }</span>
<span>            }</span>
<span>            // [__first, __i) == *__first and *__first &lt; [__j, __last) and __j == __last - 1</span>
<span>            // [__first, __i) == *__first 且 *__first &lt; [__j, __last) 且 __j == __last - 1</span>
<span>            // 这说明第二个区间只有一个数，并且这个数大于第一区间所有的数</span>
<span>            // 如果 __i 指向的和 __j 指向的是同一位置</span>
<span>            <span>if</span> (__i == __j)</span>
<span>                // 那么两个区间可以合在一起，并且是排好序的</span>
<span>                <span>return</span>;</span>
<span></span>
<span>            // 如果第一区间的右端和第二区间的左端不在同一位置</span>
<span>            <span>while</span> (<span>true</span>)</span>
<span>            {</span>
<span>                // 将 __i 向后移动，直到 __first 指向的元素的值小于 __i 指向的元素的值</span>
<span>                <span>while</span> (!__comp(*__first, *__i))</span>
<span>                    ++__i;</span>
<span>                // 将 __j 向前移动，直到 __first 指向的元素的值不再小于 __j 指向的元素的值</span>
<span>                <span>while</span> (__comp(*__first, *--__j))</span>
<span>                    ;</span>
<span>                // 如果 __i 的位置大于等于 __j 的位置</span>
<span>                // 说明两个区间发生了重叠，这意味着</span>
<span>                // 第一区间上 __first 所指向的元素的值比某元素的值小</span>
<span>                // 第二区间上某元素的值比 __first 所指向的元素的值小</span>
<span>                <span>if</span> (__i &gt;= __j)</span>
<span>                    <span>break</span>;</span>
<span>                // 若两个区间没有交叉</span>
<span>                // 则交换 __i 和 __j 所指向的元素的值</span>
<span>                swap(*__i, *__j);</span>
<span>                ++__n_swaps;</span>
<span>                // 将 __i  向后移动一位</span>
<span>                ++__i;</span>
<span>            }</span>
<span>            // [__first, __i) == *__first and *__first &lt; [__i, __last)</span>
<span>            // The first part is sorted, sort the secod part</span>
<span>            // _VSTD::__sort&lt;_Compare&gt;(__i, __last, __comp);</span>
<span>            // 最后我们将得到这样的两个区间</span>
<span>            // 第一个区间上的元素的值都相等，范围是 [__first, __i)</span>
<span>            // 第二个区间上的元素都有 __first 所指向的元素的值小于第二个区间上的任意元素</span>
<span>            // 第二个区间的范围是[__i, __last)</span>
<span>            // 显然，我们只需要再对第二区间排序就可以了</span>
<span>            // 直接重设开头的地址</span>
<span>            __first = __i;</span>
<span>            // 然后重新开始</span>
<span>            <span>goto</span> __restart;</span>
<span>        }</span>
<span>        // 这里是之前判断是否有 “__first 所指向的元素的值等于 __m 所指向的元素的值, __m 所指向的元素的值小于等于所有其他元素的值” 的地方</span>
<span>        <span>if</span> (__comp(*__j, *__m))</span>
<span>        {</span>
<span>            // 如果有一个元素小于 __m 所指的元素的值的话</span>
<span>            // 则不会是那种情况</span>
<span>            swap(*__i, *__j);</span>
<span>            ++__n_swaps;</span>
<span>            <span>break</span><span>;  </span>// found guard for downward moving __j, now use unguarded partition</span>
<span>        }</span>
<span>    }</span>
<span>}</span></pre>
<p>进行到这一步的时候，我们已经处理了如下情况</p>
<p>$$\begin{align}&amp;&amp;n\in[0, 5]\\<br />
&amp;&amp;n\in(5, \_\_limit]\\<br />
&amp;1, 1, \dots , 1&amp;\text{全相等}\\<br />
&amp;1, 1, \dots , 1, 2&amp;\text{两边区间正好接在一起}\end{align}$$</p>
<p>后两种情况都是在 __first 所指向的元素的值与 __m 所指向的元素的值等于的情况下才有的，那么在不相等的时候呢？</p>
<pre><span>// It is known that *__i &lt; *__m</span>
<span>// 此时有 __i 所指向的元素的值小于 __m 所指向的元素的值</span>
<span>// __i 的初值是 __first</span>
<span>// __i 向后移动一位</span>
<span>++__i;</span>
<span>// j points beyond range to be tested, *__m is known to be &lt;= *__lm1</span>
<span>// __m 所指向的元素的值必有小于等于 __lm1 所指向的元素的值（因为排序）</span>
<span>// if not yet partitioned...</span>
<span>// 如果还没有划分区间</span>
<span><span>if</span> (__i &lt; __j)</span>
<span>{</span>
<span>    // known that *(__i - 1) &lt; *__m</span>
<span>    // __i 的前一个元素的值小于 __m 所指向的元素的值</span>
<span>    // known that __i &lt;= __m</span>
<span>    // __i 的位置小于等于 __m 的位置</span>
<span>    <span>while</span> (<span>true</span>)</span>
<span>    {</span>
<span>        // __m still guards upward moving __i</span>
<span>        // __m 的位置是 __i 移动的上界</span>
<span>        // 因为当 __i 移动到 __m 的位置时，此循环条件必不成立</span>
<span>        // 让 __i 向后移动，直到某个 __i 所指向的元素的值不再小于 __m 所指向的元素的</span>
<span>        <span>while</span> (__comp(*__i, *__m))</span>
<span>            ++__i;</span>
<span>        // It is now known that a guard exists for downward moving __j</span>
<span>        // 移动 __j  时，也有一个下界存在</span>
<span>        // 让 __j 向前移动，直到某个 __j 所指向的元素的值小于 __m 所指向的元素的</span>
<span>        <span>while</span> (!__comp(*--__j, *__m))</span>
<span>            ;</span>
<span>        // 如果区间有交叉了，则跳出循环</span>
<span>        <span>if</span> (__i &gt; __j)</span>
<span>            <span>break</span>;</span>
<span>        // 否则交换 __i 和 __j 所指向的元素的值</span>
<span>        swap(*__i, *__j);</span>
<span>        ++__n_swaps;</span>
<span>        // It is known that __m != __j</span>
<span>        // If __m just moved, follow it</span>
<span>        // 如果 __i 移动到了 __m 的位置</span>
<span>        <span>if</span> (__m == __i)</span>
<span>            // 重新设置 __m 的位置</span>
<span>            __m = __j;</span>
<span>        ++__i;</span>
<span>    }</span>
<span>}</span>
</pre>
<p>运行完上面那段之后，就会有区间 [__first, __i) 上都小于 __m 所指向的元素的值，以及 __m 所指向的元素的值小于等于区间 [__i, __last) 上任意元素的值，但是由于不清楚 __i 和 __m 的位置，所以我们还需要再稍微判断调整一下</p>
<pre>
<span>// [__first, __i) &lt; *__m and *__m &lt;= [__i, __last)</span>
<span><span>if</span> (__i != __m &amp;&amp; __comp(*__m, *__i))</span>
<span>{</span>
<span>    // 如果 __i 和 __m 不是在同一个位置</span>
<span>    // 且 __m 所指向的元素的值比 __i 所指向的元素的值小</span>
<span>    // 那么交换 __i 和 __m 所指向的元素的值</span>
<span>    swap(*__i, *__m);</span>
<span>    ++__n_swaps;</span>
<span>}</span></pre>
<p>这样以来，我们就有了区间 [__first, __i) 上都小于 __i 所指向的元素的值，以及 __i 所指向的元素的值小于等于区间 [__i+1, __last) 上任意元素的值</p>
<p>现在，还记得我们一直记录的交换次数（__n_swaps）吗？</p>
<pre>
<span>// If we were given a perfect partition, see if insertion sort is quick...</span>
<span>// 如果我们现在有一个完美的划分，让我们试试插入排序是否够快</span>
<span><span>if</span> (__n_swaps == <span>0</span>)</span>
<span>{</span>
<span>    // 如果一直没发生过交换的话</span>
<span>    // 试试在 [__first, __i) 上进行不完全（限制插入次数）的插入排序</span>
<span>    <span>bool</span> __fs = <span>_VSTD</span>::__insertion_sort_incomplete&lt;_Compare&gt;(__first, __i, __comp);</span>
<span>    <span>if</span> (<span>_VSTD</span>::__insertion_sort_incomplete&lt;_Compare&gt;(__i+<span>1</span>, __last, __comp))</span>
<span>    {</span>
<span>        // 如果在 [__i+1, __last) 上进行不完全插入排序能够很快排好的话</span>
<span>        <span>if</span> (__fs)</span>
<span>            // 如果在 [__first, __i) 上进行不完全插入排序也能够很快排好的话</span>
<span>            // 那么就排序完成</span>
<span>            <span>return</span>;</span>
<span>        // 否则将末尾设置为 __i</span>
<span>        // 即再来处理 [__first, __i) 这一段</span>
<span>        __last = __i;</span>
<span>        <span>continue</span>;</span>
<span>    }</span>
<span>    <span>else</span></span>
<span>    {</span>
<span>        // 如果在 [__i+1, __last) 上进行不完全插入排序没有很快排好的话</span>
<span>        // 即在 [__i+1, __last) 上插入次数达到限制</span>
<span>        <span>if</span> (__fs)</span>
<span>        {</span>
<span>            // 但是在 [__first, __i) 上能够很快排好的话</span>
<span>            // 设置排序起点为 ++__i</span>
<span>            // 即再来处理 [__i+1, __last) 这一段</span>
<span>            __first = ++__i;</span>
<span>            <span>continue</span>;</span>
<span>        }</span>
<span>    }</span>
<span>// 如果运行到了这里</span>
<span>// 说明 [__first, __i) 和 [__i+1, __last) 都不能很快排好</span>
<span>}</span>
</pre>
<p>不完全的插入排序</p>
<hr />
上面代码中提到的不完全（限制插入次数）的插入排序是什么样的呢？<p></p>
<pre><span>/// 不完全的插入排序</span>
<span>/// 限制了插入次数</span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>bool</span>
<span>__insertion_sort_incomplete(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span>    // 这里对 0 ~ 5 的元素个数处理与 __sort 里相同</span>
<span>    <span>switch</span> (__last - __first)</span>
<span>    {</span>
<span>    <span>case</span> <span>0</span>:</span>
<span>    <span>case</span> <span>1</span>:</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>2</span>:</span>
<span>        <span>if</span> (__comp(*--__last, *__first))</span>
<span>            swap(*__first, *__last);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>3</span>:</span>
<span>        <span>_VSTD</span>::__sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, --__last, __comp);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>4</span>:</span>
<span>        <span>_VSTD</span>::__sort4&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, --__last, __comp);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>5</span>:</span>
<span>        <span>_VSTD</span>::__sort5&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, __first+<span>3</span>, --__last, __comp);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    }</span>
<span></span>
<span>    // 下面部分和之前提到的 __insertion_sort_3 基本相同</span>
<span>    <span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</span>
<span>    _RandomAccessIterator __j = __first+<span>2</span>;</span>
<span>    __sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, __j, __comp);</span>
<span></span>
<span>    // 除了这里限制了最多有 8 个数插入之外</span>
<span>    <span>const</span> <span>unsigned</span> __limit = <span>8</span>;</span>
<span>    <span>unsigned</span> __count = <span>0</span>;</span>
<span>    <span>for</span> (_RandomAccessIterator __i = __j+<span>1</span>; __i != __last; ++__i)</span>
<span>    {</span>
<span>        <span>if</span> (__comp(*__i, *__j))</span>
<span>        {</span>
<span>            value_type __t(<span>_VSTD</span>::move(*__i));</span>
<span>            _RandomAccessIterator __k = __j;</span>
<span>            __j = __i;</span>
<span>            <span>do</span></span>
<span>            {</span>
<span>                *__j = <span>_VSTD</span>::move(*__k);</span>
<span>                __j = __k;</span>
<span>            } <span>while</span> (__j != __first &amp;&amp; __comp(__t, *--__k));</span>
<span>            *__j = <span>_VSTD</span>::move(__t);</span>
<span>            // 这里是对限制的判断</span>
<span>            <span>if</span> (++__count == __limit)</span>
<span>                // 如果 __i 是末尾的话</span>
<span>                // 说明刚好在第 8 次插入时完成了排序</span>
<span>                <span>return</span> ++__i == __last;</span>
<span>        }</span>
<span>        __j = __i;</span>
<span>    }</span>
<span><span>    </span>return true<span>;</span></span>
<span>}</span>
</pre>
<p>那么 [__first, __i) 和 [__i+1, __last) 都不能很快排好的话，我们就递归调用自己</p>
<pre>
<span>// sort smaller range with recursive call and larger with tail recursion elimination</span>
<span>// 对小的区间使用递归调用，对大的区间使用尾递归消除</span>
<span><span>if</span> (__i - __first &lt; __last - __i)</span>
<span>{</span>
<span>    // 如果前一个区间的元素个数较少</span>
<span>    // 递归调用排好前面的区间</span>
<span>    <span>_VSTD</span>::__sort&lt;_Compare&gt;(__first, __i, __comp);</span>
<span>    // _VSTD::__sort&lt;_Compare&gt;(__i+1, __last, __comp);</span>
<span>    // 外层的 while 循环排序起点改到 __i+1</span>
<span>    __first = ++__i;</span>
<span>}</span>
<span><span>else</span></span>
<span>{</span>
<span>    // 如果后一个区间的元素个数较少</span>
<span>    // 递归调用排好后面的区间</span>
<span>    <span>_VSTD</span>::__sort&lt;_Compare&gt;(__i+<span>1</span>, __last, __comp);</span>
<span>    // _VSTD::__sort&lt;_Compare&gt;(__first, __i, __comp);</span>
<span>    // 外层的 while 循环排序终点改到 __i</span>
<span>    __last = __i;</span>
<span>}</span>
</pre>
<p>总结</p>
<hr />
<p>LLVM 的 libcxx 中实现的 std::sort 的核心流程如下</p>
<pre>
procedure __sort(first, last, comp):
    设置 limit 的大小
        - 排序的类型是简单复制构造、简单复制赋值时，limit := 30
        - 否则，limit := 6
    while True:
        更新排序长度 len := last - first
        处理 0 ~ 5 [0, 5] 个元素的排序
            - 0, 1直接返回
            - 2 比较大小并交换（如果需要）
            - 3 __sort3
            - 4 利用 __sort3 排前三个，找第四个的位置
            - 5 利用 __sort4 排前四个，找第五个的位置
            返回
        处理 6 ~ limit [6, limit] 个元素的排序
            插入排序
            返回
        处理 (limit, +inf) 个元素的排序
            如果个数大于等于 1000，将五等分点的五个数原地排序
            否则将三等分点的三个数原地排序
        // 目标是 [__first, __m) 的元素的值都小于 __m 所指向的元素的值，[__m, __last) 的元素的值都大于等于 __m 所指向的元素的值
        如果 *__first == *__m
            考虑全部相等的情况
                全部相等，返回
            考虑可以分成两个区间，其中第一个区间全部相等并等于 *__first，而第二个区间只有一个数
                返回
            考虑可以分成两个区间，[__first, __i) == *__first and *__first &lt; [__i, __last)
                通过设置__first := __i，排序 [__i, __last)
        如果 *__first &lt; *__m
            调整到 [__first, __i) &lt; *__i and *__i 
<p>附带注释的 std::sort</p>
<hr />
<pre>
<span>// sort</span>
<span></span>
<span>// stable, 2-3 compares, 0-2 swaps</span>
<span>/// 当只有3个元素时的排序函数</span>
<span>/// 2到3次比较，0到2次交换</span>
<span>/// __libcxx_sort3执行完时，x &lt;= y &lt;= z</span>
<span></span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z, _Compare __c)</span>
<span>{</span>
<span>    <span>unsigned</span> __r = <span>0</span>;</span>
<span></span>
<span>                                <span>// </span><span>下面所有的</span><span>x,y,z</span><span>若没有指明</span></span>
<span>                                <span>// </span><span>则均是运行到那一步时，</span><span>x,y,z</span><span>的值（可能经过值交换）</span></span>
<span></span>
<span>    <span>if</span> (!__c(*__y, *__x)) {     <span>// </span><span>如果</span><span>x &lt;= y</span></span>
<span>        <span>if</span> (!__c(*__z, *__y)) { <span>// </span><span>如果</span><span>y &lt;= z</span></span>
<span><span>            </span><span>return</span><span> __r;         </span>// 根据传递性，得到情况0，x &lt;= y &amp;&amp; y &lt;= z</span>
<span>        }</span>
<span>                                <span>// </span><span>如果上面没有返回的话</span></span>
<span>                                <span>// </span><span>说明</span><span> x &lt;= y &amp;&amp; y &gt; z</span></span>
<span>        swap(*__y, *__z);       <span>// </span><span>交换</span><span> y </span><span>和</span><span> z</span></span>
<span>                                <span>// </span><span>此时</span><span> x &lt;= z &amp;&amp; y &lt; z</span></span>
<span>        __r = <span>1</span>;                <span>// </span><span>情况</span><span>1</span><span>，</span><span>x &lt;= z &amp;&amp; y &lt; z</span></span>
<span>                                <span>// </span><span>需要再次比较</span><span> x </span><span>和</span><span> y</span></span>
<span>        <span>if</span> (__c(*__y, *__x)) {  <span>// </span><span>如果</span><span> x &gt; y</span></span>
<span>             swap(*__x, *__y);  <span>// </span><span>交换</span><span> x </span><span>和</span><span> y</span></span>
<span>            __r = <span>2</span>;            <span>// </span><span>此时</span><span> x &lt; y &amp;&amp; y &lt;= z</span></span>
<span>        }</span>
<span>        <span>return</span> __r;</span>
<span>    }</span>
<span></span>
<span>                                <span>// </span><span>已经知道</span><span>x &gt; y</span><span>后</span></span>
<span>    <span>if</span> (__c(*__z, *__y)) {      <span>// </span><span>如果</span><span> y &gt; z</span></span>
<span>                                <span>// </span><span>那么传入时的大小顺序是</span><span> x &gt; y &gt; z</span></span>
<span>                                <span>// </span><span>我们排序的目标是</span><span> x &lt; y &lt; z</span></span>
<span>        swap(*__x, *__z);       <span>// </span><span>于是交换</span><span> x </span><span>和</span><span> z</span></span>
<span>        __r = <span>1</span>;</span>
<span>        <span>return</span> __r;</span>
<span>    }</span>
<span></span>
<span>                                <span>// x &gt; y, y &lt;= z</span></span>
<span>    swap(*__x, *__y);           <span>// </span><span>交换</span><span> x </span><span>和</span><span> y</span></span>
<span>                                <span>// </span><span>此时</span><span> y &gt; x, x &lt;= z</span></span>
<span>    __r = <span>1</span>;</span>
<span>    <span>if</span> (__c(*__z, *__y)) {      <span>// </span><span>如果</span><span> y &gt; z</span></span>
<span>        swap(*__y, *__z);       <span>// </span><span>交换</span><span> y </span><span>和</span><span> z</span></span>
<span>                                <span>// </span><span>此时</span><span> z &gt; y </span><span>且</span><span> z &gt; x, x &lt;= y</span></span>
<span>        __r = <span>2</span>;</span>
<span>    }</span>
<span>    <span>return</span> __r;</span>
<span>}                                <span>// x &lt;= y &amp;&amp; y &lt;= z</span></span>
<span></span>
<span>// stable, 3-6 compares, 0-5 swaps</span>
<span></span>
<span>/// 当只有4个元素时的排序函数</span>
<span>/// 3到6次比较，0到5次交换</span>
<span>/// __sort4执行完时，x1 &lt;= x2 &lt;= x3 &lt;= x4</span>
<span></span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,</span>
<span>            _ForwardIterator __x4, _Compare __c)</span>
<span>{</span>
<span><span>    </span>// 先利用__sort3 将 x1, x2, x3 排好序</span>
<span>    <span>unsigned</span> __r = __sort3&lt;_Compare&gt;(__x1, __x2, __x3, __c);</span>
<span></span>
<span><span>    </span>// 此时有 x1 &lt;= x2 &lt;= x3</span>
<span><span>    </span>// 接下来找好 x4 的位置</span>
<span>    <span>if</span> (__c(*__x4, *__x3))</span>
<span>    {</span>
<span><span>        </span>// 如果 x4 &lt; x3</span>
<span><span>        </span>// 交换 x3 和 x4</span>
<span>        swap(*__x3, *__x4);</span>
<span>        ++__r;</span>
<span>        <span>if</span> (__c(*__x3, *__x2))</span>
<span>        {</span>
<span><span>            </span>// 如果 x3 &lt; x2</span>
<span><span>            </span>// 交换 x2 和 x3</span>
<span>            swap(*__x2, *__x3);</span>
<span>            ++__r;</span>
<span>            <span>if</span> (__c(*__x2, *__x1))</span>
<span>            {</span>
<span>                <span>// </span><span>如果</span><span> x2 &lt; x1</span></span>
<span>                <span>// </span><span>交换</span><span> x1 </span><span>和</span><span> x2</span></span>
<span>                swap(*__x1, *__x2);</span>
<span>                ++__r;</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>    <span>return</span> __r;</span>
<span>}</span>
<span></span>
<span>// stable, 4-10 compares, 0-9 swaps</span>
<span></span>
<span>/// 当只有5个元素时的排序函数</span>
<span>/// 4到10次比较，0到9次交换</span>
<span>/// __sort5执行完时，x1 &lt;= x2 &lt;= x3 &lt;= x4 &lt;= x5</span>
<span></span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _ForwardIterator&gt;</span>
<span>unsigned</span>
<span>__sort5(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,</span>
<span>            _ForwardIterator __x4, _ForwardIterator __x5, _Compare __c)</span>
<span>{</span>
<span><span>    </span>// 先将 x1, x2, x3, x4 排好序</span>
<span>    <span>unsigned</span> __r = __sort4&lt;_Compare&gt;(__x1, __x2, __x3, __x4, __c);</span>
<span></span>
<span><span>    </span>// 此时有 x1 &lt;= x2 &lt;= x3 &lt;= x4</span>
<span><span>    </span>// 接下来找好 x5 的位置</span>
<span>    <span>if</span> (__c(*__x5, *__x4))</span>
<span>    {</span>
<span><span>        </span>// 如果 x5 &lt; x4</span>
<span><span>        </span>// 交换 x4 和 x5</span>
<span>        swap(*__x4, *__x5);</span>
<span>        ++__r;</span>
<span>        <span>if</span> (__c(*__x4, *__x3))</span>
<span>        {</span>
<span><span>            </span>// 如果 x4 &lt; x3</span>
<span><span>            </span>// 交换 x3 和 x4</span>
<span>            swap(*__x3, *__x4);</span>
<span>            ++__r;</span>
<span>            <span>if</span> (__c(*__x3, *__x2))</span>
<span>            {</span>
<span>                <span>// </span><span>如果</span><span> x3 &lt; x2</span></span>
<span>                <span>// </span><span>交换</span><span> x2 </span><span>和</span><span> x3</span></span>
<span>                swap(*__x2, *__x3);</span>
<span>                ++__r;</span>
<span>                <span>if</span> (__c(*__x2, *__x1))</span>
<span>                {</span>
<span>                    <span>// </span><span>如果</span><span> x2 &lt; x1</span></span>
<span>                    <span>// </span><span>交换</span><span> x1 </span><span>和</span><span> x2</span></span>
<span>                    swap(*__x1, *__x2);</span>
<span>                    ++__r;</span>
<span>                }</span>
<span>            }</span>
<span>        }</span>
<span>    }</span>
<span>    <span>return</span> __r;</span>
<span>}</span>

<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>void</span>
<span>__insertion_sort_3(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span><span>    </span>// 定义迭代器里面所用的值类型</span>
<span>    <span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</span>
<span></span>
<span><span>    </span>// 先将传入的前三个排好序</span>
<span>    _RandomAccessIterator __j = __first+<span>2</span>;</span>
<span>    __sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, __j, __comp);</span>
<span></span>
<span><span>    </span>// 为已经排好序的部分的后一个元素 i 找位置</span>
<span>    <span>for</span> (_RandomAccessIterator __i = __j+<span>1</span>; __i != __last; ++__i)</span>
<span>    {</span>
<span><span>        </span>// 将 __i 所指向的元素与已经排好的最后那个比较</span>
<span>        <span>if</span> (__comp(*__i, *__j))</span>
<span>        {</span>
<span><span>            </span>// 若 __i 所指向的元素小于排好序的最后那个元素</span>
<span><span>            </span>// 则说明需要把这第 i 个插入到已经排好序的里面</span>
<span></span>
<span><span>            </span>// 将 __i 所指向的元素保存到临时变量 t 里</span>
<span>            <span>value_type</span> __t(<span>_VSTD</span>::move(*__i));</span>
<span><span>            </span>// 然后将把排好序部分，从尾到头，一个一个向后移动</span>
<span><span>            </span>// 直到 t 正好大于某个数 或者 到了头的时候 停止</span>
<span></span>
<span><span>            </span>// 使用 __k 来每次做比较</span>
<span>            _RandomAccessIterator __k = __j;</span>
<span><span>            </span>// 使用 __j 来作为每次赋值的位置</span>
<span>            __j = __i;</span>
<span>            <span>do</span></span>
<span>            {</span>
<span><span>                </span>// 将 __k 指向的元素的值赋值到 __j 指向的位置上</span>
<span>                *__j = <span>_VSTD</span>::move(*__k);</span>
<span>                <span>// </span><span>更新</span><span> __j </span><span>指向的位置</span></span>
<span>                __j = __k;</span>
<span>            } <span>while</span> (__j != __first &amp;&amp; __comp(__t, *--__k));</span>
<span><span>            </span>// 若 __j 还不是第一个位置</span>
<span><span>            </span>// (__k 移动到 __k 的前一个位置之后)，t 的值比 __k 的值还小时，</span>
<span><span>            </span>// 说明我们还没为 t 找到合适的位置</span>
<span>            <span>// </span><span>继续我们的移动过程</span></span>
<span></span>
<span><span>            </span>// 当循环结束时，说明 t 有了合适的位置</span>
<span><span>            </span>// 将 t 赋值到 j 的位置</span>
<span>            *__j = <span>_VSTD</span>::move(__t);</span>
<span>        }</span>
<span><span>        </span>// 让 __j 指向新的末尾</span>
<span>        __j = __i;</span>
<span>    }</span>
<span>}</span>
<span></span>
<span>/// 不完全的插入排序</span>
<span>/// 限制了插入次数</span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>bool</span>
<span>__insertion_sort_incomplete(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span><span>    </span>// 这里对 0 ~ 5 的元素个数处理与 __sort 里相同</span>
<span>    <span>switch</span> (__last - __first)</span>
<span>    {</span>
<span>    <span>case</span> <span>0</span>:</span>
<span>    <span>case</span> <span>1</span>:</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>2</span>:</span>
<span>        <span>if</span> (__comp(*--__last, *__first))</span>
<span>            swap(*__first, *__last);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>3</span>:</span>
<span>        <span>_VSTD</span>::__sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, --__last, __comp);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>4</span>:</span>
<span>        <span>_VSTD</span>::__sort4&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, --__last, __comp);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    <span>case</span> <span>5</span>:</span>
<span>        <span>_VSTD</span>::__sort5&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, __first+<span>3</span>, --__last, __comp);</span>
<span>        <span>return</span> <span>true</span>;</span>
<span>    }</span>
<span></span>
<span><span>    </span>// 下面部分和之前提到的 __insertion_sort_3 基本相同</span>
<span>    <span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</span>
<span>    _RandomAccessIterator __j = __first+<span>2</span>;</span>
<span>    __sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, __j, __comp);</span>
<span></span>
<span><span>    </span>// 除了这里限制了最多有 8 个数插入之外</span>
<span>    <span>const</span> <span>unsigned</span> __limit = <span>8</span>;</span>
<span>    <span>unsigned</span> __count = <span>0</span>;</span>
<span>    <span>for</span> (_RandomAccessIterator __i = __j+<span>1</span>; __i != __last; ++__i)</span>
<span>    {</span>
<span>        <span>if</span> (__comp(*__i, *__j))</span>
<span>        {</span>
<span>            <span>value_type</span> __t(<span>_VSTD</span>::move(*__i));</span>
<span>            _RandomAccessIterator __k = __j;</span>
<span>            __j = __i;</span>
<span>            <span>do</span></span>
<span>            {</span>
<span>                *__j = <span>_VSTD</span>::move(*__k);</span>
<span>                __j = __k;</span>
<span>            } <span>while</span> (__j != __first &amp;&amp; __comp(__t, *--__k));</span>
<span>            *__j = <span>_VSTD</span>::move(__t);</span>
<span>            <span>// </span><span>这里是对限制的判断</span></span>
<span>            <span>if</span> (++__count == __limit)</span>
<span>                <span>// </span><span>如果</span><span> __i </span><span>是末尾的话</span></span>
<span><span>                </span>// 说明刚好在第 8 次插入时完成了排序</span>
<span>                <span>return</span> ++__i == __last;</span>
<span>        }</span>
<span>        __j = __i;</span>
<span>    }</span>
<span><span>    </span>return true<span>;</span></span>
<span>}</span>

<span>/// 具体实现的函数</span>
<span>/// _RandomAccessIterator 支持随机访问的迭代器</span>
<span>/// _Compare 比较函数的类型</span>
<span>/// __first 需要排序的开始的地方</span>
<span>/// __last 需要排序的结束的地方</span>
<span>/// __comp 比较函数</span>
<span><span>template</span> &lt;<span>class</span> _Compare, <span>class</span> _RandomAccessIterator&gt;</span>
<span>void</span>
<span>__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span><span>    </span>// _Compare is known to be a reference type</span>
<span></span>
<span><span>    </span>// 使用 type_traits 中提供的 std::iterator_traits 获得差值类型</span>
<span>    <span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::difference_type difference_type;</span>
<span></span>
<span><span>    </span>// 迭代器本身指向的元素的类型</span>
<span>    <span>typedef</span> <span>typename</span> <span>iterator_traits</span>&lt;_RandomAccessIterator&gt;::value_type value_type;</span>
<span></span>
<span><span>    </span>// 检查迭代器中的使用的类是否有简单复制构造函数</span>
<span></span>
<span><span>    </span>// copy constructible type （可复制构造类型）的含义很简单，如果一个类型有显式或隐式的复制构造函数，那么就是可复制构造的</span>
<span><span>    </span>// Checks whether a type is CopyConstructible, i.e. has an accessible explicit or implicit copy constructor. If the requirement is met, a member constant value equal true is provided, otherwise value is false.</span>
<span></span>
<span></span>
<span><span>    </span><span>// <a href="http://en.cppreference.com/w/cpp/types/is_copy_constructible"><span>http://en.cppreference.com/w/cpp/types/is_copy_constructible</span></a></span></span>
<span><span>    </span><span>// <a href="http://www.cplusplus.com/reference/type_traits/is_trivially_copy_constructible/"><span>http://www.cplusplus.com/reference/type_traits/is_trivially_copy_constructible/</span></a></span></span>
<span><span>    </span>// trivially copy constructible type（简单复制构造函数) 是指一个可以通过同类型的值或者引用构造的类型。标量类型，可以简单复制构造的类 和 数组 都是这种类型。</span>
<span><span>    </span>// A trivially copy constructible type is a type which can be trivially constructed from a value or reference of the same type. This includes scalar types, trivially copy constructible classes and arrays of such types.</span>
<span></span>
<span><span>    </span>// 简单复制构造的类是这样一种类（它通过class, struct, union关键字定义）：</span>
<span><span>    </span>// - 使用隐式定义的复制构造函数</span>
<span><span>    </span>// - 没有virtual成员</span>
<span><span>    </span>// - 它的基类和非静态数据成员（如果有的话），也必须是简单复制构造的</span>
<span></span>
<span><span>    </span>// A trivially copy constructible class is a class (defined with class, struct or union) that:</span>
<span><span>    </span>// uses the implicitly defined copy constructor.</span>
<span><span>    </span>// has no virtual members.</span>
<span><span>    </span>// its base class and non-static data members (if any) are themselves also trivially copy constructible types.</span>
<span></span>
<span><span>    </span>// 下一个条件，is_trivially_copy_assignable</span>
<span><span>    </span>// 与上面的类似，如果说一个类型是copy assignable的话，那么它有显式或隐式的复制赋值函数</span>
<span><span>    </span>// 如果说一个类型是 trivially copy assignable的话，那么</span>
<span><span>    </span>// - 使用隐式定义的复制赋值函数</span>
<span><span>    </span>// - 没有virtual成员</span>
<span><span>    </span>// - 它的基类和非静态数据成员（如果有的话），也必须是简单复制赋值的</span>
<span><span>    </span><span>const</span>difference_type<span> __limit = </span>is_trivially_copy_constructible<span>&lt;</span>value_type<span>&gt;::value &amp;&amp;</span></span>
<span>                                    <span>is_trivially_copy_assignable</span>&lt;<span>value_type</span>&gt;::value ? <span>30</span> : <span>6</span>;</span>
<span><span>    </span>while<span> (</span>true<span>)</span></span>
<span>    {</span>
<span>    __restart:</span>
<span><span>        </span>// 需要排序的元素的长度</span>
<span>        <span>difference_type</span> __len = __last - __first;</span>
<span><span>        </span>// 处理长度为 0 到 5 时的排序</span>
<span>        <span>switch</span> (__len)</span>
<span>        {</span>
<span><span>        </span>// 长度为 0 或 1 时就无需排序了</span>
<span>        <span>case</span> <span>0</span>:</span>
<span>        <span>case</span> <span>1</span>:</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>2</span>:</span>
<span><span>            </span>// 只有2个元素时，直接比较并交换（如果需要交换的话）</span>
<span>            <span>if</span> (__comp(*--__last, *__first))</span>
<span>                swap(*__first, *__last);</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>3</span>:</span>
<span><span>            </span>// 只有3个元素时，同样直接比较并交换（不过加了一层函数调用，稍后分析）</span>
<span>            <span>_VSTD</span>::__sort3&lt;_Compare&gt;(__first, __first+<span>1</span>, --__last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>4</span>:</span>
<span><span>            </span>// 只有4个元素时，同上</span>
<span>            <span>_VSTD</span>::__sort4&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, --__last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        <span>case</span> <span>5</span>:</span>
<span><span>            </span>// 只有5个元素时，同上</span>
<span>            <span>_VSTD</span>::__sort5&lt;_Compare&gt;(__first, __first+<span>1</span>, __first+<span>2</span>, __first+<span>3</span>, --__last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        }</span>
<span></span>
<span><span>        </span>// 如果排序长度小于限制时</span>
<span><span>        </span>// - 当元素是 简单复制构造 且 简单复制赋值 时，限制是 30</span>
<span><span>        </span>// - 否则限制是 6</span>
<span>        <span>if</span> (__len &lt;= __limit)</span>
<span>        {</span>
<span>            <span>_VSTD</span>::__insertion_sort_3&lt;_Compare&gt;(__first, __last, __comp);</span>
<span>            <span>return</span>;</span>
<span>        }</span>
<span></span>
<span><span>        </span>// __len &gt; 5</span>
<span><span>        </span>// * __len &gt; __limit *</span>
<span>        _RandomAccessIterator __m = __first;</span>
<span>        _RandomAccessIterator __lm1 = __last;</span>
<span><span>        --__lm1; </span>// last minus 1, 指向最后一个元素</span>
<span>        <span>unsigned</span> __n_swaps;</span>
<span>        {</span>
<span>        <span>difference_type</span> __delta;</span>
<span>        <span>if</span> (__len &gt;= <span>1000</span>)</span>
<span>        {</span>
<span><span>            </span>// 当需要排序的元素个数大于等于 1000 时</span>
<span><span>            </span>// 我们先将五等分点的元素进行排序（排序后仍在五等分点上）</span>
<span>            __delta = __len/<span>2</span>;</span>
<span>            __m += __delta;</span>
<span>            __delta /= <span>2</span>;</span>
<span>            __n_swaps = <span>_VSTD</span>::__sort5&lt;_Compare&gt;(__first, __first + __delta, __m, __m+__delta, __lm1, __comp);</span>
<span><span>            </span>// 此时在五等分点的五个元素是排好序的</span>
<span>        }</span>
<span>        <span>else</span></span>
<span>        {</span>
<span><span>            </span>// 当需要排序的元素个数小于 1000 时</span>
<span><span>            </span>// 我们将三等分点的元素进行排序（排序后仍在三等分点上）</span>
<span>            __delta = __len/<span>2</span>;</span>
<span>            __m += __delta;</span>
<span>            __n_swaps = <span>_VSTD</span>::__sort3&lt;_Compare&gt;(__first, __m, __lm1, __comp);</span>
<span><span>            </span>// 此时在三等分点的三个元素是排好序的</span>
<span>        }</span>
<span>        }</span>
<span><span>        </span>// *__m is median</span>
<span><span>        </span>// partition [__first, __m) &lt; *__m and *__m &lt;= [__m, __last)</span>
<span><span>        </span>// (this inhibits tossing elements equivalent to __m around unnecessarily)</span>
<span><span>        </span>// __m 所指向的元素的值处于被选中的三个／五个元素的值中的中间</span>
<span><span>        </span>// 我们的目标是区间 [__first, __m) 的元素的值都小于 __m 所指向的元素的值，[__m, __last) 的元素的值都大于等于 __m 所指向的元素的值</span>
<span>        _RandomAccessIterator __i = __first;</span>
<span>        _RandomAccessIterator __j = __lm1;</span>
<span><span>        </span>// j points beyond range to be tested, *__m is known to be &lt;= *__lm1</span>
<span><span>        </span>// The search going up is known to be guarded but the search coming down isn't.</span>
<span><span>        </span>// Prime the downward search with a guard.</span>
<span><span>        </span>// __m 所指向的元素的值一定小于等于 __lm1 所指向的元素的值</span>
<span><span>        </span>// 因为无论是 3 等分还是 5 等分，__m 和 __lm1 都参与了排序，且 __m 的位置在中间</span>
<span><span>        </span><span>if</span><span> (!__comp(*__i, *__m))  </span>// if *__first == *__m, 如果 __first 所指向的元素的值等于 __m 所指向的元素的值</span>
<span>        {</span>
<span><span>            </span>// *__first == *__m, *__first doesn't go in first part</span>
<span><span>            </span>// __first 所指向的元素的值等于 __m 所指向的元素的值, 于是 __first 所指向的元素不应该在第一个区间</span>
<span><span>            </span>// manually guard downward moving __j against __i</span>
<span><span>            </span>// 手动让 __j 让 __i 靠近</span>
<span>            <span>while</span> (<span>true</span>)</span>
<span>            {</span>
<span>                <span>if</span> (__i == --__j)</span>
<span>                {</span>
<span><span>                    </span>// *__first == *__m, *__m &lt;= all other elements</span>
<span><span>                    </span>// __first 所指向的元素的值等于 __m 所指向的元素的值, __m 所指向的元素的值小于等于所有其他元素的值</span>
<span><span>                    </span>// Parition instead into [__first, __i) == *__first and *__first &lt; [__i, __last)</span>
<span><span>                    </span>// 重新划分为区间 [__first, __i) == __first 所指向的元素的值， 和 __first 所指向的元素的值小于区间 [__i, __last) 上任何元素的值</span>
<span>                    ++__i;  <span>// __first + 1</span></span>
<span><span>                    </span>// __i 移动到 __first 所指的后一个元素（第二个）</span>
<span></span>
<span>                    __j = __last;</span>
<span>                    <span>if</span> (!__comp(*__first, *--__j))  <span>// we need a guard if *__first == *(__last-1)</span></span>
<span>                                                    <span>// </span><span>如果</span><span>__first </span><span>所指向的元素的值等于</span><span> __last-1 </span><span>所指向的元素（即最后一个元素）的值</span></span>
<span>                                                    <span>// </span><span>有可能全是相等的元素</span></span>
<span>                                                    <span>// </span><span>从第二个（上方的</span><span>++__i</span><span>）开始依次与</span><span> __first </span><span>所指向的元素的值相比</span></span>
<span>                    {</span>
<span>                        <span>while</span> (<span>true</span>)</span>
<span>                        {</span>
<span>                            <span>if</span> (__i == __j)</span>
<span>                                <span>// </span><span>如果</span><span> __i </span><span>已经指向了</span><span> __last</span></span>
<span>                                <span>// </span><span>说明全都是大小相等的元素</span></span>
<span><span>                                </span><span>return</span><span>;  </span>// [__first, __last) all equivalent elements</span>
<span>                            <span>if</span> (__comp(*__first, *__i))</span>
<span>                            {</span>
<span>                                <span>// </span><span>如果</span><span> __first </span><span>小于某个</span><span> __i </span><span>指向的元素</span></span>
<span>                                <span>// </span><span>说明这一组不全是相等的元素</span></span>
<span>                                <span>// </span><span>我们的确可以重新划分</span></span>
<span>                                swap(*__i, *__j);</span>
<span>                                ++__n_swaps;</span>
<span>                                ++__i;</span>
<span>                                <span>break</span>;</span>
<span>                            }</span>
<span>                            ++__i;</span>
<span>                        }</span>
<span>                    }</span>
<span><span>                    </span>// [__first, __i) == *__first and *__first &lt; [__j, __last) and __j == __last - 1</span>
<span><span>                    </span>// [__first, __i) == *__first 且 *__first &lt; [__j, __last) 且 __j == __last - 1</span>
<span><span>                    </span>// 这说明第二个区间只有一个数，并且这个数大于第一区间所有的数</span>
<span><span>                    </span>// 如果 __i 指向的和 __j 指向的是同一位置</span>
<span>                    <span>if</span> (__i == __j)</span>
<span>                        <span>// </span><span>那么两个区间可以合在一起，并且是排好序的</span></span>
<span>                        <span>return</span>;</span>
<span></span>
<span><span>                    </span>// 如果第一区间的右端和第二区间的左端不在同一位置</span>
<span>                    <span>while</span> (<span>true</span>)</span>
<span>                    {</span>
<span><span>                        </span>// 将 __i 向后移动，直到 __first 指向的元素的值小于 __i 指向的元素的值</span>
<span>                        <span>while</span> (!__comp(*__first, *__i))</span>
<span>                            ++__i;</span>
<span><span>                        </span>// 将 __j 向前移动，直到 __first 指向的元素的值不再小于 __j 指向的元素的值</span>
<span>                        <span>while</span> (__comp(*__first, *--__j))</span>
<span>                            ;</span>
<span><span>                        </span>// 如果 __i 的位置大于等于 __j 的位置</span>
<span>                        <span>// </span><span>说明两个区间发生了重叠，这意味着</span></span>
<span><span>                        </span>// 第一区间上 __first 所指向的元素的值比某元素的值小</span>
<span><span>                        </span>// 第二区间上某元素的值比 __first 所指向的元素的值小</span>
<span>                        <span>if</span> (__i &gt;= __j)</span>
<span>                            <span>break</span>;</span>
<span>                        <span>// </span><span>若两个区间没有交叉</span></span>
<span><span>                        </span>// 则交换 __i 和 __j 所指向的元素的值</span>
<span>                        swap(*__i, *__j);</span>
<span>                        ++__n_swaps;</span>
<span>                        <span>// </span><span>将</span><span> __i  </span><span>向后移动一位</span></span>
<span>                        ++__i;</span>
<span>                    }</span>
<span><span>                    </span>// [__first, __i) == *__first and *__first &lt; [__i, __last)</span>
<span><span>                    </span>// The first part is sorted, sort the secod part</span>
<span><span>                    </span>// _VSTD::__sort&lt;_Compare&gt;(__i, __last, __comp);</span>
<span>                    <span>// </span><span>最后我们将得到这样的两个区间</span></span>
<span><span>                    </span>// 第一个区间上的元素的值都相等，范围是 [__first, __i)</span>
<span><span>                    </span>// 第二个区间上的元素都有 __first 所指向的元素的值小于第二个区间上的任意元素</span>
<span><span>                    </span>// 第二个区间的范围是[__i, __last)</span>
<span><span>                    </span>// 显然，我们只需要再对第二区间排序就可以了</span>
<span>                    <span>// </span><span>直接重设开头的地址</span></span>
<span>                    __first = __i;</span>
<span>                    <span>// </span><span>然后重新开始</span></span>
<span>                    <span>goto</span> __restart;</span>
<span>                }</span>
<span><span>                </span>// 这里是之前判断是否有 “__first 所指向的元素的值等于 __m 所指向的元素的值, __m 所指向的元素的值小于等于所有其他元素的值” 的地方</span>
<span>                <span>if</span> (__comp(*__j, *__m))</span>
<span>                {</span>
<span><span>                    </span>// 如果有一个元素小于 __m 所指的元素的值的话</span>
<span>                    <span>// </span><span>则不会是那种情况</span></span>
<span>                    swap(*__i, *__j);</span>
<span>                    ++__n_swaps;</span>
<span><span>                    </span><span>break</span><span>;  </span>// found guard for downward moving __j, now use unguarded partition</span>
<span>                }</span>
<span>            }</span>
<span>        }</span>
<span></span>
<span><span>        </span>// It is known that *__i &lt; *__m</span>
<span><span>        </span>// 此时有 __i 所指向的元素的值小于 __m 所指向的元素的值</span>
<span><span>        </span>// __i 的初值是 __first</span>
<span><span>        </span>// __i 向后移动一位</span>
<span>        ++__i;</span>
<span><span>        </span>// j points beyond range to be tested, *__m is known to be &lt;= *__lm1</span>
<span><span>        </span>// __m 所指向的元素的值必有小于等于 __lm1 所指向的元素的值（因为排序）</span>
<span><span>        </span>// if not yet partitioned...</span>
<span><span>        </span>// 如果还没有划分区间</span>
<span>        <span>if</span> (__i &lt; __j)</span>
<span>        {</span>
<span><span>            </span>// known that *(__i - 1) &lt; *__m</span>
<span><span>            </span>// __i 的前一个元素的值小于 __m 所指向的元素的值</span>
<span><span>            </span>// known that __i &lt;= __m</span>
<span><span>            </span>// __i 的位置小于等于 __m 的位置</span>
<span>            <span>while</span> (<span>true</span>)</span>
<span>            {</span>
<span><span>                </span>// __m still guards upward moving __i</span>
<span><span>                </span>// __m 的位置是 __i 移动的上界</span>
<span><span>                </span>// 因为当 __i 移动到 __m 的位置时，此循环条件必不成立</span>
<span><span>                </span>// 让 __i 向后移动，直到某个 __i 所指向的元素的值不再小于 __m 所指向的元素的</span>
<span>                <span>while</span> (__comp(*__i, *__m))</span>
<span>                    ++__i;</span>
<span><span>                </span>// It is now known that a guard exists for downward moving __j</span>
<span><span>                </span>// 移动 __j  时，也有一个下界存在</span>
<span><span>                </span>// 让 __j 向前移动，直到某个 __j 所指向的元素的值小于 __m 所指向的元素的</span>
<span>                <span>while</span> (!__comp(*--__j, *__m))</span>
<span>                    ;</span>
<span><span>                </span>// 如果区间有交叉了，则跳出循环</span>
<span>                <span>if</span> (__i &gt; __j)</span>
<span>                    <span>break</span>;</span>
<span><span>                </span>// 否则交换 __i 和 __j 所指向的元素的值</span>
<span>                swap(*__i, *__j);</span>
<span>                ++__n_swaps;</span>
<span><span>                </span>// It is known that __m != __j</span>
<span><span>                </span>// If __m just moved, follow it</span>
<span><span>                </span>// 如果 __i 移动到了 __m 的位置</span>
<span>                <span>if</span> (__m == __i)</span>
<span>                    <span>// </span><span>重新设置</span><span> __m </span><span>的位置</span></span>
<span>                    __m = __j;</span>
<span>                ++__i;</span>
<span>            }</span>
<span>        }</span>
<span></span>
<span><span>        </span>// [__first, __i) &lt; *__m and *__m &lt;= [__i, __last)</span>
<span>        <span>if</span> (__i != __m &amp;&amp; __comp(*__m, *__i))</span>
<span>        {</span>
<span><span>            </span>// 如果 __i 和 __m 不是在同一个位置</span>
<span><span>            </span>// 且 __m 所指向的元素的值比 __i 所指向的元素的值小</span>
<span><span>            </span>// 那么交换 __i 和 __m 所指向的元素的值</span>
<span>            swap(*__i, *__m);</span>
<span>            ++__n_swaps;</span>
<span>        }</span>
<span></span>
<span><span>        </span>// [__first, __i) &lt; *__i and *__i &lt;= [__i+1, __last)</span>
<span><span>        </span>// If we were given a perfect partition, see if insertion sort is quick...</span>
<span><span>        </span>// 如果我们现在有一个完美的划分，让我们试试插入排序是否够快</span>
<span>        <span>if</span> (__n_swaps == <span>0</span>)</span>
<span>        {</span>
<span><span>            </span>// 如果一直没发生过交换的话</span>
<span><span>            </span>// 试试在 [__first, __i) 上进行不完全（限制插入次数）的插入排序</span>
<span>            <span>bool</span> __fs = <span>_VSTD</span>::__insertion_sort_incomplete&lt;_Compare&gt;(__first, __i, __comp);</span>
<span>            <span>if</span> (<span>_VSTD</span>::__insertion_sort_incomplete&lt;_Compare&gt;(__i+<span>1</span>, __last, __comp))</span>
<span>            {</span>
<span><span>                </span>// 如果在 [__i+1, __last) 上进行不完全插入排序能够很快排好的话</span>
<span>                <span>if</span> (__fs)</span>
<span><span>                    </span>// 如果在 [__first, __i) 上进行不完全插入排序也能够很快排好的话</span>
<span>                    <span>// </span><span>那么就排序完成</span></span>
<span>                    <span>return</span>;</span>
<span>                <span>// </span><span>否则将末尾设置为</span><span> __i</span></span>
<span><span>                </span>// 即再来处理 [__first, __i) 这一段</span>
<span>                __last = __i;</span>
<span>                <span>continue</span>;</span>
<span>            }</span>
<span>            <span>else</span></span>
<span>            {</span>
<span><span>                </span>// 如果在 [__i+1, __last) 上进行不完全插入排序没有很快排好的话</span>
<span><span>                </span>// 即在 [__i+1, __last) 上插入次数达到限制</span>
<span>                <span>if</span> (__fs)</span>
<span>                {</span>
<span><span>                    </span>// 但是在 [__first, __i) 上能够很快排好的话</span>
<span>                    <span>// </span><span>设置排序起点为</span><span> ++__i</span></span>
<span><span>                    </span>// 即再来处理 [__i+1, __last) 这一段</span>
<span>                    __first = ++__i;</span>
<span>                    <span>continue</span>;</span>
<span>                }</span>
<span>            }</span>
<span><span>        </span>// 如果运行到了这里</span>
<span><span>        </span>// 说明 [__first, __i) 和 [__i+1, __last) 都不能很快排好</span>
<span>        }</span>
<span></span>
<span><span>        </span>// sort smaller range with recursive call and larger with tail recursion elimination</span>
<span><span>        </span>// 对小的区间使用递归调用，对大的区间使用尾递归消除</span>
<span>        <span>if</span> (__i - __first &lt; __last - __i)</span>
<span>        {</span>
<span><span>            </span>// 如果前一个区间的元素个数较少</span>
<span><span>            </span>// 递归调用排好前面的区间</span>
<span>            <span>_VSTD</span>::__sort&lt;_Compare&gt;(__first, __i, __comp);</span>
<span><span>            </span>// _VSTD::__sort&lt;_Compare&gt;(__i+1, __last, __comp);</span>
<span><span>            </span>// 外层的 while 循环排序起点改到 __i+1</span>
<span>            __first = ++__i;</span>
<span>        }</span>
<span>        <span>else</span></span>
<span>        {</span>
<span><span>            </span>// 如果后一个区间的元素个数较少</span>
<span><span>            </span>// 递归调用排好后面的区间</span>
<span>            <span>_VSTD</span>::__sort&lt;_Compare&gt;(__i+<span>1</span>, __last, __comp);</span>
<span><span>            </span>// _VSTD::__sort&lt;_Compare&gt;(__first, __i, __comp);</span>
<span><span>            </span>// 外层的 while 循环排序终点改到 __i</span>
<span>            __last = __i;</span>
<span>        }</span>
<span>    }</span>
<span>}</span>
<span></span>
<span>// This forwarder keeps the top call and the recursive calls using the same instantiation, forcing a reference _Compare</span>
<span><span>template</span> &lt;<span>class</span> _RandomAccessIterator, <span>class</span> _Compare&gt;</span>
<span><span>inline</span>_LIBCPP_INLINE_VISIBILITY</span>
<span>void</span>
<span>sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span>
<span>{</span>
<span>#ifdef _LIBCPP_DEBUG</span>
<span>    <span>typedef</span> <span>typename</span> add_lvalue_reference&lt;__debug_less&lt;_Compare&gt; &gt;::type _Comp_ref;</span>
<span>    __debug_less&lt;_Compare&gt; __c(__comp);</span>
<span>    __sort&lt;_Comp_ref&gt;(__first, __last, __c);</span>
<span><span>#else  </span>// _LIBCPP_DEBUG</span>
<span>    <span>typedef</span> <span>typename</span> <span>add_lvalue_reference</span>&lt;_Compare&gt;::type _Comp_ref;</span>
<span>    __sort&lt;<span>_Comp_ref</span>&gt;(__first, __last, __comp);</span>
<span><span>#endif  </span>// _LIBCPP_DEBUG</span>
<span>}</span>
</pre></pre>]]></content>
        
        <summary type="html">
            
            本文是个人对 C++ 标准库里的 std::sort 函数的分析、解读。鉴于个人能力有限，文中若有错误、疏漏还请各位来打我啊多多调指教QAQ 当然，各家编译器的实现可能不同，这里我是用的是 LLVM 的实现。 LLVM &amp;gt; libcxx release 37 &amp;gt; a
            
        </summary>
        
        <category term="Hack Space"/>
        
    </entry>
    
    <entry>
        <title>Jetson TX1的散热风扇问题</title>
        <link href="https://blog.0xbbc.com/2017/01/jetson-tx1-fan-not-working/"/>
        <id>https://blog.0xbbc.com/2017/01/jetson-tx1-fan-not-working/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-01-08T14:35:43+08:00</published>
        <updated>2017-01-08T14:35:43+08:00</updated>
        
        <content type="html"><![CDATA[<p>于是之前在Jetson TX1上玩耍的时候，发现貌似不论温度有多高，散热风扇都不会启动，也许是Nvidia对自己的微型核弹能承受的温度上限很有信心吧，不过为了能让这个微型核弹晚几年再炸，就搞了个监控CPU温度然后自动控制风扇的daemon。</p>
<p>整体思路就是通过读取 <span>/sys/class/thermal/thermal_zone0/temp</span> 判断温度，然后在 <span>/sys/kernel/debug/tegra_fan/target_pwm</span> 写入散热风扇的pwm值。然后本着一切从简的原则，直接用perl写了。</p>
<p><span></span></p>
<p>在perl程序里可以通过修改如下预定义的值来调节到你认为合理的状态</p>
<pre>
<span># Shall we allow the fan to stop</span>
<span># 是否允许散热风扇停止（在温度低于你设定的下界时）</span>
<span><span>use</span> constant <span>fan_can_stop </span>=&gt; 1;</span>
<span></span>
<span># minimal fan pwm value</span>
<span># 散热风扇最小的pwm值</span>
<span># 这个值在我的Jetson TX1上是刚好能感受到有风的值</span>
<span># 如果设定值太小的话，可能风扇无法启动，或者基本上没有任何散热效果</span>
<span><span>use</span> constant <span>min_pwm </span>=&gt; 65;</span>
<span></span>
<span># Stop or minimize the fan if temp is below than thremal_lower_bound</span>
<span># 设定一个温度的下界（正常摄氏度的数值 * 1000），低于这个温度则最小或停止散热风扇</span>
<span><span>use</span><span> constant </span>thremal_lower_bound <span>=&gt; 35000;</span></span>
<span></span>
<span># maxmize the fan speed if temp exceeds</span>
<span># 设定一个温度的上界（正常摄氏度的数值 * 1000），高于这个温度则最大散热风扇的pwm值</span>
<span><span>use</span><span> constant </span>thremal_upper_bound <span>=&gt; 50000;</span></span>
</pre>
<p>脚本放在了 <a href="http://github.com/BlueCocoa/jetson-tx1-fan" target="_blank">BlueCocoa/jetson-tx1-fan</a> 上</p>
<p>在这个脚本中，散热风扇的pwm值与温度\(t\)的关系是</p>
<div>
<pre>
$$\left\{\begin{align}pwm&amp;=0&amp;\text{if allow stop and }t\lt t_{min}\\
pwm&amp;=pwm_{min}&amp;\text{if disallow stop and }t\lt t_{min}\\
pwm&amp;=255&amp;\text{if } t\ge t_{max}\\
pwm&amp;=\frac{255-pwm_{min}}{t_{max} - t_{min}}(t- t_{min})+ pwm_{min}&amp;\text{otherwise}\end{align}\right.
$$
</pre>
</div>
<p>这一计算过程在 line 53 - 59</p>]]></content>
        
        <summary type="html">
            
            于是之前在Jetson TX1上玩耍的时候，发现貌似不论温度有多高，散热风扇都不会启动，也许是Nvidia对自己的微型核弹能承受的温度上限很有信心吧，不过为了能让这个微型核弹晚几年再炸，就搞了个监控CPU温度然后自动控制风扇的daemon。 整体思路就是通过读取 /sys/cl
            
        </summary>
        
        <category term="Hack Space"/>
        
    </entry>
    
    <entry>
        <title>Jetson TX1入手(/ω＼)</title>
        <link href="https://blog.0xbbc.com/2017/01/jetson-tx1-get-daze/"/>
        <id>https://blog.0xbbc.com/2017/01/jetson-tx1-get-daze/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-01-07T14:45:19+08:00</published>
        <updated>2017-01-07T14:45:19+08:00</updated>
        
        <content type="html"><![CDATA[<p>其实在去年12月10来号的时候，就已经决定要入手一个Jetson TX1做开发了，一方面是因为现在使用的MacBook自带的Intel(R) HD Graphics 515性能比较低，当时用waifu2x把一个720P的视频拉到了2560x1440，跑了两周多吧……另一方面是想学习一些并行计算和机器学习的技术。于是就让梅子帮我拿到了一个教育版的Jetson TX1～（我们学校那时还没有教育邮箱，不过现在可以申请啦）</p>
<p>实际拿到Jetson TX1是在12月30号，不过当时刷完系统，装了torch 7之后发现居然就没剩多少了</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/df.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/df.png" /></a>df -h
<p>于是剁了一块SSD（下个月吃土吧_(:_」∠)_）</p>
<p><span></span></p>
<p>Jetson TX1刷系统没什么好说的，按照Nvidia的给的套路走就行，不过国内Jetpack L4T偶尔下载不了某些包（原因想必都懂），这时可以自己在repository.json中找一下对应的包，然后想办法手动下载到jetpack_download里面。比如cuDNN-v5.1.zip这个包，可以用wget下载repository.json中给出的url。然后印象中jetpack_download里会有对应的记录下载信息的文件，在覆盖zip包之后把记录文件删除，然后重新运行Jetpack L4T就可以。（必要时还可以把repository.json、manifest.json、update.lock删掉，之后再辅以重启大法，为什么这么玄学……）</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/cuDNN.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/cuDNN.png" /></a>cuDNN
<p>在终端里ssh到Jetson TX1上，可以看到有一大堆更新可用，那么总之先更新一下再说吧</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/apt.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/apt.png" /></a>apt更新
<p>更新完以后关机接上SSD（Jetson TX1似乎不支持SATA的热插拨）</p>
<p>通过<span>ls /dev/sd*</span>可以看到这块SATA SSD，然后执行</p>
<pre><span>sudo mkfs </span><span>-t ext4 /dev/sda</span>
</pre>
<p>这里我使用的是ext4分区格式，若另有需求则对应更改参数即可。</p>
<p>随后我们就直接编辑/etc/fstab，让Jetson TX1开机时自动挂载这个SSD</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/fstab.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/fstab.png" /></a>/etc/fstab
<p>这里我选择让它（/dev/sda）挂载到 /home/ubuntu/ssd 这个目录下（当然你得先建立这个目录），这个完全是出于个人偏好。随后我们指定了文件系统的类型是 ext4，当然用 auto 让 mount 工具自动检测文件系统类型也不错。然后 option 部分就直接写了 defaults，它等价于 rw,suid,dev,exec,auto,nouser,async。这些 option 的意义可以参看man页面。最后的两个 0 分别代表：让dump utility忽略这个文件系统，不需要fsck utility检查。根据实际需求调整吧。</p>
<p>重启之后可以看到 /dev/sda 的确挂载到了 /home/ubuntu/ssd 这个目录下，不过owner和group都是root，我们把它改为ubuntu就好。</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/ssd.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/ssd.png" /></a>SSD mounted
<p>最后就是比较常用的一些东西，我这里装了 Torch 7 和 OpenCV 3.2。不过 OpenCV contrib 里有一些 module 在 cmake 准备时因为依赖的原因没有开启编译，虽然我已经装上了那些依赖……最后Google了半天也不知道是哪里的问题，总之先编译上了，之后用到的话，再看 OpenCV 官方有没有更新吧_(: 」∠)_</p>
<p>Torch 7基本按照官方的指南安装就可以，不过在编译的过程中可能会出现这样的错误。</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/torch7-simd.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/torch7-simd.png" /></a>Torch 7
<p>这里Torch 7把Jetson TX1的架构认成是x86了，于是需要手动改一下Torch 7目录下的源文件</p>
<pre>
$ <span>vim</span> <span>torch/pkg/torch/lib/TH/generic/simd/simd.h</span>
</pre>
<p>把在92行左右的cpuid函数注释掉</p>
<pre>
<span>/*static inline void cpuid(uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx) {</span>
<span>...</span>
<span>}*/</span>
</pre>
<p>随后把紧跟着cpuid函数后面的函数改为</p>
<pre>
<span>static</span> <span>inline</span> <span>uint32_t</span> detectHostSIMDExtensions()
{
<span>    <span>return</span> SIMDExtension_DEFAULT;</span>
}
</pre>
<p>就可以正常编译了。</p>
<p>这里用<a href="https://github.com/nagadomi/waifu2x" target="_blank">waifu2x</a>测试了一下，比我在MacBook（Intel(R) HD Graphics 515）上处理快太多了。在电脑上一张1280x720大约需要1分钟，在Jetson TX1只需要5、6秒就完成了。</p>
<p><a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/waifu2x.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/waifu2x.png" /></a></p>
<p>对比如下，这里是原图</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/IMG_0127.jpg"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/IMG_0127.jpg" /></a>原图
<p>2倍放大及降噪之后的图</p>
<a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/IMG_0127@2x.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/IMG_0127@2x.png" /></a>经过waifu2x处理后的
<p>于是Jetson TX1上的环境基本上搭好了～</p>]]></content>
        
        <summary type="html">
            
            其实在去年12月10来号的时候，就已经决定要入手一个Jetson TX1做开发了，一方面是因为现在使用的MacBook自带的Intel(R) HD Graphics 515性能比较低，当时用waifu2x把一个720P的视频拉到了2560x1440，跑了两周多吧……另一方面是想
            
        </summary>
        
        <category term="Linux"/>
        
    </entry>
    
    <entry>
        <title>2016年度博客统计报告</title>
        <link href="https://kotori.love/archives/2016-blog-analytics.html"/>
        <id>https://kotori.love/archives/2016-blog-analytics.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2017-01-07T14:29:59+08:00</published>
        <updated>2017-01-07T14:29:59+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>如何快速高效地修 bug？</title>
        <link href="http://blog.lilydjwg.me/posts/208166.html"/>
        <id>http://blog.lilydjwg.me/posts/208166.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2017-01-06T15:54:45+08:00</published>
        <updated>2017-01-06T15:54:45+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	看到知乎上的一个问题，心血来潮，随意写写，请读者不要太较真。</p>
<p>
	看回答，有一些可操作性很强的答案。但是呢，你知道的，考试好不代表能力强，如果你只是学习别人的方法而并不理解，那么学来之后只会是东施效颦而不能融会贯通。所以呢，我也来发表一下自己的见解。</p>
<p>
	首先，你要定位 bug。这时，你需要：</p>
<ol>
	<li>
		注重逻辑性。不要做没有证据的结论。如果你有猜测，就去证实或者否定它。比如某次，同事代码返回的数据有问题，认为是缓存用的 Redis 有问题，返回了错误的数据。然而没人去对此猜测进行求证……我去确认了一下，Redis 收到了请求，并且响应正常。接下来，排除所有其它可能的原因之后，最后剩下的那个就是真相。真相就是，代码里有个 } 的位置放错了，因为它刚好在一屏之后的位置，所以没有人发现……（是 Vim 帮我找到的）</li>
	<li>
		基本的方法论。比如二分法。比如最小化测试用例。如果你要提问，要懂得<a href="http://lilydjwg.vim-cn.com/articles/smart-questions.html">提问的智慧</a>，不管是向搜索引擎还是向人，你都需要提出<a href="http://coolshell.cn/articles/10804.html">正确的问题</a>。</li>
	<li>
		知识面。你写 Web 后端的话，普通的 HTTP 得懂，浏览器的开发者工具得会用。简单的 JavaScript 也有会点儿。简单地说就是，你要精于你自己主攻的部分，然后要熟悉你的上下游。再比如如果你使用 CPython 的话，你要准备一份 CPython 的源码，并且要能够流畅地阅读 C 代码。</li>
	<li>
		工具。工欲善其事，必先利其器。一大堆调试用的工具，你至少得知道它们能干什么，需要的时候能用。比如 strace、lsof、gdb、git bisect，还有高级点的 sysdig、systemtap、perf 等等。当然还有一堆不是专门为调试而设计的通用工具，比如 <a href="https://github.com/ggreer/the_silver_searcher">the silver searcher</a> 或者 <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>。一个快速的全文搜索工具能帮你在最短时间内找到相关的代码或者日志。你不必成为正则表达式大师，但是简单的一定要会，不然面对上千个匹配结果你要怎么办呢？Vim 有一个插件 <a href="http://www.vim.org/scripts/script.php?script_id=2666">Mark</a>，能够同时高亮多个模式，非常利于调试期间阅读代码和日志。投入时间学习使用高效的工具，不要把时间浪费在等待和人工搜索上，也不要让自己忙于琐事而断了灵感和线索。</li>
</ol>
<p>
	最后，不要不断地、毫无目的地换个环境啦，换个版本啦，换个用户啦，这样子找问题。如果这样做很有效的话，大家都去买彩票去了。</p>
<p>
	找到 bug 之后，理解它是如何产生的。当你理解之后才能真正修好它。就像你感冒了吃抗生素，根本没有用。</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   看到知乎上的一个问题，心血来潮，随意写写，请读者不要太较真。     看回答，有一些可操作性很强的答案。但是呢，你知道的，考试好不代表能力强，如果你只是学习别人的方法而并不理解，那么学来之后只会是东施效颦而不能融会贯通。所以呢，我也
            
        </summary>
        
        <category term="编程"/>
        
    </entry>
    
    <entry>
        <title>What&#39;s behind and beyond the congested network</title>
        <link href="https://blog.0xbbc.com/2017/01/whats-behind-and-beyond-the-congested-network/"/>
        <id>https://blog.0xbbc.com/2017/01/whats-behind-and-beyond-the-congested-network/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-01-06T13:23:20+08:00</published>
        <updated>2017-01-06T13:23:20+08:00</updated>
        
        <content type="html"><![CDATA[<p>不知不觉，这次的「Congested Network, Equilibrium Flow, and System Optimal Flow」课程就结束了，这里面的数学上的细节就都在前几篇笔记中（估计还会有两三篇笔记，近期会整理出来），这一篇post大概是在上完这个课程之后的一些想法吧。</p>
<ul>
<li><a href="https://blog.0xbbc.com/2016/12/congested-network-note-1/" target="_blank">Congested network笔记(1)</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/congested-network-note-2/" target="_blank">Congested network笔记(2)</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/congested-network-note-3/" target="_blank">Congested network笔记(3)</a></li>
<li><a href="https://blog.0xbbc.com/2017/01/congested-network-note-4/" target="_blank">Congested network笔记(4)</a></li>
</ul>
<p><span></span></p>
<p>在congsted network背后有许多数学理论作支撑，其中最显而易见的就是博弈论，在所有这些笔记中，我们最为关注的是博弈论中的 Nash 均衡，我们用它来计算一个网络达到均衡时，应该是什么情况，并且根据均衡时计算出的结果，和系统整体最优时的结果相比较，得出一个优化系统的方案，从而对这个系统进行控制，这里面也涉及那么一些控制论的东西。</p>
<p>离开congested network这个范畴，这些数学理论仍在起着作用。</p>
<p>一般来讲，当我们拥有的信息越多，我们对一个系统就越了解，对它的控制力就越强。这也很好地解释了为什么现在几乎是家公司就会想要搞数据挖掘，大数据分析——掌握了自己的顾客的行为，就等于可以提高自己公司的营收。当我们把这些技术应用于好的方面时，我们的生活会因此得到很好的改善。比如现在我们可以通过你的睡眠质量、平时锻炼的情况等分析你的身体健康度，并为你提出合理的运动建议和健康管理方案。</p>
<p>但……如果你的数据流入了不怀好意的人／公司手里，你就暴露在了他们眼中，并且被收集到的数据越多，你就越是容易被他们所「控制」。这类似于保险公司对投保人作调查一样，只不过信息时代里能拿到的关于你的资料更多，若是多企业间合作的话，例如线上支付的公司将你的消费行为出售给保险公司、广告公司时，保险公司若是发现你在不健康的食品上消费多的话，就会认为你有较高的癌症风险，从而提高你的保险费，甚至拒绝你投保。广告公司拿到你的消费行为之后，可以为你提供精准的广告，当你购买了那些产品时，个人行为很有可能有被生产了那些产品的公司所收集……周而复始，我们慢慢地就被数据化了，变成了商业公司里众多可计算对象的一部分。</p>
<p>在现在这个时间点看来，大概不会发展成那个样子，但是个人资料被收集是的的确确发生着的，而且的确有了关于“你”（只要能够唯一标示你就行了，不需要真的知道你是谁）的数据足够多时，这些公司才可能为你提供更好的个性化服务。这样的对不同个体提供的差异化服务也是体现出一个公司水准的一部分。</p>
<p>虽然个人觉得不太可能，但若终有一天变成了那样，那么我们大概会做这样的事来对抗吧。</p>
<div></div>

<blockquote><p><b>Immortals -<a href="http://www.bilibili.com/video/av7104493/" target="_blank">纯黑 「Watch Dogs 2」 游戏录像 OP</a>-</b></p></blockquote>]]></content>
        
        <summary type="html">
            
            不知不觉，这次的「Congested Network, Equilibrium Flow, and System Optimal Flow」课程就结束了，这里面的数学上的细节就都在前几篇笔记中（估计还会有两三篇笔记，近期会整理出来），这一篇post大概是在上完这个课程之后的一些
            
        </summary>
        
        <category term="RANDOM THOUGHTS(´-ω-`)"/>
        
    </entry>
    
    <entry>
        <title>我使用的 Xposed 模块</title>
        <link href="http://blog.lilydjwg.me/posts/208147.html"/>
        <id>http://blog.lilydjwg.me/posts/208147.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2017-01-05T17:45:59+08:00</published>
        <updated>2017-01-05T17:45:59+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	开始使用 Xposed 之后，我对我的手机又多了一份拥有感，然后呢，装的模块越来越多了。以下是我正在使用的模块的列表，以及我为什么使用它们。链接我就懒得放了，想要安装的读者可以自己去 Xposed Installer 里搜。</p>
<p>
	<strong>绿色守护</strong>。装上这个我才敢装各种国产应用。它的 Xposed 模块用于功能增强，最重要的一点是，它可以切断唤醒途径。这样就不会总也杀不死那些耗电又耗流量的应用们了。</p>
<p>
	<strong>去你大爷的内置浏览器</strong>。我发现 Android 6 里，好多 Google 家的应用都开始默认使用内置浏览器了呢……不过国外的应用一般都是可以选择在内置浏览器里打开，还是外部浏览器里打开的。我更喜欢在外置浏览器里打开，一来减少相同的缓存和数据文件，节约存储空间，因为缓存共享而加快加载速度，二来能够使用自己的配置（比如广告拦截），并且能够使用最新的浏览器特性。上次听说了一个很棒的浏览器特性来着，然后就有人告诉我微信里不支持……当然了，微信这种应用，为它的内置浏览器增加了接口，有些网页必须在它里边打开。所以这个模块是有白名单的。</p>
<p>
	<strong>微信防撤回模块</strong>。顾名思义啦。</p>
<p>
	<strong>Android通话振动</strong>。Android 4.0.4 有一个很贴心的功能：在拨出电话接通时，它可以振动一下，告诉用户已经接通了。所以就不用一直把电话放在耳边等着啦，有时候等着等着，因为某些原因呼叫终止了还傻傻地等着……不知道为什么，后来的版本就没有这个功能了。还好我们有 Xposed。这个模块不仅把接通时振动给加回来了，还可以挂断时振动，以及如果对话费敏感的话，可以定时振动。</p>
<p>
	<strong>App Settings</strong>。目前我用来强制QQ轻聊版出现在最近使用的应用列表中。以后还可能需要强制某些中文翻译拙劣的应用使用英文语言。</p>
<p>
	<strong>Battery Stats Plus</strong>。这是一个同名应用带的模块。用于电池使用统计。</p>
<p>
	<strong>Xposed Torch</strong>。不需要解锁屏幕然后点来点去的手电筒。在锁屏状态下长按音量上键就可以启动了，再按一下音量下就关闭了。方便好用～</p>
<p>
	<strong>XPrivacy</strong>。权限管理。也是使用国产应用时必备的功能。虽然 Android 6 里，很多权限都像 iOS 那样在运行的时候询问了。但是呢，流氓总有流氓的手段，你要拒绝授权？那好，一切功能免谈，你卸载我吧。</p>
<p>
	<strong>XuiMod</strong>。我用来让右上角的时间显示秒数的。</p>
<p>
	哇已经装了九个模块了呢。其实我是不希望用这么多 Xposed 模块的，毕竟是打补丁嘛。可是呢，毕竟不是自由软件，只能这样了。也幸好我们还能打补丁。</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   开始使用 Xposed 之后，我对我的手机又多了一份拥有感，然后呢，装的模块越来越多了。以下是我正在使用的模块的列表，以及我为什么使用它们。链接我就懒得放了，想要安装的读者可以自己去 Xposed Installer 里搜。    
            
        </summary>
        
        <category term="Android"/>
        
    </entry>
    
    <entry>
        <title>你的梦想多少钱一斤？</title>
        <link href="http://www.eric21.com/2017/01/03/497"/>
        <id>http://www.eric21.com/2017/01/03/497</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2017-01-03T20:30:08+08:00</published>
        <updated>2017-01-03T20:30:08+08:00</updated>
        
        <content type="html"><![CDATA[<p>要留神你每一个细小的想法，<br />
也许是某天的一个梦，<br />
也许是某天发呆时脑袋里闪过的想法，<br />
像在脑海里埋下的微小的种子，<br />
生根，发芽，<br />
用自己的努力不断把那些残缺部分填满，<br />
不知道哪个念头就会让你开创一片新的天地。</p>]]></content>
        
        <summary type="html">
            
            要留神你每一个细小的想法， 也许是某天的一个梦， 也许是某天发呆时脑袋里闪过的想法， 像在脑海里埋下的微小的种子， 生根，发芽， 用自己的努力不断把那些残缺部分填满， 不知道哪个念头就会让你开创一片新的天地。
            
        </summary>
        
        <category term="日记"/>
        
    </entry>
    
    <entry>
        <title>It&#39;s time to 2017</title>
        <link href="https://blog.0xbbc.com/2017/01/it-is-time-to-2017/"/>
        <id>https://blog.0xbbc.com/2017/01/it-is-time-to-2017/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-01-02T23:33:10+08:00</published>
        <updated>2017-01-02T23:33:10+08:00</updated>
        
        <content type="html"><![CDATA[<pre><span>package<span> main</span></span>
<span>import <span>&quot;fmt&quot;</span></span>

<span><span>func</span> <span>main</span>() {</span>
<span>    go func<span>(msg </span>string<span>) {</span></span>
<span>        fmt.<span>Println(</span>msg)</span>
<span><span>    } (</span>&quot;It's time to 2017&quot;<span>)</span></span>
<span>}</span>
</pre>
<p><span></span></p>
<p>回顾2016，参加了好几个比赛，ASC、Google Code Jam、HACK x FDU。暑假的时候去越南玩了一圈～</p>
<p>这一年里还遇到了好多小伙伴～</p>
<p>于是跨年又是和梅子在游戏中度过的，就这样过去了一年了</p>
<p>我还记得最开始的时候还是用 [2013 <span>release</span>];这样的方式跟过去的一年道别，一转眼现在都快出 Swift 4 了，不过个人也比较少做 iOS / macOS 的程序了。</p>
<p>嘛，与其总是怀念过去，不过着眼于未来吧（≧∇≦）</p>
<p>于是2017年准备做的是数学、CUDA 和 Go 语言。你好，2017！</p>
<p> </p>
<pre><span>#include <span>&lt;stdio.h&gt;
</span></span>
<span><span> __global__ void</span> hello_2017(<span>void</span>) {</span>
<span>    <span>int</span> i = <span>threadIdx</span>.<span>x</span>;</span>
<span><span>    </span><span>printf</span><span>(</span>&quot;Hello 2017 &lt;from thread %d&gt;\n&quot;<span>, i);</span></span>
<span>}
</span>
<span><span>int</span> main(<span>int</span> argc, <span>const</span> <span>char</span> * argv[]) {</span>
<span>    <span>cudaError_t</span> cudaStatus;</span>
<span>    <span>int</span> count = <span>0</span>;</span>
<span>    <span>cudaDeviceProp</span> prop;</span>
<span>    cudaStatus = <span>cudaGetDeviceCount</span>(&amp;count);</span>
<span>    <span>if</span> (cudaStatus == <span>0</span>) {</span>
<span>        <span>for</span> (<span>int</span> i = <span>0</span>; i &lt; count; i++) {</span>
<span>            <span>cudaGetDeviceProperties</span>(&amp;prop,i);</span>
<span>            <span>printf</span>(<span>&quot;%s &lt;%d.%d&gt;\n&quot;</span>, prop.<span>name</span>, prop.<span>major</span>, prop.<span>minor</span>);</span>
<span>            <span>hello_2017</span> &lt;&lt;&lt;<span>1</span>, prop.<span>maxThreadsPerBlock</span>&gt;&gt;&gt; ();</span>
<span>        }</span>
<span>    }</span>
<span>    <span>cudaDeviceReset();</span></span>
<span>    <span>return</span> <span>0</span>;</span>
<span>}</span>
</pre>
<p><a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/Hello-2017.png"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/Hello-2017.png" /></a></p>]]></content>
        
        <summary type="html">
            
            package main  import &amp;quot;fmt&amp;quot;    func main() {      go func(msg string) {          fmt.Println(msg)      } (&amp;quot;It&#39;s time to 2017&amp;
            
        </summary>
        
        <category term="/dev/null"/>
        
    </entry>
    
    <entry>
        <title>Congested network笔记(4)</title>
        <link href="https://blog.0xbbc.com/2017/01/congested-network-note-4/"/>
        <id>https://blog.0xbbc.com/2017/01/congested-network-note-4/</id>
        
        <author>
            <name>0xBBC</name>
        </author>
        
        <published>2017-01-02T21:39:12+08:00</published>
        <updated>2017-01-02T21:39:12+08:00</updated>
        
        <content type="html"><![CDATA[<blockquote><p>第二个谬误的思考方式是在估计和进度安排中使用的工作量单位: 人月。成本的确随开发产品的人数和时间的不同有着很大的变化, 进度却不是如此。因此我认为用人月作为衡量一项工作的规模是一个危险和带有欺骗性的神话。 它暗示着人员数量和时间是可以相互替换的。……从而，添加更多的人手，实际上是延长了而不是缩短了时间。</p>
<p>——人月神话</p>
</blockquote>
<p><span></span></p>
<p>在网络中有一个著名的理论——The Braess Paradox，布雷斯悖论。</p>
<p>布雷斯悖论是指，在特定情况下，当某一网络上增加一条路段时，反而使得每个单位流量的花费增加，最终导致网络整体的花费增加，情况恶化。在开始具体讨论布雷斯悖论之前，先来看看如何计算一个网络的效率，以及这个网络中特定组成部分的重要性。</p>
<p>在<a href="https://supernet.isenberg.umass.edu/articles/nagurney-epl_final.pdf" target="_blank">A network efficiency measure for congested networks</a>这篇paper中，提出了一种新的计算congested network的效率／性能的方法。</p>
<p>$$\varepsilon=\varepsilon(\mathcal{G},d)=\frac{\sum_{w\in \mathcal{W}}\frac{d_w}{\lambda_w}}{n_{\mathcal{W}}}$$</p>
<p>在这个公式里，\(\mathcal{G}\)是一个网络拓扑。<br />
\(\mathcal{W}\)是具有\(n_{\mathcal{W}}\)个元素的源点/终点对(O/D Pair)的集合。<br />
\(d_w\)是源点/终点对\(w\)的需求。<br />
\(\lambda_w\)则是源点/终点对\(w\)在网络平衡时的最小花费。</p>
<p>那么\(\frac{d_w}{\lambda_w}\)则是给定源点/终点对\(w\)中，单位花费能够完成的需求。若花费的计量方式是时间的话，\(\frac{d_w}{\lambda_w}\)可以看作是源点/终点对\(w\)的吞吐量(thoughput)。</p>
<p>\(\frac{\sum_{w\in \mathcal{W}}\frac{d_w}{\lambda_w}}{n_{\mathcal{W}}}\)便是将所有源点/终点对\(w\)的吞吐量加起来，然后平均到每一个源点/终点对\(w\)。</p>
<p>这个应该是比较自然的，比如家里有两台计算机，其中一台需要下载 16 GB 的内容，使用的时间是 1.6 小时，另一台需要下载 64 GB 的内容，使用了 3.2 小时，那么我们有</p>
<p>$$\begin{align}\varepsilon&amp;=\frac{\frac{16}{1.6}+\frac{64}{3.2}}{2}\\<br />
&amp;=\frac{10+20}{2}\\<br />
&amp;=15\,\text{GB/h}\\<br />
&amp;=34.13\,\text{Mbps}\end{align}$$</p>
<p>即平均到每台电脑的吞吐量(thoughput)是 34.13 Mbps，或者说网络的效率是 34.13 Mbps。</p>
<p>在有了网络效率之后，paper 中提出了一种衡量网络组成部分（比如节点、链接）\(g\in \mathcal{G}\)的重要性的方法</p>
<p>$$\begin{align}\mathcal{I}(g)&amp;=\frac{\Delta \varepsilon}{\varepsilon}\\<br />
&amp;=\frac{\varepsilon(\mathcal{G},d)-\varepsilon(\mathcal{G}-g,d)}{\varepsilon(\mathcal{G},d)}\end{align}$$</p>
<p>这个公式的计算思想很简单(simple, not trivial)，\(\mathcal{G}-g\)是去掉\(g\)之后的网络拓扑，然后重新计算网络的效率，和原来的差值记为\(\Delta \varepsilon\)，最后比上原由网络的效率便得到了\(g\)的重要性\(\mathcal{I}(g)\)。因为分式中都是以同一种单位计量的网络效率，那么\(\mathcal{I}(g)\)便是无单位的一个量，并且\(\mathcal{I}(g)\)的值域上界为1。</p>
<p>在定义这个公式，paper中同时也定义了：如果在去掉\(g\)之后，源点/终点对\(w\)之间没有任何路径的话，则为这个源点/终点对\(w\)定义一个抽象的路径，且这条路径的花费为\(\infty\)。</p>
<p>在有了网络效率及网络中组成部分\(g\)重要性的计算方法之后，让我们回到布雷斯悖论的话题上来。假设有如下网络</p>
<p><a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/transport-3.svg" target="_blank"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/transport-3.svg" /></a></p>
<p>现在有一个源点/终点对\(w=(1,4)\)，需求\(d=6\)，给出线段上的花费函数</p>
<p>$$\left\{\begin{align}c_a(f_a)&amp;=10f_a\\<br />
c_b(f_b)&amp;=f_b+50\\<br />
c_c(f_c)&amp;=f_c+50\\<br />
c_d(f_d)&amp;=10f_d\end{align}\right.$$</p>
<p>显然，我们有两条路径\(\mathcal{P}_{1=(a,c)},\mathcal{P}_{2=(b,d)}\)，那么线段上的流量为</p>
<p>$$\left\{\begin{align}f_a&amp;=\mathcal{P}_1\\<br />
f_b&amp;=\mathcal{P}_2\\<br />
f_c&amp;=\mathcal{P}_1\\<br />
f_d&amp;=\mathcal{P}_2\end{align}\right.$$</p>
<p>于是路径上的花费函数为</p>
<p>$$\left\{\begin{align}\mathcal{C}_{p_1}&amp;=c_a+c_c\\<br />
&amp;=10\mathcal{P}_1+\mathcal{P}_1+50\\<br />
&amp;=11\mathcal{P}_1+50\\<br />
\mathcal{C}_{p_2}&amp;=c_b+c_d\\<br />
&amp;=10\mathcal{P}_2+\mathcal{P}_2+50\\<br />
&amp;=11\mathcal{P}_2+50\end{align}\right.$$</p>
<p>求得均衡解\(\mathcal{P}^*\)为</p>
<p>$$\left\{\begin{align}\mathcal{P}^*_1&amp;=3\\<br />
\mathcal{P}^*_2&amp;=3\end{align}\right.$$</p>
<p>此时的花费\(\mathcal{C}_{p^*_1}=\mathcal{C}_{p^*_2}=83\)</p>
<p>看起来非常符合直觉，两条路径的花费本质上是相同的，于是聪明的人们就分别走两条路径了。如果再在节点 2 和节点 3 之间加一条路的话，会不会更好呢？于是我们得到了下图</p>
<p><a href="https://blog.0xbbc.com/wp-content/uploads/2017/01/transport-4.svg" target="_blank"><img src="https://blog.0xbbc.com/wp-content/uploads/2017/01/transport-4.svg" /></a></p>
<p>并且知道了线段 e （也就是我们新增加的那条）的花费函数是</p>
<p>$$c_e=f_e+10$$</p>
<p>此时我们就有三条路可以走了</p>
<p>$$\left\{\begin{align}&amp;\mathcal{P}_{1=(a,c)}\\<br />
&amp;\mathcal{P}_{2=(a,e,d)}\\<br />
&amp;\mathcal{P}_{3=(b,d)}\end{align}\right.$$</p>
<p>此时各线段上的流量为</p>
<p>$$\left\{\begin{align}f_a&amp;=\mathcal{P}_1+\mathcal{P}_2\\<br />
f_b&amp;=\mathcal{P}_3\\<br />
f_c&amp;=\mathcal{P}_1\\<br />
f_d&amp;=\mathcal{P}_2+\mathcal{P}_3\\<br />
f_e&amp;=\mathcal{P}_2\end{align}\right.$$</p>
<p>以及路径上的花费函数为</p>
<div>
<pre>
$$\left\{\begin{align}\mathcal{C}_{p_1}&amp;=c_a+c_c\\
&amp;=10(\mathcal{P}_1+\mathcal{P}_2)+(\mathcal{P}_1+50)\\
&amp;=11\mathcal{P}_1+10\mathcal{P}_2+50\\
\mathcal{C}_{p_2}&amp;=c_a+c_e+c_d\\
&amp;=10(\mathcal{P}_1+\mathcal{P}_2)+(\mathcal{P}_2+10)+10(\mathcal{P}_2+\mathcal{P}_3)\\
&amp;=10\mathcal{P}_1+21\mathcal{P}_2+10\mathcal{P}_3+10\\
\mathcal{C}_{p_3}&amp;=c_b+c_d\\
&amp;=(\mathcal{P}_3+50)+10(\mathcal{P}_2+\mathcal{P}_3)\\
&amp;=11\mathcal{P}_3+\mathcal{P}_2+50\end{align}\right.$$
</pre>
</div>
<p>这个时候求均衡解\(\mathcal{P}^*\)的方程是</p>
<p>$$\left\{\begin{align}11\mathcal{P}^*_1+10\mathcal{P}^*_2+50&amp;=\lambda\\<br />
10\mathcal{P}^*_1+21\mathcal{P}^*_2+10\mathcal{P}_3+10&amp;=\lambda\\<br />
11\mathcal{P}^*_3+\mathcal{P}^*_2+50&amp;=\lambda\\<br />
\mathcal{P}^*_1+\mathcal{P}^*_2+\mathcal{P}^*_3&amp;=6\\<br />
\mathcal{P}^*_1,\mathcal{P}^*_2,\mathcal{P}^*_3&amp;\ge 0\end{align}\right.$$</p>
<p>求解可得</p>
<p>$$\left\{\begin{align}\mathcal{P}^*_1&amp;=2\\<br />
\mathcal{P}^*_2&amp;=2\\<br />
\mathcal{P}^*_3&amp;=2\\<br />
\lambda&amp;=92\end{align}\right.$$</p>
<p>(\lambda=92\)！这意味着我们多修了一条路实际上使得每个用户的花费增加了，而不是减少了。而这就是布雷斯悖论。</p>
<p>如果我们计算此时各线段的重要性\(\mathcal{I}\)的话，会有</p>
<p>$$\left\{\begin{align}\mathcal{I}(a)&amp;=\frac{6}{29}&amp;=0.206\\<br />
\mathcal{I}(b)&amp;=\frac{121}{673}&amp;=0.179\\<br />
\mathcal{I}(c)&amp;=\frac{121}{673}&amp;=0.179\\<br />
\mathcal{I}(d)&amp;=\frac{6}{29}&amp;=0.206\\<br />
\mathcal{I}(e)&amp;=\frac{-9}{83}&amp;=-0.108\end{align}\right.$$</p>
<p>可以看到线段\(e\)的重要性\(\mathcal{I}(e)\)是个负值！这说明线段\(e\)在这种情况下根本就不该参与到这个系统中来。</p>
<p>于是这在实际的应用中的话，可以作为是否要修建新的公路的参考，或者计算机中是否要添加新的通信线路的参考。当然也可以作为部分我们总是觉得现实中越修路反而越堵的原因。</p>
<p>最后，对于刚才使用到的例子，实际上在需求\(d\)取不同的值的时候，布雷斯悖论不一定出现。在原paper中给出的范围如下（均衡状态时）</p>
<p>当\(d\in[0, 2\frac{18}{31})\)时，只有\(\mathcal{P}_{2=(a,e,d)}\)会被使用，此时布雷斯悖论没有出现。</p>
<p>当\(d\in[2\frac{18}{31}, 3\frac{7}{11}]\)时，也只有\(\mathcal{P}_{2=(a,e,d)}\)会被使用，但此时出现了布雷斯悖论。</p>
<p>当\(d\in(3\frac{7}{11}, 8\frac{8}{9}]\)时，三条线路都有被使用，同时也存在出现了布雷斯悖论，我们计算的\(d=6\)就是这种情况。</p>
<p>当\(d\in(8\frac{8}{9}, +\infty)\)时，只有\(\mathcal{P}_{1=(a,c)}, \mathcal{P}_{2=(b,d)}\)会被使用，布雷斯悖论消失了。</p>
<p>其实布雷斯悖论应用在计算机中可能更好理解，或者会是一件自然而然的事，比如我有一个超算节点，我的作业可以在 1 分钟内完成，当我增加一个节点协同计算时，对于某些类型的作业可能反而增加了运行时间。例如那些数据量比较大的作业，在节点间传输也有着不小的开销。但是当数据量达到一定程度之后，就又会增加整体的效率。</p>]]></content>
        
        <summary type="html">
            
            第二个谬误的思考方式是在估计和进度安排中使用的工作量单位: 人月。成本的确随开发产品的人数和时间的不同有着很大的变化, 进度却不是如此。因此我认为用人月作为衡量一项工作的规模是一个危险和带有欺骗性的神话。 它暗示着人员数量和时间是可以相互替换的。……从而，添加更多的人手，实际上
            
        </summary>
        
        <category term="Mathematics"/>
        
    </entry>
    
    <entry>
        <title>在 Android 上运行 sshd</title>
        <link href="http://blog.lilydjwg.me/posts/208100.html"/>
        <id>http://blog.lilydjwg.me/posts/208100.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2017-01-02T20:52:22+08:00</published>
        <updated>2017-01-02T20:52:22+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	新的 Z5C 到手。拿 root 装软件。然后发现一个很重要的事情：我之前在 Z3C + Android 4.4.4 上用得好好的 <a href="https://play.google.com/store/apps/details?hl=iw&amp;id=web.oss.sshsftpDaemon">Rooted SSH/SFTP Daemon</a>，在登录的时候报了这么个错：</p>
<pre>
CANNOT LINK EXECUTABLE: &quot;/system/lib/libc++.so&quot; is 32-bit instead of 64-bit
page record for 0xXXXXXXXXXX was not found (block_size=32)
</pre>
<p>
	网上搜了一下，<a href="http://hex.ro/wp/blog/droidsshd-dropbear-0-52-on-cyanogenmod-13-0/">解决方法</a>是有的，要重新编译 dropbear。可我之前研究过，我这软件使用的 dropbear 是一个<a href="https://code.google.com/archive/p/droidsshd/">修改版</a>，和我用的这个 app 一样，好久没更新了……</p>
<p>
	于是想找个新的 sshd。之前我是使用的 <a href="https://play.google.com/store/apps/details?id=berserker.android.apps.sshdroid">SSHDroid</a>。后来它需要付费版才能使用密钥认证了……而我的要求就两点：可以以 root 身份登录，并且支持密钥认证。在 Play 商店里能找到的 sshd 我都试过了一遍，竟然没一个能满足这么基本的需求的…………</p>
<p>
	之所以需要以 root 身份登录，而不是登录之后再获取 root，是因为跑命令时 su 之后很容易出现奇怪的问题，和缓冲、终端控制有关。</p>
<p>
	于是我只好失望地放弃使用 app，转到自己熟悉的领域——Linux 系统，编译一个 sshd adb 进去跑好了。</p>
<p>
	一开始使用的是 socat + <a href="https://github.com/janmojzis/tinyssh">tinyssh</a> 的方案。这个方案我之前在光猫上实现过，tinyssh 的代码很少，很容易编译和修改。socat 直接用<a href="http://blog.lilydjwg.me/2013/4/30/some-networking-command-line-tools-for-android-platform.39085.html">之前编译的版本</a>就可以了。因为 Android 毕竟不是完整的 Linux userland，所以得把 tinyssh 改一改，主要是用户主目录和默认 shell 的部分。我就直接硬编码进 root 的配置了。然后写个 shell 脚本来启动：</p>
<pre>
#!/system/bin/sh

export ANDROID_ROOT=/system ANDROID_DATA=/data
PATH=/system/xbin:/su/xbin:/su/bin:/sbin:/vendor/bin:/system/sbin:/system/bin
socat tcp-l:PORT,reuseaddr,fork exec:'tinysshd /data/tinyssh/keydir' &amp;
</pre>
<p>
	这样就可以了。只支持 Ed25519 密钥登录，挺好的。</p>
<p>
	然而，用着用着就发现有点小问题：socat 对经由网络的数据进行转发，有点低效；tinyssh 不支持连接复用，在一个会话中收到新的连接请求时会直接退出；还没有 scp 命令……</p>
<p>
	一开始我去 dropbear 那边编译了一个 scp。编辑好配置文件、开始 make 的时候，敲「make PROGRAMS=scp」就可以编译出一个 scp 命令了。然后我就想，既然都用上 dropbear 了，要不就都用了吧。于是把 dropbear 也编译出来了。不是很顺利，主要是以下几个事：</p>
<ul>
	<li>
		改路径。各种路径，host key 的，pid 文件的，默认 PATH，还要禁用掉 lastlog 和 syslog 什么的</li>
	<li>
		改用户信息。默认 shell、主目录。不要检查 /etc/shells。刚刚发现我还不小心把其中两行代码交换了，是说怎么退出的时候会段错误呢 _(:з」∠)_</li>
	<li>
		dropbear 的构建系统不支持 out-of-tree 构建，也就是不能像我习惯的那样，「mkdir build-android」然后进去「../configure」 :-(</li>
</ul>
<p>
	另外就是，dropbear 不支持 Ed25519 key，于是我只好用 RSA key 了（DSS 有问题；openssh 的 ECDSA 实现也有问题） :-(</p>
<p>
	弄好之后同样写个 shell 脚本方便调用：</p>
<pre>
#!/system/bin/sh

export ANDROID_ROOT=/system ANDROID_DATA=/data
/system/xbin/dropbear -R -p PORT
</pre>
<p>
	然后，启动服务的事情。我发现改 /init.rc 不管用。这个是 initramfs，每次重启之后就恢复原状了……我懒得去重新打 initamfs 的包了，就每次重启系统之后接上 USB 线，然后 adb shell 进去跑脚本……还好 Z5C 跟 Z3C 不一样，USB 口在外边，很好插。</p>
<p>
	终于把 remote root shell 弄好了，接下来就是各种 rsync 和 scp 传文件改配置什么的了，一是复制各种软件的配置文件和数据，二是备份，三是把文件拿电脑上研究、编辑，方便啊！Sony 有个「换机助手」软件，但是它不能在加密了的手机上使用……</p>
<p>
	最后，还留下了一个问题：同样的环境，同样是 Wi-Fi 传输，我的电脑和 Z3C 之间传输速度能达到 4MiB/s，但是 Z5C 却只有 300KiB/s 左右的样子……</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   新的 Z5C 到手。拿 root 装软件。然后发现一个很重要的事情：我之前在 Z3C + Android 4.4.4 上用得好好的 Rooted SSH/SFTP Daemon，在登录的时候报了这么个错：    CANNOT LIN
            
        </summary>
        
        <category term="Android"/>
        
    </entry>
    
    <entry>
        <title>听，那些过去的和即将到来的</title>
        <link href="https://wind.moe/article/58"/>
        <id>https://wind.moe/article/58</id>
        
        <published>2017-01-01T23:47:49+08:00</published>
        <updated>2017-01-01T23:47:49+08:00</updated>
        
        <content type="html"><![CDATA[<p>新年快乐（题图pixiv id=60561552），这篇文章敲到一半，整个2016年便已翻了过去，想到什么就写点什么，称不上是一份总结，就当做是情感的宣泄吧。</p>
<p>脑中快速闪过了一年来的些许画面，好像是顺其自然般，年初定下的目标也实现了不过一半（反正原博我已经删了哈哈哈哈</p>
<p>年初受大佬们的影响接触到了Haskell，起先我并不觉得这门语言有吸引我的地方，纯函数，复杂严谨的类型系统，没有变量(let不算)，对于习惯了Pascal/C/Python等语言的写法，变量对我仿佛是不可或缺的，更别说循环这种方式了，但是随着不经意间看见Haskell在解题时，短小精悍的代码令人着迷，而后又知晓xmonad是基于Haskell的，开始觉得这或许是一门拥有无限可能的语言，因而九月的时候韩东老师的新书 魔力Haskell 也在第一时间购得一本，加上在线阅读的Real World Haskell，收获颇丰。</p>
<p>不知不觉加入实验室也两年有余，也愈觉得自己不适合走上算法的这条路，于是放弃了进入集训队的机会。不由想起大佬们自黑的那句话“组合数学靠运气，计算几何瞎暴力，图论一顿套模板，数论只会GCD。DP一般看规律，此生无缘见AC”完全是我的真实写照好吗Orz，因此在六月下旬的蓝桥杯<del>（北大两日游）</del>结束拿到学分后，便结束了自己的算法之路，只是偶尔在收到Codeforces的提示邮件时去鱼塘刷两道题，或去<a href="https://projecteuler.net/archives">Project Euler</a>看看一些惊艳的解法。</p>
<p>15年中unpack的关闭让许多同好为之扼腕，十分感谢它带领我入门脱壳破解，虽然一直属于堪堪会用工具玩玩的水平，而16年中乌云的关站（暂且这么说罢）也是意想不到，现在能接触到的优秀信息源也越来越少了，国内就上上看雪，FreeBuf，或者是52pojie，国外的源就订阅了Hacker News，McAfee Blogs，We Live Security几个站点，总感觉比小时候去书店等黑客X档案到货少了点那种发现新大陆的感觉。</p>
<p>在年底入手了Yubikey，因而更换了PGP密钥，可以在 <a href="https://pgp.mit.edu/pks/lookup?op=get&amp;search=0xEB61443600E3F7EE">pgp.mit.edu</a> 处获取，原来的将在数星期内吊销。</p>
<p>也要感谢小字辈的大家和许许多多指点过我前行的大牛们，我收获了许多，在团队项目中正规的协作开发，接触到了软件开发的基本流程，认识到了各种黑科技来提升工作效率，了解到宣传推广一款软件的难点，也举办了心仪的技术沙龙，这是在课堂上永远学不到的宝贵财富。</p>
<hr />
<p>几个新一年的小目标</p>
<ul>
<li>从头复习一遍基础算法</li>
<li>了解近世代数和范畴论</li>
<li>粗读一遍PFDS（Purely Functional Data Structures）和SICP（Structure and Interpretation of Computer Programs）</li>
<li>通过学校图书馆的数据库阅读一些较新的FP，ML方面的论文</li>
<li>预定在暑假去<del>西藏</del>四川走一圈</li>
</ul>
<p>就用晦庵先生的一句结尾——如今白黑浑休问，且作人间时世妆。</p>
<p>愿你也被这世界温柔以待。安好，2017。</p>
<p>完。</p>
]]></content>
        
        <summary type="html">
            
            新年快乐（题图pixiv id=60561552），这篇文章敲到一半，整个2016年便已翻了过去，想到什么就写点什么，称不上是一份总结，就当做是情感的宣泄吧。 脑中快速闪过了一年来的些许画面，好像是顺其自然般，年初定下的目标也实现了不过一半（反正原博我已经删了哈哈哈哈 年初受大
            
        </summary>
        
    </entry>
    
    <entry>
        <title>Yubikey 4 使用探索</title>
        <link href="https://wind.moe/article/57"/>
        <id>https://wind.moe/article/57</id>
        
        <published>2016-12-25T00:20:51+08:00</published>
        <updated>2016-12-25T00:20:51+08:00</updated>
        
        <content type="html"><![CDATA[<p>平安夜舍友都出去浪了，只有我这种单身汪孤零零的在宿舍写着博客 （′_&gt;′ )</p>
<p>心痒Yubikey很久了，恰逢黑五活动，想着能多出个赠品进行容灾备份，走的顺丰转运到今天正好一个月到手，参照匮乏的资料在Arch上面试了一些功能。</p>
<p><img /></p>
<p><strong>安装基础包</strong></p>
<p>先安装相关程序，同时下载GUI方便进行配置</p>
<pre><code>sudo pacman -S yubikey-personalization yubikey-personalization-gui
</code></pre>
<p>同时打开所有功能</p>
<pre><code>ykpersonalize -m86
</code></pre>
<p><strong>U2F</strong></p>
<p>目前还是只有 Chrome 浏览器实现了 U2F 的完全支持，操作系统方面倒是基本都或多或少兼容了，先写系统方面的认证，这里参考<a href="https://github.com/Yubico/pam-u2f">官方说明</a></p>
<p>Linux PAM( Pluggable Authentication Modules ) 提供了一个框架，用于进行系统级的用户认证，来自arch wiki的介绍，于是先安装AUR里的包</p>
<pre><code>yaourt pam_u2f
</code></pre>
<p>然后注册一下用户</p>
<pre><code>pamu2fcfg -u username
</code></pre>
<p>这时光标会下移一行，同时Yubikey的灯开始闪烁，触摸一下，终端就会输出一行代码如下</p>
<pre><code>&lt;username&gt;:&lt;KeyHandle1&gt;,&lt;UserKey1&gt;
</code></pre>
<p>接着使用当前用户 touch 一个 ~/.config/Yubico/u2f_keys，在里面填上上面出现的代码，然后修改所需的PAM服务，在 /etc/pam.d 文件夹下，比如我修改了 sudo(sudo) 和 gdm(gdm-password) 的服务，在文件开头填上如下一句</p>
<pre><code>auth sufficient pam_u2f.so
</code></pre>
<p>这时可以切到终端，随便执行一下sudo命令，便可以看到yubikey有规则的闪烁，轻触一下就执行了sudo指令。</p>
<p>Windows 上的认证倒是纯gui随手可实现，不过由于需要改为本地用户，我就不尝试了。</p>
<p><strong>TOTP</strong></p>
<p>这是我比较关心的一个功能，之前使用 Google Authenticator 来协助二次验证，但偶尔刷下机什么的备份起来就很麻烦，于是回到了洋葱的云备份，但是把 TOTP 的密钥放在别人手里始终有一种不安，尤其是在天朝公司手里，所以存在 Yubikey 里是一种相对安心的选择，但是切记 做好容灾备份！</p>
<p>OTP的客户图形端可在<a href="https://www.yubico.com/support/knowledge-base/categories/articles/yubico-authenticator-download/">官网</a>下载，Arch 可以在 AUR 直接下</p>
<pre><code>yaourt yubico-yubioath-desktop
</code></pre>
<p>然后按照提示一步步来，不过生成的桌面程序我是打不开。。。在这个<a href="https://github.com/Yubico/yubioath-desktop/issues/78">issues</a>里找到了答案，可以通过安装启用acsccid来解决问题</p>
<pre><code>yaourt -S aur/acsccid
sudo systemctl enable pcscd.service
sudo systemctl start pcscd.service 
sudo systemctl status pcscd.service
</code></pre>
<p>接着用GUI界面来配置，执行 <code>yubioath gui</code>，可以看到如下窗口</p>
<p><img /></p>
<p>在 File 里可以看到三个选项 Add | Set/Change Password | Setting，选择 Add 添加</p>
<p><img /></p>
<p>这里有个很方便的功能就是 'Scan a QR Code'，可以快速识别屏幕上的二维码，不过很遗憾，在我的 Gnome 上并没有生效，不过手动添加也是一样，手动识别二维码填入Secret Key即可，下面还有个‘Require touch’功能，有字面意思就可知道需要触摸 Yubikey 才会显示密码。</p>
<p>另外如果不选择‘Require touch’的话，可以通过直接在终端输入<code>yubioath</code>来查看二次验证码（如有菊苣知道能在终端查看第二行的话请务必告知 Orz
<code>
chiaki in ~ λ yubioath
Chiaki:i@wind.moe      341153
Chiaki:wind.moe    [Touch credential]
</code></p>
<p>这篇文章还在草稿的时候差点就把Yubikey丢了。。。剩下的功能琢磨透了再来记录吧</p>
<p>引用：<br />
<a href="https://www.yubico.com/support/knowledge-base/categories/guides/">Yubico Documenatation</a><br />
<a href="https://github.com/Yubico/pam-u2f">PAM-U2F</a><br />
<a href="https://bigeagle.me/2016/02/yubikey-4/">YubiKey 4 简介与配置</a><br /><br /><br /></p>]]></content>
        
        <summary type="html">
            
            平安夜舍友都出去浪了，只有我这种单身汪孤零零的在宿舍写着博客 （′_&amp;gt;′ ) 心痒Yubikey很久了，恰逢黑五活动，想着能多出个赠品进行容灾备份，走的顺丰转运到今天正好一个月到手，参照匮乏的资料在Arch上面试了一些功能。  安装基础包 先安装相关程序，同时下载GUI方
            
        </summary>
        
    </entry>
    
    <entry>
        <title>「数论篇」矩阵快速幂</title>
        <link href="https://wind.moe/article/56"/>
        <id>https://wind.moe/article/56</id>
        
        <published>2016-12-24T01:41:21+08:00</published>
        <updated>2016-12-24T01:41:21+08:00</updated>
        
        <content type="html"><![CDATA[<p>荒废了好久的算法，写几篇关于算法的复习笔记找找手感，在测试 Mathjax 的矩阵时有感而发，便写写矩阵快速幂吧。</p>

<p>幂运算即指数运算，用于表示某数自乘数次，因此易得最基本计算的方法复杂度为 O(N),</p>

<p>快速幂全称快速幂取模，可以在 O(log₂N) 得出结果，用于快速计算某个数的n次幂，此处的n一般很大而导致 O(N) 复杂度超时，而且题目通常会给出一个额外要求使结果对数k取模。</p>



<p>原理用二进制相对较好理解，十进制的 10 转为二进制是 1010，即可以写作$ 10 = 2^3 + 2^1 $，先将n当前末位进行按位与运算 n&amp;1，可以得出n是否为奇数，当 n &amp; 1 为 true 时，就要给当前的结果乘上 a，n &gt;&gt;= 1 则是右移一位，因为当前末位已经无用了，等效于 n /= 2，综合起来就是当 n 可以被2整除时， 用二分的思想转化为 a = a * a，n /= 2，若某一步的 n 不能被2整除，此时 a *=2 便不能计入结果，要给当前结果单独乘上一个 a，待到之后能整除再将此时的a算入，这样便将复杂度巧妙地降到了 O(log₂N) 。</p>

<pre><code>int pow(int a, int n, int k) {
  int res = 1;
  while (n) {
    if (n &amp; 1)
      res = (res * a) % k;
    n &gt;&gt;= 1;
    a = (a * a) % k;
  }
  return res;
}
</code></pre>

<p>易推得朴素算法求矩阵相乘的复杂度为 O(N³)，既然要求幂，那么自然可以考虑能否由整数的快速幂来进行相似的加速，先构造一个矩阵，同时重载运算符减少之后的工作量。</p>

<pre><code>struct Matrix {
  int n;
  int num[MAX][MAX];
  Matrix operator*(Matrix &amp;a) {
    Matrix res;
    res.n = n;
    for (int i = 1; i &lt;= n; i++)
      for (int j = 1; j &lt;= n; j++) {
        res.num[i][j] = 0;
        for (int k = 1; k &lt;= n; k++)
          res.num[i][j] = (res.num[i][j] + num[i][k] * a.num[k][j]) % MOD;
      }
    return res;
  }
};
</code></pre>

<p>模仿上面的快速幂，只不过这里要把结果矩阵初始化为一个单位矩阵，学过线性代数的都知道单位矩阵 $ E $与任何矩阵相乘，结果不改变，那么就等效于整数快速幂中的初始值 1。.</p>

<pre><code>Matrix pow(Matrix &amp;A, int n) {
  Matrix res;
  res.n = A.n;
  for (int i = 1; i &lt;= A.n; i++)
    for (int j = 1; j &lt;= A.n; j++)
      res.num[i][j] = (i == j) ? 1 : 0;

  while (n) {
    if (n &amp; 1)
      res = (res * A);
    n &gt;&gt;= 1;
    A = A * A;
  }
  return res;
}
</code></pre>

<p>这样，就实现了一个最简单的矩阵快速幂算法。</p>

<p>部分题解</p>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1575">HDU 1575</a></p>

<pre><code>#include &lt;cstdio&gt;
#define MAX 100
#define MOD 9973

struct Matrix {
  int n;
  int num[MAX][MAX];
  Matrix operator*(Matrix &amp;a) {
    Matrix res;
    res.n = n;
    for (int i = 1; i &lt;= n; i++)
      for (int j = 1; j &lt;= n; j++) {
        res.num[i][j] = 0;
        for (int k = 1; k &lt;= n; k++)
          res.num[i][j] = (res.num[i][j] + num[i][k] * a.num[k][j]) % MOD;
      }
    return res;
  }
};

Matrix pow(Matrix &amp;A, int n) {
  Matrix res;
  res.n = A.n;
  for (int i = 1; i &lt;= A.n; i++)
    for (int j = 1; j &lt;= A.n; j++)
      res.num[i][j] = (i == j) ? 1 : 0;

  while (n) {
    if (n &amp; 1)
      res = (res * A);
    n &gt;&gt;= 1;
    A = A * A;
  }
  return res;
}

int main(int argc, char const *argv[]) {
  Matrix a;
  int t, m;
  scanf(&quot;%d\n&quot;, &amp;t);
  while (t--) {
    scanf(&quot;%d %d\n&quot;, &amp;a.n, &amp;m);
    for (int i = 1; i &lt;= a.n; i++) {
      for (int j = 1; j &lt;= a.n; j++) {
        scanf(&quot;%d&quot;, &amp;a.num[i][j]);
      }
    }
    Matrix r = pow(a, m);
    int sum = 0;
    for (int i = 1; i &lt;= a.n; i++) {
      sum += r.num[i][i];
    }
    sum %= MOD;
    printf(&quot;%d\n&quot;, sum);
  }
  return 0;
}

</code></pre>]]></content>
        
        <summary type="html">
            
            荒废了好久的算法，写几篇关于算法的复习笔记找找手感，在测试 Mathjax 的矩阵时有感而发，便写写矩阵快速幂吧。  幂运算即指数运算，用于表示某数自乘数次，因此易得最基本计算的方法复杂度为 O(N),  快速幂全称快速幂取模，可以在 O(log₂N) 得出结果，用于快速计算某
            
        </summary>
        
    </entry>
    
    <entry>
        <title>webp真的好吗？（上）</title>
        <link href="https://www.261day.com/webp%e7%9c%9f%e7%9a%84%e5%a5%bd%e5%90%97%ef%bc%9f%ef%bc%88%e4%b8%8a%ef%bc%89/"/>
        <id>https://www.261day.com/webp%e7%9c%9f%e7%9a%84%e5%a5%bd%e5%90%97%ef%bc%9f%ef%bc%88%e4%b8%8a%ef%bc%89/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2016-12-23T23:25:17+08:00</published>
        <updated>2016-12-23T23:25:17+08:00</updated>
        
        <content type="html"><![CDATA[<p>我原本是不想要起这么一个标题党的标题。但是很不幸，我的实验结果是：<strong>webp在一些情况下并不好，甚至不如JPEG</strong></p>
<p>事情的起因是这样的：某位自称拥有钛合金狗眼的同学表示他看webp觉得颜色过度特别僵硬，觉得webp会丢失颜色。我凭借着很多年与天斗与地斗与人斗的经验表示，这不可能，因为webp的变换和JPEG的变换基本没有差别，都是先转换颜色空间，然后离散余弦变换变换到频域，之后编码。由于WebP使用了压缩编码器，所以WebP的结果应该更好。于是我就随手写了这些脚本</p>
<p>run.sh</p><pre>rm -rf out
mkdir out
cp src.tiff out/
./towebp.sh
./tojpg.sh
./tobmp.sh
rm -f out/src.tiff
convert src.tiff src.png
cwebp src.tiff -lossless -alpha_cleanup -o src.webp</pre><p>tojpg.sh</p><pre>cd out
for((i=0;i&lt;101;i++));
do
convert -quality $i src.tiff out_$i.jpg &gt; /dev/null &amp; 
done
wait
cd ..</pre><p>towebp.sh</p><pre>cd out
for((i=0;i&lt;101;i++));
do
    cwebp -q $i src.tiff -o out_$i.webp &gt;/dev/null &amp;
done
wait
cd ..</pre><p>因为我要统计信噪比所以我需要吧webp格式再转换成无损的格式，我就选择了bmp格式</p><pre>find ./out -name &quot;out_*.webp&quot;| parallel  convert {} {}.bmp &gt; /dev/null</pre><p>下面就来正文了，我们要统计信息的信噪比了。于是我写了一段简单的MATLAB脚本</p><pre>src = imread('src.tiff');
src = src(:,:,1:3);

size_jpg = zeros(1,101);
size_webp = zeros(1,101);

snr_jpg = zeros(1,101);
snr_webp = zeros(1,101);

for i=1:100
    path_jpg = ['./out/out_' num2str(i) '.jpg'];
    path_webp = ['./out/out_' num2str(i) '.webp.bmp'];
    path_webp_src = ['./out/out_' num2str(i) '.webp'];
    
    jpg = imread(path_jpg);
    webp = imread(path_webp);
    
    info_jpg = dir(path_jpg);
    info_webp = dir(path_webp_src);
    
    size_jpg(i+1) = info_jpg.bytes;
    size_webp(i+1) = info_webp.bytes;
    
    snr_jpg(i+1) = psnr(jpg,src);
    snr_webp(i+1) = psnr(webp,src);
end

%% figure

figure;
hold on;
title('Size(byte)-SNR');
plot(size_jpg,snr_jpg);
plot(size_webp,snr_webp);
legend('jpg','webp');
grid on;
hold off;

figure;
hold on;
title('Compress Level(%)-SNR');
plot(snr_jpg(2:end));
plot(snr_webp(2:end));
legend('jpg','webp');
grid on;
hold off;</pre><p>嗯，代码都放到这里了，只要准备一张测试用的tiff格式的图片就可以开始测试了。由于进行了大量的转码，这个测试相当的耗费硬盘CPU。这里做了比较多的并行优化，笔记本的话还是别跑了。</p>
<p>今天已经很晚了，测试结果明天更新，到时候就会知道为什么有的时候WebP不如JPEG了</p>]]></content>
        
        <summary type="html">
            
            我原本是不想要起这么一个标题党的标题。但是很不幸，我的实验结果是：webp在一些情况下并不好，甚至不如JPEG 事情的起因是这样的：某位自称拥有钛合金狗眼的同学表示他看webp觉得颜色过度特别僵硬，觉得webp会丢失颜色。我凭借着很多年与天斗与地斗与人斗的经验表示，这不可能，因
            
        </summary>
        
        <category term="原创"/>
        
        <category term="多媒体技术"/>
        
    </entry>
    
    <entry>
        <title>利用 systemd 的 watchdog 功能重启卡住的服务</title>
        <link href="http://blog.lilydjwg.me/posts/207942.html"/>
        <id>http://blog.lilydjwg.me/posts/207942.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2016-12-22T18:17:40+08:00</published>
        <updated>2016-12-22T18:17:40+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	我在用 offlineimap。用着用着就发现一个问题：偶尔 offlineimap 会卡在网络上不动弹了。跟 <a href="https://blog.lilydjwg.me/2013/11/10/kill-proceses-that-would-hang-forever.41646.html">getmail</a> 一个德性……</p>
<p>
	但是 offlineimap 又跟 getmail 有点不一样，它是持续运行着的。虽然非要把之前那个 killhung 程序拿来用不是不可以，但我还是重新弄了一个更优雅的方案：systemd watchdog。</p>
<p>
	我的 offlineimap 本来就是用 systemd 服务的方式来跑的，所以很适合这样的改造呢。只是，当我瞅了一眼源码之后，我就放弃了 patch offlineimap 的打算。很难在合适的地方添加 watchdog 相关的代码。</p>
<p>
	既然从内部着手不好做，那就从外部写一个 wrapper 好了，反正 offlineimap 跟 getmail 不一样，正常情况下一直在输出东西，就把这个作为它的「心跳」特征好了。当然这个 wrapper 还可以给其它程序用。</p>
<p>
	于是，<a href="https://github.com/lilydjwg/winterpy/blob/master/pyexe/watchoutput">watchoutput</a> 程序诞生了！稍微改一下 offlineimap 的 .service 文件，像这样子就好了：</p>
<pre>
<span>[Unit]</span>
<span>Description=</span>Offlineimap Service

<span>[Service]</span>
<span>Type=</span><span>notify</span>
<span>ExecStart=</span>.../watchoutput /usr/bin/offlineimap
TimeoutStopSec=3s
<span>SyslogIdentifier=</span>offlineimap
<span>Restart=</span><span>on-failure</span>
<span>WatchdogSec=</span><span>70</span>
<span>LimitCORE=</span><span>0</span>

<span>[Install]</span>
<span>WantedBy=</span><span>default.target</span>
</pre>
<p>
	加上<code>LimitCORE=0</code>是为了阻止重启的时候由于 SIGABRT 信号导致 coredump，浪费磁盘空间。</p>
<p>
	用了几天之后，终于观察到一次由 watchdog 触发的重启：</p>
<pre>
12月 19 12:26:53 lilywork offlineimap[21623]:  Establishing connection to imap.exmail.qq.com:993 (main-remote)
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Watchdog timeout (limit 1min 10s)!
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Killing process 21623 (python3) with signal SIGABRT.
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Killing process 21625 (offlineimap) with signal SIGABRT.
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Main process exited, code=dumped, status=6/ABRT
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Unit entered failed state.
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Failed with result 'core-dump'.
12月 19 12:28:03 lilywork systemd[687]: offlineimap.service: Service hold-off time over, scheduling restart.
12月 19 12:28:03 lilywork systemd[687]: Stopped Offlineimap Service.
12月 19 12:28:03 lilywork systemd[687]: Starting Offlineimap Service...
12月 19 12:28:04 lilywork systemd[687]: Started Offlineimap Service.
</pre>
<p>
	没过几天，我又给这个 watchoutput 的脚本找到另外的用处：自动重启网络。</p>
<p>
	我家里的笔记本连 Wi-Fi 不知怎么，这些天经常会卡住（只发不收，一直处于 ARP 找网关的状态）。内核之前报过一次错，现在也没反应了。</p>
<p>
	于是：</p>
<pre>
<span>[Unit]</span>
<span>Description=</span>Watch for network availability

<span>[Service]</span>
<span>Type=</span><span>notify</span>
<span>ExecStart=</span>.../watchoutput --retry-on-exit 2 --wait-before-retry 30 --ignore-stderr \
    -- ping -i 30 192.168.1.1
<span>Restart=</span><span>on-failure</span>
<span>WatchdogSec=</span><span>70</span>
<span>StandardOutput=</span><span>null</span>
<span>StandardError=</span><span>journal</span>
<span>LimitCORE=</span><span>0</span>
<span>SyslogIdentifier=</span>watch-network

<span>[Install]</span>
<span>WantedBy=</span><span>default.target</span>
</pre>
<p>
	拿 watchoutput 监控 ping 网关的输出，每30秒 ping 一次，如果70秒还没反应就重启它自己。然后我们还需要重新连接网络。在 /etc/systemd/system 下建立 netctl-auto@wlan0.service.d 目录，并在其下建立一个 watchdog.conf 文件，给 netctl-auto@wlan0.service 服务增加一项配置：</p>
<pre>
<span>[Unit]</span>
<span>PartOf=</span><span>watch-network.service</span>
</pre>
<p>
	这样当 watch-network.service 重启的时候，netctl-auto@wlan0.service 就会自动重启了～</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   我在用 offlineimap。用着用着就发现一个问题：偶尔 offlineimap 会卡在网络上不动弹了。跟 getmail 一个德性……     但是 offlineimap 又跟 getmail 有点不一样，它是持续运行着的。
            
        </summary>
        
        <category term="Linux"/>
        
    </entry>
    
    <entry>
        <title>使用 RSS 订阅知乎用户的动态</title>
        <link href="http://blog.lilydjwg.me/posts/207778.html"/>
        <id>http://blog.lilydjwg.me/posts/207778.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2016-12-14T21:01:24+08:00</published>
        <updated>2016-12-14T21:01:24+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	之前做了一个<a href="http://blog.lilydjwg.me/2015/11/11/subscribe-to-zhihu-zhuanlan-via-rss.188250.html">知乎专栏转RSS</a>的网关，这次又写了个针对知乎动态的。感兴趣的话去 <a href="https://rss.lilydjwg.me/">https://rss.lilydjwg.me/</a> 看看用法吧。</p>
<p>
	此功能只支持用户的回答和发布文章两个操作。别的操作，比如赞了答案啦，关注了专栏啦，参加了 live 啦，没有实质性的内容，又可能会有非常多，不适合 RSS 这种面向内容发布的东西，所以就过滤掉了。即使如此，程序每次访问取最近40条动态，缓存有好几个小时，所以对于活跃的用户是可能漏掉一些动态的。反正现在信息这么多，漏了就漏了吧，去读读别的东西呗。</p>
<p>
	知乎这次暴露出来的 API 有点意思。它有一个 <code>include</code> 参数，看起来是指定要返回哪些字段的。看起来知乎也在解决 <a href="http://githubengineering.com/the-github-graphql-api/">GitHub 遇到的同样的问题</a>：RESTful API 太不灵活了。只是，为什么要造轮子啊，<a href="https://github.com/facebook/graphql">GraphQL</a> 不是挺好的吗……</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   之前做了一个知乎专栏转RSS的网关，这次又写了个针对知乎动态的。感兴趣的话去 https://rss.lilydjwg.me/ 看看用法吧。     此功能只支持用户的回答和发布文章两个操作。别的操作，比如赞了答案啦，关注了专栏啦，
            
        </summary>
        
        <category term="网络"/>
        
    </entry>
    
    <entry>
        <title>开启BBR拥塞控制</title>
        <link href="https://wind.moe/article/55"/>
        <id>https://wind.moe/article/55</id>
        
        <published>2016-12-10T02:22:36+08:00</published>
        <updated>2016-12-10T02:22:36+08:00</updated>
        
        <content type="html"><![CDATA[<p>前日在某TG群里碰见大佬强推 <a href="https://github.com/google/bbr">BBR</a> 加速并给出了 IDCF 的测速实际对比，颇为心动，于空闲的 Vultr 主机上尝试部署了一下，性能提升虽然没有 Kcptun 那么暴力，不过也值得一试。</p>



<blockquote>
<p>测试环境 64位Ubuntu14.04，更换内核有风险，请勿用于生产环境，不支持 Openvz 架构。</p>
</blockquote>

<p><strong>安装</strong></p>

<p>首先ssh连接进入服务器，下载最新内核
<code>
wget -O linux-image-4.9.0-amd64.deb http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb
</code></p>

<p>安装内核
<code>
dpkg -i linux-image-4.9.0-amd64.deb
</code></p>

<p>移除其他内核
<code>
dpkg -l | grep linux-image | awk '{print $2}' | grep -v 'linux-image-4.9.0-040900-generic'|xargs -n1 dpkg --purge
</code></p>

<p>更新 gurb
<code>
update-grub
</code></p>

<p>重启VPS
<code>
reboot
</code></p>

<p>稍等数十秒，再次ssh进入服务器，先使用 uname -r 判断内核是否升级成功，接着修改内核参数，开启bbr
<code>
echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf
echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf
</code></p>

<p>载入配置
<code>
sysctl -p
</code></p>

<p>检查一下 
<code>
lsmod | grep bbr
</code>
如果能看到 tcp_bbr 一行则开启成功，</p>

<p><strong>速度对比</strong></p>

<p>裸连的速度<br />
<img src="https://dn-wind-moe.qbox.me/img/tcp/ss.png" /></p>

<p>开启BBR的速度<br />
<img src="https://dn-wind-moe.qbox.me/img/tcp/bbr-ss.png" /></p>]]></content>
        
        <summary type="html">
            
            前日在某TG群里碰见大佬强推 BBR 加速并给出了 IDCF 的测速实际对比，颇为心动，于空闲的 Vultr 主机上尝试部署了一下，性能提升虽然没有 Kcptun 那么暴力，不过也值得一试。     测试环境 64位Ubuntu14.04，更换内核有风险，请勿用于生产环境，不支
            
        </summary>
        
    </entry>
    
    <entry>
        <title>君の名は。</title>
        <link href="https://wind.moe/article/54"/>
        <id>https://wind.moe/article/54</id>
        
        <published>2016-12-02T04:32:53+08:00</published>
        <updated>2016-12-02T04:32:53+08:00</updated>
        
        <content type="html"><![CDATA[<p>走出影院，心中的暖不经意间驱散了初冬的寒意，便想着写些什么来纪念一下（这是观影完第一时间的短文，可能会带点主观倾向</p>

<p>纵观之前的作品，新海诚擅长的是描画宏伟美丽的背景，小而微的感情刻画以及讲述人与人之间的分离、羁绊，在背景上，描画所得与照片拍摄的图片最直观的区别，就是更有一种迎面而来的壮阔感，更具有表现力，也让图片本身带上了鲜明的感情色彩，更加突出了被挟裹在时间中的无力感，这是单纯的照片无法取得的效果。而细微的刻画则为影片增添了一分灵气，轻轻的挑动着心弦，可能一句简短的台词，一首应景的插曲就能泪点迸发，也深化了人物形象。</p>

<p>早在 云之彼端 约定的地方 时新海诚便有了平行世界的构思，不过在本作，时空的交织穿越才是推动剧情发展的重点，相对于之前的几部作品，诚哥确实变得&quot;会讲故事&quot;了。我比较用心看过的诚哥的电影只有秒五、云彼和追逐繁星的孩子，相对于你的名字，剧情上略显拖沓，或许是诚哥想表达的太多，而一部优秀的电影需要取舍，通过铺垫让观众自己来了解领会，所以在观影的时候，能发现本作的剧情节奏把握的十分到位，丝毫没有感觉时间的流逝。此外，本片的基调并不如诚哥前几作那种整体压抑悲伤的基调，取而代之的是轻松欢快的感情，感人处让人保持在眼泪盈眶而又不至溢出，穿插着的一丝丝小幽默，很好的中和了气氛，这也是新海诚从未使用过的表现手法。</p>



<p>电影的开局便如预告片里所讲述的，都市里的男女主各自醒来，伴随着一段同样的内心独白，出门，乘上电车，开始新一天的生活。</p>

<p>紧随其后的OP夢灯籠中点出了新海诚使用了 五次元 这个概念来解释本作中男女主人公的穿越以及世界线的变动，虽然可能在逻辑上有些瑕疵，但是反而使观众能更加贴近男女主的内心。</p>

<p>男主 立花（たちばな） 瀧（たき）(Tachibana Taki) 是生活在东京市中心的普通男高中生，课余在意式餐厅打工，对前辈 奥寺 ミキ 心怀好感，擅长素描，对建筑和美术感兴趣。</p>

<p>女主 宮水（みやみず） 三葉（みつは）(Miyamizu Mitsuha) 是住在乡间小镇 糸守町 的女高中生，镇长父亲离家在外，和妹妹 宮水（みやみず） 四葉（よつは）(Miyamizu Yotsuha) 以及祖母 宮水（みやみず） 一葉（ひとは）(Miyamizu Hitowa) 三个人一起生活，憧憬着大都市东京的生活。</p>

<p>被手机震动吵醒的泷起身环顾，发现自己在一个女孩的身体里，还揉了几圈感叹了一下触觉的真实性，开始了夹杂着喜剧气氛的日常故事，之前还以为这镜头在大陆版会被删减（，电影在这里没有过多描述，接着开始第二天的故事。</p>

<p><img /></p>

<p>在吃早饭的时候，三叶被祖母和妹妹说今天倒是挺正常的，接着借由电视新闻引出彗星的消息，然后随着一首欢快的 三葉の通学 展现了苏醒的美丽小镇。</p>

<p>在课堂上，三叶在自己的笔记本上发现了一句留言 お前は誰だ？ （你是谁？） </p>

<p><img /></p>

<p>接着，香菜主役的老师在讲解黄昏時，出自 万叶集 的 「誰そ彼（たそかれ）と　われをな問ひそ　九月（ながつき）の　露に濡れつつ君待つ我そ」，黄昏之时即傍晚，非日非夜的时间，世界的轮廓变得模糊，可以看到牛鬼蛇神的时段，这里算是之后的铺垫。</p>

<p><img /></p>

<p>时间到了晚上，神社里的三人一起制作结绳，这是这个小村子几百年来的传承，同时三叶制作的结绳将是电影里的一条明线，连接了两条平行的世界线。稍后三叶作为巫女去参加了仪式，制作口噛み酒，即巫女将米放进嘴里咀嚼然后吐出来存放在容器中待其自然发酵而成的酒。</p>

<p><img /></p>

<p>仪式后，三叶在对着湖面喊道 来世は東京のイケメン男子にしてくださーい！（来世让我成为东京的帅哥吧！）一语成谶，隔日，三叶醒来发现真的变成了东京的男孩子，和男主一样还摸了<del>不可描述</del>，也和开篇的泷一样以为在做一个真实的梦。</p>

<p><img /></p>

<p>由于发现自己身处东京而特别兴奋，结果上学迟到了，在屋顶上和泷的朋友们聊天，在说道第一人称的时候，最先用 わたし（Watashi，女性自称），在被怀疑之后条件反射用了 わたくし（Watakushi，女性自称） 和 ぼく（Boku，小男孩自称），最后到 おれ（Ore，男性用语），生动的表情变化以及基友的反应，引发了周围观众的会心一笑。</p>

<p>之后在打工的意式餐厅，奥寺前辈的裙子被搞事情的客人划了一刀，这时三叶帮助前辈缝好裙子，也因此得到了前辈的好感。</p>

<p>回到家里，三叶想起了留在自己本子上的那句话，于是在手里留下了 みつは （三叶）。</p>

<p><img /></p>

<p>剧情并没有在前面这些琐碎的设定上花费太多时间，观众到这时也能明白男女主人公能够在睡后互换身体，还原之后身体的记忆会逐渐褪去，仿佛一场梦。影片的第一部分到此为止，随着主题曲 前前前世 的响起，画面快速掠过了之后多次的身体交换日常——别乱花我的钱啊！用的是你的身体在吃！你打太多工了！因为你在浪费我的钱啊！...... 留下了二人日常的无限想象空间。</p>

<p><img /></p>

<p>随着音乐的结束，影片进入了第二部分，泷在三叶的身体里醒来，和四叶、祖母一起将之前仪式上制作的口嚼酒进献到宫水神社的神体去，在路上祖母讲出了结（产灵，Musubi）的寓意—— 糸を繋がる事も結び、人を繋げる事も結び、時間が流れることも結び、全部、神様の力や。わしらが作る組紐もせやから神様の技、時間の流れそのもの現しとる。寄り集まって、形を作り、捻じれて、絡まって、時には戻って、途切れ、また繋がり。それが結び、それが時間。诚哥从这个角度解释了身体交换的原因，也让我们了解到本作的绳子某种意义上意味着时间，当绳子的两端系到一起构成绳结，也就意味着二人的相聚，时间线的重合。</p>

<p>神体所在之处被称为隐世（Kakuriyo），是与现世所不同的另一个世界，要回到原来世界，必须用最珍贵的东西交换——口嚼酒，猜测就是因为这点，泷才得以在之后再次交换。</p>

<p><img /></p>

<p>在隐世中，祖母回头对三叶说，你现在在做梦吗？泷伴随着满面的泪水惊醒。到了傍晚，结束了同前辈失败的约会，泷打开手机想打个电话给三叶，却没有得到回应。而三叶剪掉了蓄了许久的长发，穿上浴衣参加秋季祭典，接下来的一幕是我最喜欢的场景之一，站在湖边的草坪上，仰望着彗星的轨迹。</p>

<p><img /></p>

<p>之后两人再也没有交换过身体，可是泷却一直挂念着，将自己脑海中关于糸守町的一切都画了出来，最后毅然背上行李踏上了追寻三叶的旅程，司与奥寺前辈不放心泷，陪着他一起上路。经过一天的寻找，毫无所获，在晚饭的时候掏出画来的时候被老班认出了所画的地点是 糸守町，如果是言情小说的套路，三叶应该在村口等着泷，并说出 お帰り，但是这样就不是新海诚了。整个村子被陨石正面击中，已经成为了湖泊，而周围的人告诉泷，村子被陨石砸中的时间是三年前，泷不敢置信，掏出手机想要寻找三叶存在过的证据，结果日记的内容却一条条消失，最终空无一物。</p>

<p><img /></p>

<p>在村子附近的图书馆，泷在遇难者名单上看到了宫水三叶的名字，开始怀疑自己是不是幻想出了三叶的存在以及村子的风景？夜里，奥寺前辈提及泷手上的结绳，泷回忆不起是谁送的，却突然想起在去神体的路上，三叶祖母所提到的结绳，于是决定去神体求证一下是梦异是现实。</p>

<p><img /></p>

<p>在神体的洞穴中，泷找到了三叶制作的口嚼酒，证明了一切都是存在的，明白了二人并非身处一个世界线，三年前的那天，彗星划过天际，而三叶也在那天被陨石夺去了生命，也就明白了为何之后再也没有交换过身体，因为三叶已经不存在于那条世界线了。泷打开了口嚼酒，一口饮下，希望能够再一次和三叶交换。在离开神体的时候滑了一下，手电照亮了墙壁，墙上竟然画着彗星，仿佛冥冥中一切都被预见到了。</p>

<p>滑倒的泷看到墙上的彗星变成结，与手上的结绳连在一起，走马灯似的看到了三叶的一生，这里与前面祖母说的话呼应——「寄り集まって、形を作り、捻じれて、絡まって、時には戻って、途切れ、また繋がり。それが結び、それが時間」，从三叶的出生，妹妹的出生，母亲的过世，父亲与祖母冲突离家从政，以及和泷交换的日常，去东京找泷，剪了短发，到最后的彗星降落······根据前文祖母对于隐世的介绍，可以推测泷由于饮下了供奉神明的口嚼酒，回到了三叶所在的那个原来的世界，与自己所处的是不同的世界线，算是一个比较大的伏笔吧。</p>

<p><img /></p>

<p>一切戛然而止，泷发现自己又在三叶的身体里醒来，然后泪流满面的......继续揉胸，瞬间改变了之前带来的沉重感，不得不说，这种手法，从前的新海诚是绝不会用的，祖母也跟泷说道交换身体的事情在历代宫水神社的继承人身上都发生过，泷也将彗星坠落信息告知了祖母。泷下定决心要拯救村子里的居民，说服敕使和沙耶香执行计划，同时自己去说服镇长父亲帮忙，结果却被三叶父亲看出泷不是三叶本人。</p>

<p>此时，三叶在泷的身体里醒来，看到了已成为废墟的村子，此时三叶想起了在彗星坠落的前一天为了见泷前去东京，但是由于三年的时差，那个时候的泷并不认识三叶，最后在电车里看见了那个熟悉的身影，满怀思念，却又无法说表达出来，在泷叫住三叶的时候，三叶将自己绑头发的结绳解下掷给泷，代表着思念的绳结让平时宇宙的时间线连接在了一起，也就解释泷一直佩戴的护身符的由来。</p>

<p><img /></p>

<p>在山顶上，仿佛互相感受到了互相的接近，在不同的时间点站在了同一个地点，此时，黄昏之时到来，他们在各自的身体里醒来，看到了彼此。泷讲述了自己来到此处的原因，并将结绳还给了三叶，将结绳寄在头上的三叶我的第一反应是团长（X，而注意到黄昏之时即将结束的泷，提出为了不忘记彼此，将互相的名字写在手心的请求。然而，三叶刚写了一笔，画面突然安静，记号笔直接坠落地面，看到这里的时候感觉心都被揪住了，黄昏之时如此的短暂，我不知道你的名字，我只知道，我一直喜欢着你。</p>

<p><img /></p>

<p>泷盯着掌心里仅有的一划，喃喃着</p>

<p>「お前が世界のどこにいても、俺が必ず、もう一度逢いに行くって」
「不管你在世界的哪个角落，我都一定，会再一次找到你的」</p>

<p>但是记忆消散的太快，无数次的呼唤最终却得到了一句无力的 君の名前は！？，而此时的插曲 スパークル 也是触动了笔者的泪点，画面一转到了三叶的身上，慌忙跑下山，使用炸药引爆了电厂，并让沙耶香接通广播让人群去学校操场避难，而一直将泷的名字在心里默念的三叶却发现自己突然记不住想要记住的那个名字了，最后只能寄希望于身为镇长的父亲在知道人群疏散，在途中三叶被石块绊倒，一路滚到坡下，此时脑海中响起了泷的声音，打开手掌，想看看手心里的名字</p>

<p>「すきだ，我喜欢你」</p>

<p>“これじゃ名前、わかんないよ”，将手心蜷起贴近额头的瞬间，随着插曲低声唱出 いつか消えてなくなる君の全てを この目に焼き付けておくこと，浑身的鸡皮疙瘩都起来了，所以，重新奔跑起来，说服父亲。</p>

<p>彗星终于坠落了，闯过大气层燃烧的画面真的是美的无可复加，一声巨响，美丽的村子永远消失了。</p>

<p><img /></p>

<p><img /></p>

<p>时光飞逝，一下过去了五年，在电车里随意往外瞟了一眼，看见了似曾相识的红色结绳，仿佛想起了什么往外奔去，怅然若失。在和偶然相会的奥寺前辈分别后，看着自己的手心，通过回忆让观众了解到世界线变动了，小镇的人们基本都存活了下来，最后又一次提及了电影刚开始的那句话</p>

<p>「ずっと何かを、誰かを、探しているような気がする。」</p>

<p>夜晚，雪花四散的天桥上，泷与三叶擦身而过，像有所感应般停下，却又没有回头。要不是被剧透了一脸，我觉得就会以为影片结束了，又是一个不够完美的故事。</p>

<p><img /></p>

<p>在 なんでもないや 这首歌响起的一瞬间，久蓄的泪水不自觉的涌了出来，这也是在整部影片中我最喜欢的一首配乐，时光转瞬到了樱花飘扬的春季，两人在电车上目光交错，心中同时闪过</p>

<p>「ずっと誰かを、誰かを、探していた」</p>

<p>到站后二人都飞奔而出，虽然不知道对方在哪里，但是我一定会再见到你的。终于，在台阶上相遇了</p>

<p>「あの，俺きみをどこかで...」<br />
「私も...」<br />
「君の名は」  </p>

<p>如晨钟聩耳，又如万籁俱寂，镜头往上一抬，在二人的对视中影片结束，这或许便是最好的结局了吧。</p>]]></content>
        
        <summary type="html">
            
            走出影院，心中的暖不经意间驱散了初冬的寒意，便想着写些什么来纪念一下（这是观影完第一时间的短文，可能会带点主观倾向  纵观之前的作品，新海诚擅长的是描画宏伟美丽的背景，小而微的感情刻画以及讲述人与人之间的分离、羁绊，在背景上，描画所得与照片拍摄的图片最直观的区别，就是更有一种迎
            
        </summary>
        
    </entry>
    
    <entry>
        <title>react.jsを利用して、創建した挿絵の画像欄</title>
        <link href="https://kotori.love/archives/react-js-pinterest-style-layout-site.html"/>
        <id>https://kotori.love/archives/react-js-pinterest-style-layout-site.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2016-11-25T13:04:00+08:00</published>
        <updated>2016-11-25T13:04:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>实现简单的OTP Generator</title>
        <link href="https://wind.moe/article/50"/>
        <id>https://wind.moe/article/50</id>
        
        <published>2016-11-15T23:56:37+08:00</published>
        <updated>2016-11-15T23:56:37+08:00</updated>
        
        <content type="html"><![CDATA[<p>之前曾尝试给博客添加了一个 OTP 认证，不过是引用某第三方认证 API，经常会导致请求超时等不可料错误，于是就尝试寻找着在后端本地实现的方法，发现了 <a href="https://github.com/pyotp/pyotp">PyOTP</a> 这个库，在浅读了源码以及相关文档之后初步了解了 OTP 实现的原理，所以记下来备份。</p>

<p><strong>OTP</strong></p>

<p>OTP（One Time Password，动态密码），一般用来实现双因子认证，通过特殊的构造和哈希，实现了“动态”的特性，可以有效防止重放攻击（Replay Attacks），大大增加暴力破解成本（虽然在被爆破的时候小站服务器肯定先挂了XD</p>

<p>主要的验证方式有两种，HOTP（HMAC-Based One-Time Password）和 TOTP（Time-Based One-Time Password），像常用的 Google authenticator，开启二步验证之后会给予一个二维码，用对应 APP 扫描一下即可得到六位验证码，当然此时若是使用二维码识别工具的话也能发现这个二维码其实就是一段 URI Scheme，诸如
<code>
otpauth://totp/Windless:i%40wind.moe?issuer=chiaki&amp;secret=secretkey&amp;algorithm=SHA256
</code></p>

<p>注意到其中传递了密钥 secret 以及摘要算法类型，这样只要客户端与服务端的实现是一致的，就能保证在同一时间得出的 OTP 是一致的。</p>



<p><strong>TOTP</strong></p>

<p>在 RFC 6328 的文档里是这么介绍 TOTP 的：</p>

<blockquote>
<p>an extension of the One-Time Password (OTP)
 algorithm, namely the HMAC-based One-Time Password (HOTP) algorithm,
 as defined in RFC 4226, to support the time-based moving factor. </p>
</blockquote>

<p>大致是说 TOTP 就是基于时间因子的 HOTP 算法变种，一般定义</p>

<p>$$  TOTP = HOTP(K, T)  $$</p>

<p>K 是服务端和客户端协商好的密钥，
T 的值则是由</p>

<p>$$ T = \frac{(T_N - T_0)}{X}  $$</p>

<p>来确定。时间差除以步长得到的结果，某种意义上说也是采用计数器形式的 HTOP。其中Tn 时当前时间戳，T0 是开始计算的时间，缺省值为0，X 是以秒为单位的步长，通常默认值是 X = 30 ，后两个值约定后就不应该再更改。</p>

<p><strong>Python 代码实现</strong></p>

<pre><code>class TOTP:
    def __init__(self, secret, step=30):
        self.secret = bytearray(secret, encoding='utf-8')
        self.step = step
        self.digest = hashlib.sha256

    def generate(self, timestamp):
        hasher = hmac.new(self.secret, bytearray(timestamp), self.digest)
        hmac_hash = bytearray(hasher.digest())
        offset = hmac_hash[-1] &amp; 0xf
        code = ((hmac_hash[offset] &amp; 0x7f) &lt;&lt; 24 |
                (hmac_hash[offset + 1] &amp; 0xff) &lt;&lt; 16 |
                (hmac_hash[offset + 2] &amp; 0xff) &lt;&lt; 8 |
                (hmac_hash[offset + 3] &amp; 0xff))
        return '%06d' % (code % 10 ** 6)

    def now(self):
        return self.generate(int(time.mktime(datetime.datetime.now().timetuple()) / self.step))

    def verify(self, pwd):
        return str(pwd) == str(self.now())
</code></pre>

<p>这里没有采用 Google 开源的实现，而是采用最简单的方式来展示如何实现 TOTP。</p>

<p>一般情况下我们只需要传入双方约定好的密钥即可生成一个 OTP，具体算法请参考 <a href="https://tools.ietf.org/pdf/rfc6238.pdf">RFC 文档</a>，需要在客户端和服务端口实现同样的生成算法，然后将客户端生成的动态密码传入服务器进行验证，即可得出所需结果。</p>

<p><br />
引用资料:<br />
  1. D. M'Raihi, S. Machani, M. Pei and J. Rydell, &quot;TOTP: Time-Based One-Time Password Algorithm&quot;, RFC 6238, May 2011 (https://tools.ietf.org/pdf/rfc2104.pdf)
  2. Google Authenticator (https://github.com/google/google-authenticator) </p>]]></content>
        
        <summary type="html">
            
            之前曾尝试给博客添加了一个 OTP 认证，不过是引用某第三方认证 API，经常会导致请求超时等不可料错误，于是就尝试寻找着在后端本地实现的方法，发现了 PyOTP 这个库，在浅读了源码以及相关文档之后初步了解了 OTP 实现的原理，所以记下来备份。  OTP  OTP（One 
            
        </summary>
        
    </entry>
    
    <entry>
        <title>使用 Git Hooks 实现自动化部署</title>
        <link href="https://wind.moe/article/49"/>
        <id>https://wind.moe/article/49</id>
        
        <published>2016-11-11T10:39:44+08:00</published>
        <updated>2016-11-11T10:39:44+08:00</updated>
        
        <content type="html"><![CDATA[<p>秉着御繁以简的原则，在参考了多种部署方式后，在 Windless 上最后选用了 Git Hooks 自动部署，解放了繁琐的操作，不必每一次提交都去服务端执行 git pull，不但慢且费时费力．</p>

<p>Git Hooks 字面上看就是 Git 提供的一种类似挂钩的工具，其实我更愿意称其为触发器（WE 后遗症，在特定的时机执行对应脚本．</p>

<p>下面是 Windless 的配置手札</p>



<p><strong>新建远程仓库</strong></p>

<p>Git Hooks 需要创建一个 bare 仓库，这是一个仅含 .git 文件的仓库，在这里我在用户目录下创建这个仓库</p>

<pre><code>cd ~/inventory
git init --bare windless.git
</code></pre>

<p>在远程服务器上我的　Ｎginx 的 web 路径是指向 /srv/www 的，我也将博客后端存放在此文件夹，因此进入此文件夹</p>

<pre><code>cd /srv/www
git init
git remote add origin ~/inventory/windless.git
</code></pre>

<p><strong>配置 Git Hooks</strong></p>

<p>然后回到第一步创建的 windless.git 文件夹，进入到 Hooks，可以看见里面是带着 .sample 后缀的文件，根据其文件名能大概推出某脚本在何时触发执行，在这里我们需要 post-receive 文件，即服务端收到 push 请求之后执行脚本，没有的话手动创建一个</p>

<pre><code>cd ~/inventory/windless.git/hooks
touch post-receive
</code></pre>

<p>然后修改 post-receive 文件为想要运行的脚本指令</p>

<pre><code>#!/bin/sh

unset GIT_DIR

DeployPath=&quot;/srv/www&quot;

cd $DeployPath
git add . -A &amp;&amp; git stash
git pull origin master

echo &quot;Deploy Done.&quot;
exit 0
</code></pre>

<p>这里的 &quot;git add . -A &amp;&amp; git stash&quot; 一句是因为有时会在服务端直接 Debug 修改代码，如果没有及时 commit，而此时客户端又发送了一个 push 请求，会导致 windless.git 里没有你在远程服务器修改的记录，却会在调用 hooks 脚本时出现错误导致实际并未部署，这样的话修正错误也要花费不少时间，因为暂存掉修改，之后可以丢弃它。</p>

<p>最后修改一下 post-receive 文件的执行权限</p>

<pre><code>chmod +x post-receive
</code></pre>

<p><strong>配置本地 remote 源</strong></p>

<p>服务端的配置基本完成了，现在只需要进入本地代码文件夹，修改 .git/config 文件加上如下代码即可。</p>

<pre><code>[remote &quot;web&quot;]
    url = git@github.com:forblackking/Windless.git
    url = chiaki@wind.moe:/home/chiaki/inventory/windless.git
</code></pre>

<p>之后需要提交更改时只需要运行 git push web 即可自动化部署代码辣～</p>]]></content>
        
        <summary type="html">
            
            秉着御繁以简的原则，在参考了多种部署方式后，在 Windless 上最后选用了 Git Hooks 自动部署，解放了繁琐的操作，不必每一次提交都去服务端执行 git pull，不但慢且费时费力．  Git Hooks 字面上看就是 Git 提供的一种类似挂钩的工具，其实我更愿意
            
        </summary>
        
    </entry>
    
    <entry>
        <title>Arch Linux 安装手札</title>
        <link href="https://wind.moe/article/15"/>
        <id>https://wind.moe/article/15</id>
        
        <published>2016-11-11T08:49:06+08:00</published>
        <updated>2016-11-11T08:49:06+08:00</updated>
        
        <content type="html"><![CDATA[<p>断断续续地使用了几年Linux，其中最常用的算是Arch Linux，原因无它，唯习惯尔。恰好这两天下决心重装了次Arch以便和Win 10共存，便记下来以备不时之需，另外，本文只针对UEFI+GPT的机器。</p>
<p><strong>Arch的特点</strong></p>
<ul>
<li>轻量简洁，正如Arch的介绍“Arch Linux, a lightweight and flexible Linux® distribution that tries to Keep It Simple”，让你按需定制自己的系统</li>
<li>二进制包仓库，提供编译源码的支持（Arch Build System，ABS），更有社区用户软件仓库（Archlinux User-community Repository，AUR），依赖关系非常干净，加上AUR极其方便的编译，使得Arch上的软件基本都是最新的</li>
<li>滚动升级，没有稳定版本的概念，还能养成勤升级勤备份的好习惯（我没有滚挂过，真的没有 ._. 英伟达你走开</li>
<li>优秀的WIKI和活跃的社区使得日常使用（相对）更加便捷</li>
</ul>
<p><strong>安装媒介</strong></p>
<p>下载镜像文件，推荐使用国内源，在<a href="https://www.archlinux.org/download/">官方下载页面</a>中选择国内节点，推荐USTC、HUST节点，然后刻录到光盘/U盘里，这里我使用UltraISO刻录U盘后无法引导系统，后改用Rufus刻录才成功引导。</p>
<p><strong>UEFI模式启动</strong></p>
<p>不予赘述，在正常引导后应该会看到如下四个选项：</p>
<pre><code>Arch Linux archiso x86_64 UEFI USB
UEFI Shell x86_64 v1
UEFI Shell x86_64 v2
EFI Default Loader
</code></pre>
<p>如果没有出现，可以尝试</p>
<pre><code>efivar -l
</code></pre>
<p>查看是否出现内容，否则可能是没有进入UEFI模式，本文接下来的内容可能会不适合您的安装。</p>
<p><strong>联网</strong></p>
<p>由于笔记本是通过无线网卡上网的，执行</p>
<pre><code>iwconfig
</code></pre>
<p>这里我的无线网卡是wlp3s0，于是接着执行</p>
<pre><code>wifi-menu wlp3s0
</code></pre>
<p>选择SSID，输入相应的密码，然后 Ping 一下任意网站看看是否网络畅通</p>
<p><strong>系统分区</strong></p>
<p>对硬盘进行分区，由于我是和Win 10双系统，因此已经有了一个EFI分区，同时因为我懒，Win剩下的200G空间我就划分为一个根分区，我的EFI分区是 /dev/sda1，为了便于表述将Arch分区写为 /dev/sda2，请根据</p>
<pre><code>lsblk -f
</code></pre>
<p>的结果选择对应的分区，记下来，然后格式化要装Arch的分区，</p>
<pre><code>mkfs.ext4 /dev/sda2    //因人而异！
</code></pre>
<p>挂载分区</p>
<pre><code>mount /dev/sda2 /mnt
</code></pre>
<p>建立并挂载EFI分区</p>
<pre><code>mkdir -p /mnt/boot/efi
mount/dev/sda1 /mnt/boot/efi
</code></pre>
<p>准备工作完成了，可以开始安装Arch了。</p>
<p><strong>安装基本包</strong></p>
<p>为了节省时间选择一个优秀的镜像地址是很重要的，选择一个熟悉的编辑器</p>
<pre><code>#nano /etc/pacman.d/mirrorlist
</code></pre>
<p>选择自己速度较快的源，依旧推荐上面的 ustc 和 tuna 镜像源(如下)，ctrl+k逐行删除即可，记得刚开始的时候，mirrorlist里面是有国家地区名字的，有个##Taiwan（Province of China），现在发现括号内的内容已经不见了，有趣（</p>
<pre><code>示例
# USTC
Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
# TUNA
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
</code></pre>
<p>接着安装基本系统</p>
<pre><code>#pacstrap -i /mnt base base-devel
</code></pre>
<p>编辑fstab，</p>
<pre><code># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab
# cat /mnt/etc/fstab
</code></pre>
<p>使用cat检察一下fstab生成得是否正确，可以将EFI所在行最后一个数字改为0，跳过每次开机的fsck检查。</p>
<p><strong>系统设置</strong></p>
<p>将 /mnt 作为新的根目录</p>
<pre><code># arch-chroot /mnt
</code></pre>
<p>设置时区和编码，打开locale.gen</p>
<pre><code># nano /etc/locale.gen
</code></pre>
<p>将 en<em>US.UTF-8，zh</em>CN.UTF-8，zh_CN.GBK前面的#去掉，然后重建编码表</p>
<pre><code># locale-gen
# echo LANG=zh_CN.UTF-8 &gt;&gt; locale.conf
</code></pre>
<p>设置时区</p>
<pre><code># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre>
<p>调整系统时间为本地时间，这一步方法众多</p>
<pre><code># hwclock -localtime  或者 timedatectl set-ntp true
</code></pre>
<p>设置主机名，HostName为你想要的主机名，随意</p>
<pre><code># echo HostName &gt; /etc/hostname
</code></pre>
<p>设置root用户密码</p>
<pre><code># passwd
</code></pre>
<p>然后创建一个普通用户日常使用，username为想要用户名</p>
<pre><code># useradd -m -g users -G wheel  username
# passwd username
</code></pre>
<p>安装GRUB引导，UEFI需要grub-efi-x86_64、efibootmgr</p>
<pre><code># pacman -S grub-efi-x86_64 efibootmgr os-prober
</code></pre>
<p>然后将GRUB装至EFI分区</p>
<pre><code># grub-install --efi-directory=/boot/efi --bootloader-id=arch-grub --recheck
</code></pre>
<p>复制语言文件</p>
<pre><code># cp /usr/share/locale/en@quot/LC_MESSAGES/grub.mo /boot/grub/locale.en.mo
</code></pre>
<p>生成GRUB配置文件</p>
<pre><code># grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>
<p>然后，因为是笔记本需要无线网卡连接，需要安装相关包</p>
<pre><code>#pacman -S iw dialog netctl wpa_supplicant 
</code></pre>
<p>退出chroot，卸载分区，然后重启</p>
<pre><code>#exit
#umount /mnt/boot/efi
#umount /mnt
#reboot
</code></pre>
<p>理论上，重启后你会看见GRUB的菜单，选择Arch进入系统，然后按照最开始的联网方法进行联网。</p>
<p><strong>驱动安装</strong></p>
<p>依次安装声卡、显卡、触摸板驱动</p>
<pre><code>#pacman -S alsa-lib alsa-utils 
#pacman -S xf86-video-intel
#pacman -S xf86-input-synaptics
</code></pre>
<p>END.</p>]]></content>
        
        <summary type="html">
            
            断断续续地使用了几年Linux，其中最常用的算是Arch Linux，原因无它，唯习惯尔。恰好这两天下决心重装了次Arch以便和Win 10共存，便记下来以备不时之需，另外，本文只针对UEFI+GPT的机器。 Arch的特点  轻量简洁，正如Arch的介绍“Arch Linux
            
        </summary>
        
    </entry>
    
    <entry>
        <title>数据让 git 给吃了！</title>
        <link href="http://blog.lilydjwg.me/posts/207083.html"/>
        <id>http://blog.lilydjwg.me/posts/207083.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2016-11-10T15:52:06+08:00</published>
        <updated>2016-11-10T15:52:06+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	之前一直觉得 git 是很安全的，除非用户显式指定（比如 --force 啦，reset --hard 啦，checkout xxxx 啦），git 在用户会失去数据时都会停下来，让不小心的用户有机会处理被遗忘的修改。直到有一天，我们有个文件让 git 给吃了！</p>
<p>
	嗯，是「我们」，不是「我」。这是我们的代码部署服务器上出的事。这仓库不是我使用的，整个操作流程我也没有参与设计与评估。实际上我只是作为 troubleshooter 参与到这次神秘事件之中的。</p>
<p>
	要让 git 愉快地吃掉数据，只要这样就可以了：</p>
<ul>
	<li>
		提交 A 不包含文件 f</li>
	<li>
		提交 B 包含文件 f</li>
	<li>
		当前工作区为提交 A，并且包含一份未被 git 管理的文件 f，<strong>并且 f 被 gitignore 忽略掉了</strong></li>
</ul>
<p>
	然后做如下操作，未被管理的那份 f 就会消失不见了：</p>
<ul>
	<li>
		将工作区切换到提交 B。因为 f 被忽略，所以 git 不会报错（<a href="https://github.com/git/git/blob/be5a750939c212bc0781ffa04fabcfd2b2bd744e/unpack-trees.c#L1480">代码</a>）</li>
	<li>
		将工作区再切换回 A。因为 A 不包含 f，所以 f 被删掉了</li>
</ul>
<p>
	正在吃 f 的 git：主人遗弃了的 f 就交给我好了～</p>
<p>
	要避免出现这种问题，当然是在 git 工作区会有修改的时候，不要依靠 git 来在多个版本间切换啦～btrfs 或者 zfs 的快照多好！如果文件系统不支持快照的话，那就用多个目录吧。</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   之前一直觉得 git 是很安全的，除非用户显式指定（比如 --force 啦，reset --hard 啦，checkout xxxx 啦），git 在用户会失去数据时都会停下来，让不小心的用户有机会处理被遗忘的修改。直到有一天，我
            
        </summary>
        
        <category term="版本控制"/>
        
    </entry>
    
    <entry>
        <title>欧洲渡劫</title>
        <link href="https://kotori.love/archives/sif-europe-crossing-robbery.html"/>
        <id>https://kotori.love/archives/sif-europe-crossing-robbery.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2016-11-07T10:55:00+08:00</published>
        <updated>2016-11-07T10:55:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>诡异多多的 bash</title>
        <link href="http://blog.lilydjwg.me/posts/206916.html"/>
        <id>http://blog.lilydjwg.me/posts/206916.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2016-11-03T14:15:32+08:00</published>
        <updated>2016-11-03T14:15:32+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	要说哪个 shell 最复杂难学，我肯定回答 zsh。而要说哪个 shell bug 最多，毫无疑问是 bash 了。shellshock 这种大家都知道的我就不说了。bash 有很多很诡异的角落，昨天我亲身碰到一个。</p>
<p>
	我有一个 Python 程序 A，会使用 subprocess 带 shell=True 跑一行 shell 命令。那条命令会在后台跑另外一个 Python 程序 B。诡异的事情是，当我向 B 的进程发送 SIGINT 时，无法结束它，以及它下边带的一个 tail 进程。一开始我还没注意到 B 的进程本身没有被 SIGINT 杀死，是在无效的情况下被 A 用 SIGKILL 杀死的。我只看到那个 tail 程序还活着。所以我去处理了一下 KeyboardInterrupted 异常，来结束掉那个 tail。</p>
<p>
	结果很诡异：KeyboardInterrupted 异常并没有发生。通过 strace 观察可以看到，B 进程在读 tail 的输出，然后收到了 SIGINT，然后接着读 tail 的输出……我一开始还以为这个和 <a href="https://www.python.org/dev/peps/pep-0475/">PEP 475</a> 相关，以为是 Python 自动重启了被中断的系统调用，所以没来得及处理信号（Python 的信号并不是及时处理的）。然后就去仔细看文档。结果文档告诉我，如果注册了信号处理函数，并且它抛出异常的话，那么被中断的系统调用是不会被重试的。所以这就不对了。</p>
<p>
	然后我又测试了直接在终端运行 B，而不是通过 A 去运行。本来我开发的时候就是这么测试它的，也没遇到什么怪异的现象。结果确实没有什么怪异的事情发生：即使我使用 kill 命令只给 B 发送 SIGINT 信号，Python 的 KeyboardInterrupted 逻辑会被触发，然后它主动杀掉 tail 进程。（使用 Ctrl-C 的话，B 和 tail 都会收到 SIGINT 信号的。）</p>
<p>
	疑惑的时候，我又想到了拿 SIGINT 去杀那个不死的 tail 进程，这才发现它也出现奇怪的行为了：正在读 inotify 的文件描述符呢，来了个 SIGINT 信号，然后它接着读 inotify 去了……跟 B 出现的问题一样。我又去查了 tail.c 的源码，也没发现它对 SIGINT 有特殊的处理啊。</p>
<p>
	难道是继承过来的？man 7 signal 了一下，果然：</p>
<blockquote>
	<p>
		During an execve(2), the dispositions of handled signals are reset to the default; the dispositions of ignored signals are left unchanged.</p>
</blockquote>
<p>
	所以 tail 和 B 继承了一个「忽略 SIGINT」的行为。（nohup 就是用的类似的手段啊。）</p>
<p>
	于是 strace -f 了整个从 A 开始的进程树，最后发现这问题和 Python 并没有什么关系，而是 bash 的错！</p>
<p>
	A 是用 shell=True 调用的命令，所以它调用了 /bin/sh。系统是 CentOS，所以 /bin/sh 是指向 bash 的。所以这里实际上调用了 bash，而它的处理有问题。</p>
<p>
	要重现这个 bug 很容易：</p>
<pre>
bash -c 'sleep 1000 &amp;'
</pre>
<p>
	然后这个 sleep 进程就会忽略 SIGINT 和 SIGQUIT 了。我也不明白 bash 这是想要做什么。</p>
<p>
	之前也遇到过另外几个 bash 的 bug（或者是 feature？）——</p>
<ol>
	<li>
		<p>
			在终端中，在脚本中执行交互式 bash 时，第一个 bash 进程会将自己设为前台进程组，导致后来的进程收到 SIGTTIN 或者 SIGTTOU。很神奇，<a href="https://stackoverflow.com/a/39961408/296473">两行同样的命令，第一条和后边的行为不一致</a>。</p>
	</li>
	<li>
		<p>
			在 bash 中，执行不带 shebang 的 shell 脚本时，脚本会在当前 bash 进程内执行，造成 <a href="https://www.zhihu.com/question/39020633/answer/79279418#comment-111083118">history 命令的行为异常</a>。</p>
	</li>
	<li>
		<p>
			这个是听说的。输出失败时，未写入目标的内容仍留在缓冲区内，<a href="https://utcc.utoronto.ca/~cks/space/blog/unix/BashBufferingForkBug">会在奇怪的地方冒出来</a>。</p>
	</li>
</ol>
<p>
	以后还是尽量避开 bash 吧。有 zsh 用 zsh，有 dash 用 dash；它们都没有本文提到的这些问题。</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   要说哪个 shell 最复杂难学，我肯定回答 zsh。而要说哪个 shell bug 最多，毫无疑问是 bash 了。shellshock 这种大家都知道的我就不说了。bash 有很多很诡异的角落，昨天我亲身碰到一个。     我有
            
        </summary>
        
        <category term="Linux"/>
        
    </entry>
    
    <entry>
        <title>新的旅程，新的Windless</title>
        <link href="https://wind.moe/article/48"/>
        <id>https://wind.moe/article/48</id>
        
        <published>2016-11-02T12:00:00+08:00</published>
        <updated>2016-11-02T12:00:00+08:00</updated>
        
        <content type="html"><![CDATA[<p>终于将博客迁移到 Aliyun 上了，新的博客代号为「Windless」，源代码托管在 <a href="https://github.com/chiaki64/Windless">Github</a> 上，欢迎 PR。</p>

<p>上一版的博客是基于 Laravel 和 MariaDB 构建的，完成后总是抱有一丝遗憾，许多功能马马虎虎带过，没有使用版本控制，再加上笔者对 PHP 不甚了解，重构的想法也就一直埋着，之前也尝试过使用 Yesod 构建博客后端，无奈功力太浅无法驾驭，那个时候正好在关注 Python 3.5 的新特性 <a href="https://www.python.org/dev/peps/pep-0492/">PEP 492</a>，也想试试使用 KV 型数据库来存储数据，也就有了现在的技术选型。</p>

<p>先简单的介绍一下「Windless」的技术栈，后端使用了 aiohttp 进行构建，基于 Python 新 Asynchronous I/O 特性，同时使用 Redis 作为后端数据库，本地的 ab 测试也能勉强跑到 1200+ Req/s 的成绩，前端则沿用上个版本的「Windcore」使用的 <a href="https://getmdl.io/">Material Design Lite</a> 组件库以及 Pure JavaScript 构建。</p>



<p>因为大多数服务器中的 Python 版本还停留在2.7，也有许多依赖于它的组件，导致想要完全迁移到 Python 3 困难重重，于是考虑到了使用 Docker，保证开发环境与生产环境的一致，极大的简化了应用部署的步骤，在开发环境测试通过后就可以直接部署，同时方便了服务间的解耦。</p>

<p>原先前端使用的主题我称之为 Lime（青柠），并将之前用于后台的 Starlit-Night（星夜）主题适配到前端，可以使用右上的主题按钮来切换主题，主要是为了方便夜间浏览。</p>

<p>至于先前的文章，由于觉得文笔太过随意而且稚嫩，我会逐渐修饰再慢慢恢复出来。</p>

<p>下一步将实现 Restful API 来与前端交互，同时使用 Vue 2.0 的 Server Side Rendering 来重新构建前端，最近也会将其中使用的技术栈总结出几篇文章出来～</p>

<p>书于 2016年11月3日 凌晨 2时43分</p>]]></content>
        
        <summary type="html">
            
            终于将博客迁移到 Aliyun 上了，新的博客代号为「Windless」，源代码托管在 Github 上，欢迎 PR。  上一版的博客是基于 Laravel 和 MariaDB 构建的，完成后总是抱有一丝遗憾，许多功能马马虎虎带过，没有使用版本控制，再加上笔者对 PHP 不甚了
            
        </summary>
        
    </entry>
    
    <entry>
        <title>数据迁移中</title>
        <link href="https://wind.moe/article/1"/>
        <id>https://wind.moe/article/1</id>
        
        <published>2016-11-01T12:00:00+08:00</published>
        <updated>2016-11-01T12:00:00+08:00</updated>
        
        <content type="html"><![CDATA[<p>把博客搬回了阿里云～
正在迁移原文章中</p>]]></content>
        
        <summary type="html">
            
            把博客搬回了阿里云～ 正在迁移原文章中
            
        </summary>
        
    </entry>
    
    <entry>
        <title>模拟登录pixiv.net</title>
        <link href="https://kotori.love/archives/curl-login-pixiv.html"/>
        <id>https://kotori.love/archives/curl-login-pixiv.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2016-11-01T10:10:00+08:00</published>
        <updated>2016-11-01T10:10:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>在 Python 里设置 stdout 的编码</title>
        <link href="http://blog.lilydjwg.me/posts/206653.html"/>
        <id>http://blog.lilydjwg.me/posts/206653.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2016-10-21T14:43:34+08:00</published>
        <updated>2016-10-21T14:43:34+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	有时候进程的运行环境里，locale 会被设置成只支持 ASCII 字符集的（比如 LANG=C）。这时候 Python 就会把标准输出和标准错误的编码给设置成 ascii，造成输出中文时报错。</p>
<p>
	一种解决办法是设置支持 UTF-8 的 locale，但是那需要在 Python 进程启动前设置。启动之后，初始化过了，再设置 locale 也不会重新初始化那些对象。</p>
<p>
	另一种办法是往 sys.stdout.buffer 这种地方直接写 bytes。理论上完全没问题，但是写起程序来好累……</p>
<p>
	我就去找了一下怎么优雅地弄一个新的 sys.stdout 出来。Python 3 的 I/O 不再使用 C 标准库的 I/O 函数，而是直接使用 OS 提供的接口。封装位于 io 这个模块里边，有带缓冲的，不带缓冲的，二进制的，文本的。</p>
<p>
	研究了一下文档可知，sys.stdout 是个 io.TextIOWrapper，有个 buffer 属性，里边是个 io.BufferedWriter。我们用它造一个新的 io.TextIOWrapper，指定编码为 UTF-8：</p>
<pre>
import sys
import io

def setup_io():
  sys.stdout = sys.__stdout__ = io.TextIOWrapper(
    sys.stdout.detach(), encoding='utf-8', line_buffering=True)
  sys.stderr = sys.__stderr__ = io.TextIOWrapper(
    sys.stderr.detach(), encoding='utf-8', line_buffering=True)
</pre>
<p>
	这里除了可以设置编码之外，也可以设置错误处理和缓冲。所以这个技巧也可以用来容忍编码错误、改变标准输出的缓冲（不需要在启动的时候加 <code>-u</code> 了）。</p>
<p>
	其实这样子还是不够彻底。Python 在很多地方都有用到默认编码。比如 subprocess，指定 universal_newlines=True 时 Python 会自动给标准输入、输出、错误编解码，但是呢，在 Python 3.6 之前，这里的编码是不能手动指定的。还有参数的编码，也是不能指定的（不过可以传 bytes 过去）。</p>
<p>
	所以，还是想办法去设置合适的 locale 更靠谱……</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   有时候进程的运行环境里，locale 会被设置成只支持 ASCII 字符集的（比如 LANG=C）。这时候 Python 就会把标准输出和标准错误的编码给设置成 ascii，造成输出中文时报错。     一种解决办法是设置支持 UT
            
        </summary>
        
        <category term="python"/>
        
    </entry>
    
    <entry>
        <title>【家庭网络顶级配置】软路由+Google Onhub</title>
        <link href="http://www.eric21.com/2016/10/20/489"/>
        <id>http://www.eric21.com/2016/10/20/489</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2016-10-20T21:37:33+08:00</published>
        <updated>2016-10-20T21:37:33+08:00</updated>
        
        <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/131143436@N06/30361586711/in/photostream/"><img src="https://c8.staticflickr.com/6/5484/30361586711_9f18416b70_z.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/29815923053/in/photostream/"><img src="https://c6.staticflickr.com/6/5345/29815923053_544b8b2f41_z.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/30150543690/in/photostream/"><img src="https://c3.staticflickr.com/6/5698/30150543690_8bd2abd4df_z.jpg" /></a><br />
十一之前入手了小罗软路由 N3160 配置如下：<br />
<a href="https://www.flickr.com/photos/131143436@N06/30361603991/in/dateposted/"><img src="https://c8.staticflickr.com/6/5576/30361603991_0eabdefe65_z.jpg" /></a></p>
<p>和小罗沟通后，拆开路由，把MSATA和内存卡重新插拔，电池拔掉放电几分钟。反复拆装了几次之后终于点亮了。<br />
<a href="https://www.flickr.com/gp/131143436@N06/3J74zv"><img src="https://c2.staticflickr.com/6/5211/29478475393_540a21f110_z.jpg" /></a><br />
<a href="https://www.flickr.com/gp/131143436@N06/4n9Gs4"><img src="https://c1.staticflickr.com/6/5183/29811435040_872d02e382_z.jpg" /></a><br />
<a href="https://www.flickr.com/gp/131143436@N06/Ja21AG"><img src="https://c3.staticflickr.com/6/5182/29811435610_cde73bdbd2_z.jpg" /></a><br />
这个东西实际上就一台微型的主机，可以用PE引导，自己装系统，openwrt，win，debian之类的都没问题。喜欢的话，装个VMware ESXi也是没问题的。<br />
<a href="https://www.flickr.com/photos/131143436@N06/29816111713/in/dateposted/"><img src="https://c2.staticflickr.com/6/5687/29816111713_1c7eed77bb_b.jpg" /></a><br />
内置shadowsocks RSS 翻墙一键搞定！</p>
<hr />
<p>接下来是Google Onhub开箱。</p>
<p><a href="https://www.flickr.com/gp/131143436@N06/712Q4r"><img src="https://c3.staticflickr.com/6/5800/30393246146_38c9e1450c_z.jpg" /></a><br />
<a href="https://www.flickr.com/gp/131143436@N06/8j466T"><img src="https://c7.staticflickr.com/6/5340/30393248406_b7e954bba5_z.jpg" /></a><br />
<a href="https://www.flickr.com/gp/131143436@N06/hT9k11"><img src="https://c7.staticflickr.com/6/5442/30393259606_90d45816cd_z.jpg" /></a><br />
<a href="https://www.flickr.com/gp/131143436@N06/S69292"><img src="https://c5.staticflickr.com/6/5684/30312675332_7c865ef181_z.jpg" /></a><br />
<a href="https://www.flickr.com/gp/131143436@N06/60nr2X"><img src="https://c7.staticflickr.com/6/5489/30312677182_977eeaf1c4_z.jpg" /></a></p>
<p>第一次配置的时候，需要在手机装上onhub的APP。onhub会发出声音，手机靠近onhub通过声音代码验证。只需要输入WIFI名称和密码就可以了，配置过程简单的连孩子都会，相当友好。<br />
<a href="https://www.flickr.com/gp/131143436@N06/h4G1Y8"><img src="https://c7.staticflickr.com/6/5475/29817047014_996e67570a_z.jpg" /></a></p>
<p>最后来张合影<br />
<a href="https://www.flickr.com/gp/131143436@N06/0U74g0"><img src="https://c4.staticflickr.com/6/5690/29815749603_42c530535c_z.jpg" /></a></p>]]></content>
        
        <summary type="html">
            
               十一之前入手了小罗软路由 N3160 配置如下：  和小罗沟通后，拆开路由，把MSATA和内存卡重新插拔，电池拔掉放电几分钟。反复拆装了几次之后终于点亮了。    这个东西实际上就一台微型的主机，可以用PE引导，自己装系统，openwrt，win，debian之类的都没问
            
        </summary>
        
        <category term="日记"/>
        
    </entry>
    
    <entry>
        <title>μ&#39;sic forever！！！！！</title>
        <link href="https://kotori.love/archives/final-lovelive-repo.html"/>
        <id>https://kotori.love/archives/final-lovelive-repo.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2016-10-01T18:19:00+08:00</published>
        <updated>2016-10-01T18:19:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>备份服务器数据至git</title>
        <link href="https://kotori.love/archives/backup-vps-to-git.html"/>
        <id>https://kotori.love/archives/backup-vps-to-git.html</id>
        
        <author>
            <name>そら</name>
        </author>
        
        <published>2016-09-30T08:41:00+08:00</published>
        <updated>2016-09-30T08:41:00+08:00</updated>
        
        <content type="html"><![CDATA[null]]></content>
        
        <summary type="html">
            
            null
            
        </summary>
        
    </entry>
    
    <entry>
        <title>动画「ef – a tale of memories.」：把不想忘记的思念融进心愿 ……</title>
        <link href="http://blog.dimpurr.com/anime-ef-1/"/>
        <id>http://blog.dimpurr.com/anime-ef-1/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2016-09-15T01:03:03+08:00</published>
        <updated>2016-09-15T01:03:03+08:00</updated>
        
        <content type="html"><![CDATA[<blockquote><p>本文原载于 Bangumi.tv <a href="http://bgm.tv/blog/273852">Dimpurr » 日志 » 「把不想忘记的思念融进心愿 ……」</a></p></blockquote>
<p>词不达意。</p>
<p>很多次看完动画都有提笔一写的冲动，最近的一次大概还是「结城友奈」。那时都选好了头图，甚至拟好了标题，却无法动笔。</p>
<p>心中的所思所想太过混杂；自己混乱的文字，能否传达出丝毫？抑或是只有彻头彻尾的反效果？我想叙说的那些事情，我真的做好的准备了么？还是徒增笑料，成为自己都不愿意回看的文字？我知道自己经常带着极强的偏好和预设去代入故事；我知道自己特别喜欢按自己的口味截取和曲解动画；我知道我的关注点很可能与很大一部分人不同。我不知道自己是否已经可以理直气壮的说出自己想说的内容，而不必担心自己笨拙的描述让人误会了内涵。</p>
<p>但是这次如果我不写，我根本无法称自己看完了一季 ef ；如果我不动笔，那么那部我眼中的 ef 便无处存在。</p>
<p>ef – a tale of memories.</p>
<p>相比别的话题作，对于 ef 一开始并没有太多预设的了解。只知道是 GalGame 游戏改；知道还算出名， Bangumi 排名和评价也算挺高。后来无意间跳跃着看了下第一集，才知道是大沼心监督，为出色的表现手法惊叹过后，并没有太弄懂故事的主题，于是决定等有时间了再补。其间依稀听说过原作 minori 的一些故事，然而也并没有留下特别深刻的印象。</p>
<p><span></span></p>
<p>最后， ef 在心目中的印象被毫无根据的排到「类似 SOLA 那样的爱情故事吧(可 SOLA 我也没看过)」「表现手法比较魔幻的故事」，在次次顺位等待着有空再说。因为第一集的印象被判定到「不太轻松，故事复杂可能看起来比较累，非放松类」的作品，直到开学初一念之下，开始用手机补起了第一季。</p>
<p>有趣的是， ef 在手机屏幕上的画面表现力，和手机、耳机 (SONY XPERIA Z1 + XBA-A3) 的音效搭配之下，反而出人意料的产生了非常棒的效果。第一集人物的依次出场，还有 ED 「I’m here」响起时的弦乐告诉我，这部作品的评价 9 星起跳了。</p>
<p>先谈谈故事以外的部分。</p>
<p>尽管是 07 年的作品，精致的作画、极高的画质、本身惊艳的人物设计和相对更抽象和唯美的背景风格，以及环境和道具设定的欧式风格，一开始就塑造了绝佳的童话般的故事风格和绝佳的画面效果。大沼心的分镜，独有特色的强烈色块对比，和新房风的诸多表现手法， OP ED 和过场中对英文字体、装饰元素的运用，可谓极其惊艳。</p>
<p>音乐方面不太懂得如何评价，不过配上好的音响或耳机，观感体验的确一流。 BGM 对氛围的营造本身很棒，但最重要的是每次的高潮部分， BGM 与分镜、音效还有对白的完美配合，让人无法不次次印象深刻。 OP ED 不能算首首神曲，但是总能配合着情节进展出现的不同的角色 ED ，还有 ED 中表现的人物形象和心理，也算令人饶有趣味。</p>
<p>总而言之，绝赞的制作班底决定了故事以外的各种硬素质， ef 的确都是当之无愧的一流水准。丰富而细致的音画表现和复杂的分镜手法，使得无论情节推动节奏如何，都能有接连不断的视觉刺激和动听音效营造出的极为充实的观看体验。</p>
<p>然后，来谈谈故事吧。剧透预警。</p>
<p>应该说 ef 第一季可以说围绕三位男主，以类似的主题展开了不同设定的三个故事。第一个和最主要的故事是莲治与「记忆锁链囚禁的少女」千寻的相遇；第二个故事是宫子对广野的乞求「请珍惜我」；第三个故事是景在京介和广野身上学会「不能总是等别人拉着自己前进」。</p>
<p>从 ep. 2 就开始不断出现的关键字「进路调查」「漫画家与学业」「社团和个性」「想要拍的画面」，已经非常明确的挑明了核心主题之一：梦想。这着实颠覆了我一开始对 ef 的预设，也让我开始期待 ef 最后能给出 10 星的水准。说正了是「樱花庄」，说偏了是「Lovelive」，在 ep.11 直言了「闪耀」这样的说法的 ef 骨子里无疑有种很典型的励志套路。很可惜，我就吃这一套。</p>
<p>至于虽然 ef 时间上更早，但是早已被「中二病」和「Another」抢去的眼罩娘设定的千寻身上，也有着不愧对名字「a tale of memories」的演绎。一方面，恰到好处的莲治视角对关系层层深入的描写、得知真相前的铺垫，在千寻的小说中埋藏的极为丰富的暗示和从一开始就埋好伏笔的拒绝，直到莲治亲眼见识到千寻「日常」的一次起床，这位 13 小时记忆的少女形象已骨肉丰满。与更近的类似设定纯爱作品「一周的朋友」全然不同， ef 用近乎夸张的手法表现的是少女无尽的寂寞和痛苦，还有对幸福的畏惧。所有的一切带来了最后一集的爆发，也让也许只是第一季暂时的 Happy End 更加弥足珍贵。</p>
<p>提到最后一集的爆发力，与之堪比的也只有宫子的这条故事线。一开始似乎特立独行满不在乎的少女，在景的威胁下很快就表露出了内心真正的焦急与不安。渴望的太深，所以太过容易的交出自己，一无所有所以赌上一切，一无所有所以无法坚强，所以轻易的被彻底的伤害、被全部击碎。那 99 条再无第二个人能听到的电话留言铺满了视野，然后带着又一次绝望如潮水般退入心底。在男主广野的选择和做法方面，也许动画的表现还是欠妥，但是最后随着电话卡的倒计时结束，广野还是来到了宫子身边；至少现在，宫子还没有迎来又一次结束，这样的结局让人长出一口气。</p>
<p>而景、京介部分的戏份相对来说就所剩无几了，他们更多的是和男主、和不断带来提示的优子一起，并没有太多的展开，但是承载了极其丰富的围绕着思念、选择和梦想的主题。</p>
<p>结尾 ep.12 ，最后的部分主角们的话显得略为突兀，但积极正面的表现出了他们对未来的乐观。而优子和夕身上的自始至终反复被提到，却从未展开的故事，为第二季的发挥埋下了伏笔，令人期待。最后，画面转为纯白，只留下了一句话：「把不想忘记的思念融进心愿中 ……」</p>
<p>关于故事中的人们。</p>
<p>广野应该是毫无疑问的第一男主，故事中着重的更多是他和景的关系、他对于漫画家的态度、他和宫子的发展。但是在他和景和宫子的关系这一方面，即使在 ep.11 经由京介挑明了「脚踏两条船」的现状，最终对于他的想法和言行，动画还是没有给出足够合理的交代。不过据此，并不能简单的将他等同为刻意玩弄女孩子的人渣吧。应该说，他的逞强、他的承担、他的选择，大多令人钦佩，也并非与景「自豪的哥哥」的身份不相称。</p>
<p>宫子的戏份并不多过千寻，但第一集 ED 的「I’m here」透露出她的故事的确是最早展开的一条线。在冷漠的家庭中长大，缺少和渴望爱的孩子 —— 在西尾、入间、几原的作品里，是不是也能找到熟悉的影子？优子一句「希望能看到和我一样的孩子得到幸福的故事」，道出了这个故事的本质。一开始了无牵挂的时候，显得那样自由和自信，在景面前一幅风轻云淡。但是不曾拥有过爱的孩子，一旦暴露出了软肋总是无法避免的惊慌失措：思念愈深，剩下的愈是只有伤口和脆弱。所幸，她绝望中的求助，最终传达到了广野这里。这的确是故事中最让人心疼的孩子之一。</p>
<p>千寻在前面也已说过不少。四年的痛苦千言难尽，几乎已经放弃全部希望、丧失对自己存在的意义之时，在小小的车站、不足 45 秒的邂逅却让她拥有了全然不同的未来。那一天内的千寻越是可爱，那 13 小时的记忆的锁链越显得残酷。写故事时她说，「如果觉得她可爱的话，她的存在就等同于没有被描绘出来」，「那个女孩的举动应该让读者感到不安」 …… 那时她也许已经开始求救，已经开始不断的拷问自己。而她从一开就决定好、最后的选择，却还是让自己陷入无止境的遗忘和悲伤，也不希望自己成为他人幸福的累赘。明明也是这个千寻，却说出了「可不能说那样的话，说不定明天会比今天更好呢？」……</p>
<p>莲治本身是个显得十分青涩的孩子，但却是始终不放弃去接近的千寻、在关键时刻毫不犹豫的真正的千寻的王子。在故事的前期，除了像普通的对女孩子倾心那样喜欢千寻，为关系变好的悄悄高兴这样男孩子的纯情举动，关于「志愿调查」的话题、看着千寻写小说时的复杂心情、第一次被千寻要求接吻时极度夸张的内心活动，是他一路看着千寻的变化之后，对自己的不安和对「未来」和「愿望」的纠结。尽管不全然类似，这部分的主题，让人不得不联想到「樱花庄」里「关于天才和凡人的故事」。</p>
<p>京介。一开始和绘美的关系变化，让他显得有一点特别。他一直作为广野的好基友，推动广野和景前进的旁观者和参与者，还有广野所选择的道路「自由与不自由的创作」的对比者，发挥着喧宾夺主但至关重要的作用。</p>
<p>景。她和广野本身的感情戏算是前期的重头戏之一，从注视着「哥哥」、希望接近广野到最后有了自己清晰的想法，她的选择和成长也让人动心。和宫子的竞争中，她也做过一些让人觉得未免残忍的举动，但是也让这个少女的思念更显真实。最后，不知道她能不能算是选择了京介？</p>
<p>火村(夕)，优子，他们的故事留下了大量令人浮想联翩的伏笔。除了没有叙述的和优子的关系，火村最让人在意的一部分，是他数年来作为千寻监护人的心情和经历；那给千寻的一巴掌，也许凝聚的是自身回忆的无尽痛苦，但是看到那样拼命的去保护回忆的千寻，他还是无法狠下心去阻止。优子本身在不同线路的故事中，扮演了在关键时刻和主角对话、给予提示的角色，不过至于她为何能够如此神出鬼没，第一季并没有给出解答。</p>
<p>如果能有空在电脑前重看一次，也许我会收集一下自己认为重要的对白整理到这里。不过在此之前，还有第二季、原作游戏在等着我吧；何况对于 ef 故事本身以外的事情，周边也好幕后也好，我还没有做过必要的了解。</p>
<p>对于后面的故事我无法保证，但就已经结束的第一季来说，可以说，在我眼中堪称完美的无以复加。在看完 ep.8 后，我把 Bangumi 全部动画的评分调低了一星，只为了 ef 能呆在按评分排序的列表的顶端。</p>
<p>无意间就写了这么长了，本想再额外对一些周边的内容多做评价，比如「I’m here」实在是神曲，千寻「空の梦」的 ED 纷飞的纸片结合故事来看实在太棒了 …… 但是至此时间已花的不少，而且也快词藻穷尽了，作罢。</p>
<p>我的评分标准写过， 10 星的标准是「近乎完美的质量；强烈影响自己；无比希望有一天能经自己笔下诞生这样的故事」。如果说第一个标准已经用我激动溢于言表的溢美之词稍作衬托了的话，后面两点却是要自己花时间来证明的。</p>
<p>可是，这又有什么不好呢？</p>
<p>如果说动画或者任何其他载体的故事不过是数十分钟的一场梦境，那剩余的日常也不过是一切和一切的铺垫，是洁白无瑕的梦的睡前准备。就算是干脆说自己为此而活着也没问题。</p>
<p>因为啊，拿起笔的时候，戴上耳机的时候。「这一刻，即是高潮」。</p>
<p>如果说乏味的日常中不可能时时保持这样的心情，那么，要学会把梦想铭刻进心底呢，因为也许自己的尝试和偶然组合起来，就可能发生奇迹，不是么？</p>
<p>「把不想忘记的思念融进心愿 ……」</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/anime-ef-1/">动画「ef – a tale of memories.」：把不想忘记的思念融进心愿 ……</a></p>]]></content>
        
        <summary type="html">
            
            本文原载于 Bangumi.tv Dimpurr » 日志 » 「把不想忘记的思念融进心愿 ……」 词不达意。 很多次看完动画都有提笔一写的冲动，最近的一次大概还是「结城友奈」。那时都选好了头图，甚至拟好了标题，却无法动笔。 心中的所思所想太过混杂；自己混乱的文字，能否传达出丝
            
        </summary>
        
        <category term="次元爱"/>
        
        <category term="ef"/>
        
        <category term="动画"/>
        
        <category term="青春"/>
        
    </entry>
    
    <entry>
        <title>Linux 下的 Wi-Fi 分享</title>
        <link href="http://blog.lilydjwg.me/posts/205870.html"/>
        <id>http://blog.lilydjwg.me/posts/205870.html</id>
        
        <author>
            <name>依云</name>
        </author>
        
        <published>2016-09-13T12:26:24+08:00</published>
        <updated>2016-09-13T12:26:24+08:00</updated>
        
        <content type="html"><![CDATA[<p>本文来自<a href="http://blog.lilydjwg.me/">依云's Blog</a>，转载请注明。</p><p>
	首先看看你的网卡和驱动组合是否支持这样的操作。</p>
<pre>
&gt;&gt;&gt; iw list | grep -A2 combinations:
        valid interface combinations:
                 * #{ managed } &lt;= 1, #{ AP, P2P-client, P2P-GO } &lt;= 1, #{ P2P-device } &lt;= 1,
                   total &lt;= 3, #channels &lt;= 2
</pre>
<p>
	上边这个输出说明支持，并且频道可以不一样。</p>
<p>
	然后，添加一个用途 AP 的网络接口，并配置 IP 地址。我的无线网络接口名字是 wlan0，因为我通过创建空 /etc/udev/rules.d/80-net-setup-link.rules 文件的方式禁用了 systemd 的网络接口改名。</p>
<pre>
sudo iw dev wlan0 interface add wlan0_ap type __ap
sudo ifconfig wlan0_ap 192.168.17.1
</pre>
<p>
	配置 NAT：</p>
<pre>
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
sudo iptables -w -t nat -A POSTROUTING -s 192.168.17.0/24 -j MASQUERADE
</pre>
<p>
	配置 DHCP。我用的是 dnsmasq。它本来是作为 DNS 缓存用的，但是也支持 DHCP，那就用它了：</p>
<pre>
interface=wlan0_ap
no-dhcp-interface=wlan0
dhcp-range=192.168.17.50,192.168.17.150,12h
</pre>
<p>
	注意不要在其它只提供 DNS 服务的接口上提供 DHCP 服务，以免出现冲突。</p>
<p>
	然后就可以开启热点啦。hostapd 配置如下：</p>
<pre>
interface=wlan0_ap
driver=nl80211
ssid=名字
channel=1
hw_mode=g
ieee80211d=1
country_code=cn
ieee80211n=1
ieee80211h=1
ignore_broadcast_ssid=0
auth_algs=1
wpa=2
wpa_passphrase=secret
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
</pre>
<p>
	最后把它们跑起来就可以了。</p>
<p>
	为了方便使用，我创建了个 systemd 服务 wlan0_ap.service：</p>
<pre>
<span>[Unit]</span>
<span>Description=</span>Setup wlan0_ap
<span>Before=</span><span>hostapd.service</span>
<span>After=</span><span>sys-subsystem-net-devices-wlan0.device</span>
<span>After=</span><span>iptables.service</span>

<span>[Service]</span>
<span>Type=</span><span>oneshot</span>
<span>RemainAfterExit=</span><span>yes</span>
<span>ExecStart=</span>/usr/bin/iw dev wlan0 interface add wlan0_ap type __ap
<span>ExecStart=</span>/usr/bin/ip address add dev wlan0_ap 192.168.17.1/24
<span>ExecStart=</span>/usr/bin/iptables -w -t nat -A POSTROUTING -s 192.168.17.0/24 -j MASQUERADE
<span>ExecStop=</span><span>-</span>/usr/bin/iptables -w -t nat -D POSTROUTING -s 192.168.17.0/24 -j MASQUERADE
<span>ExecStop=</span>/usr/bin/ip address delete dev wlan0_ap 192.168.17.1/24
<span>ExecStop=</span>/usr/bin/iw dev wlan0_ap del

<span>[Install]</span>
<span>WantedBy=</span><span>hostapd.service</span>
</pre>
<p>
	systemctl enable wlan0_ap 之后就可以直接 systemctl start hostapd 来启动了～当然也很容易停止服务：systemctl stop hostapd wlan0_ap。我的 dnsmasq 总是开启的，所以就不用加依赖了。还有 ipv4_forward 我也是早就写到配置文件 /etc/sysctl.d/99-sysctl.conf 里的。</p>]]></content>
        
        <summary type="html">
            
            本文来自依云&#39;s Blog，转载请注明。   首先看看你的网卡和驱动组合是否支持这样的操作。    &amp;gt;&amp;gt;&amp;gt; iw list | grep -A2 combinations:          valid interface combinations:     
            
        </summary>
        
        <category term="Linux"/>
        
    </entry>
    
    <entry>
        <title>euphoric field</title>
        <link href="http://blog.dimpurr.com/euphoric-field/"/>
        <id>http://blog.dimpurr.com/euphoric-field/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2016-09-11T03:11:39+08:00</published>
        <updated>2016-09-11T03:11:39+08:00</updated>
        
        <content type="html"><![CDATA[<p>大概已经过了许久，没有再动手写一篇不止是给自己看的文章了。</p>
<p>明天早上返校，所以大概没有那么多时间构思和修改。并不是真的多么在意这在别人眼中会怎样 —— 更重要的是，随着时间沉淀下来的这篇文章，在以后的自己眼中将会怎样。</p>
<p>无意间翻阅 Google Keep 中两三年前的 Notes ，发现那时候基本都是想要写的主题先记下来几天，等有了些想法之后再动笔。只是这次，我必须得这样仓促的开始，然后又仓促的结束，并回归到并不能用日复一日来形容的日常中 —— 这样的，我的高中和高三生活中了。</p>
<p><span></span></p>
<hr />
<p>能描述到什么程度为止？ —— 这是脑海中浮现的第一个问题。我还没想的足够清楚，或者说并没有准备好，用什么方式来叙述自己的高中生活。</p>
<p>笼统的说，已经过去的高中两年，其信息量和事件密度并不会亚于初中或更久以前。但是，一言以蔽之的话，我对我的高中生活的评价只能是 —— 并不满意。</p>
<p>这是不难理解的结论。应该说，高一的时候，我就已经明确的意识到了结果的走向将会怎样。只是，到了高三的现在，终于偶尔会为这早已知道的事实难受起来。</p>
<p>为什么说不难理解呢？因为见过了更好的生活方式，所以当然会为当下的状态和环境感到不满意；因为一开始就抉择好了保证什么和放弃什么，所以当然会如同预想之中一样的承受难以割舍的痛苦；因为曾经的自己在拼尽全力的去玩，而现在只能拼尽全力的 —— 让自己将来能够再尽力去玩。</p>
<p>这便是我的高中了。结果还没到来，离真正意义上的结束也还有 270 天。但是很多事情已无法改变。初中和小学的我大概没有遗憾；那对于高中，我只能说，我没有后悔，但是无法不遗憾。</p>
<hr />
<p>All work and no play makes Dimpurr a dull boy. 放到多年前也许我会抱怨两句所谓的教育体制，可现在的我只会在知乎上撰写上千字的答案，义正言辞的为高校的筛选机制辩护 —— 何尝又不是为自己的现在的不堪开脱和为自己的选择辩护？「<a href="http://zhihu.com/question/41579742/answer/91887698" target="_blank">如果说学习就是为了应用，那么如何看待高考？高考算是对知识的应用吗？ – 回答作者: Cheny Dimpurr</a>」只是，如果将不满的根源归咎于此的话，未免太过可笑。实际的问题与此全无关系。</p>
<p>初中毕业的时候，我写过一篇「<a href="http://blog.dimpurr.com/become-history/" target="_blank">初中毕业了，毕竟老了。</a>」，我用纠结的文笔慷慨激昂的陈述了一番我所刚刚理解的理所当然的事实，大概只是为了衬托出曾经的自己多么愚蠢。我想那之后我又一股脑的做了一系列的蠢事，比如随着我的高中被搁置到现在的 Rhytune ，一个歌词百科服务，比如最后和我并没有什么关系的变成了 connext 和 GTC 的 evenBits ，又一个不知所云的面基大会。放弃她们只是所有放弃的开始。</p>
<p>放弃的原因是我想造航空母舰，但是在创建 SpaceX 之前起码得先创建 SolarCity 和卖掉 Paypal 的股份。初三的我已经意识到我正在透支自己，我知道我那时短暂的爆发背后是整个小学和初中的全部技术和能力积累，我也知道从那时开始我已经走的太远，远到自己的能力已经无法胜任了，可我却还在不断的工作和输出而没有静下心来学习的时间。然而更重要的是那时的我比现在更是个完美主义者，对作品的偏执让我宁可选择次品从一开始就不要存在。</p>
<p>简单的说，我只是打算闭关修炼罢了。</p>
<p>黑海造船厂即将关闭时马卡洛夫报告说，「总之需要一个伟大的国家才能完成他（瓦良格号）」。所以虽说是放弃，不过大概很多事情并未结束，只是我还需要再那么一点时间，让自己变得能够完成他。</p>
<hr />
<p>理所当然的，一开始我不过是从各种复杂而喧闹的事情中抽身，回到曾经自己折腾捣鼓的状态里来罢了。那时我也还满怀信心，相信自己的学习和进步很快会让人大吃一惊。画风不过是小小的开始改变了一点。我在高一寒假的记录中写道：</p>
<blockquote><p>「这个寒假，必要的应付完 evenBits 。从今以后，淡出圈子，完全聚焦于提升自己的实力上面。主要点的技能栈是前端、交互设计、绘画、视频、作曲。学业上，进入年级前十。学习上，每天要进行文学阅读和英文阅读。剩下的是写作业。在两天内完成寒假作业，然后进行计划。技术上，每天要看书。专注。耐心。不用每个圈子都掺一脚，也不用点太多无关技能栈。」</p></blockquote>
<p>另一边，我开始迎接我的高中生活，带着对「冰菓」中描述的「蔷薇色」的憧憬。</p>
<p>开学典礼上我在漏雨的大礼堂中拿着本子画着夏娜；我很快熟悉了新的学校，并且学会了潜入艺术楼，趁琴房的主人离开时偷弹里面的钢琴；我发现学校后山上有比山顶的亭子更合适的适合观景的水泥墩，那里能俯瞰整个学校和四周的小区，还有三环路上的立交桥。那时候我还没拿到学校漫画社团的漂流画本，更不知道我们学校与贫弱的文化班全然不同的省内拔尖的艺术班在艺术节上将会有怎样的节目，但起码我知道辩论部的迎新赛上，我的清晰而尖锐的观众提问怎样为我在部里的前辈中迎来了绝佳的第一印象。</p>
<p>另外，我还发现当我开始认真学习后，我其实并没有那么学渣，所以旁边的一圈妹子总是很喜欢来找我问问题；我当然不会想再重蹈初中的覆辙，我不再轻视成绩，所以我花了半个学期从入学时的年纪 450 名挤进了前 100 名。我在班级中刻意的积极表现，几次课堂上对文学或者技术类问题的侃侃而谈莫不让同学们感到新奇，无意中和舍友们提到的我在网络上和技术上的一点事情，不胫而走逐渐演变成了班级中的传说。简而言之，我只是把初中时并不在意学校中的生活，而只在网络上全力表现的自己，注意力重新转移回了现实中而已。</p>
<p>网络上太好高骛远的事情暂时不打算搞了，那么身边未免就不能做些事情。那时 illumer 还远远没有迎来现在的结局，写完那篇感慨的文章不久的我当然也想试试在这个城市做个类似的社团联合会。任务的难度和 evenBits 那样扯淡的目标相比当然完全不在一个层级，我熟练的开始了各学校间联系和讨论，只是某次在和一中信息社的社长对话时，很快的和他互相自我介绍后，被他问起我在哪个学校。我如实相告之后，他这么对我说：</p>
<blockquote><p>「真遗憾你不在我们这里啊。」</p></blockquote>
<p>当然，这句话本身是对我的认可，是对不能和我共事的惋惜之情。可对于高中的我来说，这句话还有另一层意思 —— 因为不论是城市和环境的限制还是我自己的问题，我的确在一所二流中学，就是这样的现实，让我不能逃避的现实。</p>
<p>这句话并不是原因，可那之后事情的确变得有点不同。</p>
<p>高一下，作为最有希望的三辩之一，我放弃了首届三校辩论赛近乎已经钦定的出席资格，只因为我担心中午的睡眠时间被长期占用会影响到最后的分班考试。我当然记得，那一天早上学校广播放的是「秋姉妹のなく顷に」，我为那位初中就开始同班的好友写好了辩题的提纲，那天正是他生日，他穿着西装在舞台上十分耀眼，总结陈词的时候还扯到了他最喜欢的 Fate 梗，一时全场沸腾。</p>
<p>我只是静静的坐在下面摄像，并不太可惜本可以属于我的这些荣耀，只是在意要仍旧按着自己的风格，在观众提问环节留下简短的证明自己实力的发言。那时的我还不知道结果是高二我从次重点进入了学校最好的重点班而他仍在次重点，而在那以后我们的成绩逐渐成为了单调性相反的函数。</p>
<p>但那时，我对这个感觉已经不陌生。我看着和 Rhytune 同期的一些项目逐渐开花结果，我看见曾经远在我身后的朋友因为有更多的时间在技术上远远超过我，我当然还看到了，我没有任何权利去不甘心的，那些大大小小的聚会，那些膜蛤作死成为明星的举办者们，那些像我当初一样尽兴而归的与会者们。</p>
<p>按理说，我该表现出一副自己风轻云淡的样子，这样会显得自己更加高冷成熟或者至少没那么可笑；只是，有些时候，人需要偏执一点的刺激自己，才会让自己不至于忘记方向，不是么？</p>
<p>当然，关于建立地区技术社团联盟的想法，不出意外的在对这个城市和学校的失望中放弃了。再一次看到那位一中信息社的社长的名字，已经是在两年后，已经高三伊始的我去一中参加物理竞赛的时候了。门口前的喜报红的耀眼，全省理科前十，那个人的名字赫然在列，后面跟着一个括号，分数已屏蔽。最后，我还是不知道到底做了什么分数能够被屏蔽。</p>
<p>只是我意识到我错过了什么，还有我现在必须放弃什么和保证做到什么，才能让以后不再错过。是的，我想走的更远。</p>
<hr />
<p>如果说我曾经拥有过我自认为合格的高中生活，那就是我的高一上。初三下到高一上，大概就是我目前为止短暂的人生经历中，我最痛苦也最幸福的一段时期，我最喜欢的生活状态之一了。</p>
<p>可是，就像借口一样，我的完美主义和偏执症又犯了；大概是初三下的那些经历让我变得太过自信，或者是那时自己所见到的一些东西实在太过动人，这个乏味而平庸的学校很快的让我感到厌倦；比起在无知的同学中博取优越感，我开始为更多事情的连番遇挫感到束手束脚，我开始无比渴望起更好的同学、更好的学校、更好的城市；暂时失去网络这个舞台的我，急需一个更适合的、现实中的舞台。只不过，它不在这里。</p>
<p>我想和更有趣的人一起生活一起前进，我希望被菊苣打击，我宁可做凤尾也不想做鸡头。高一下的我很快变得全然不同，当时我并没有意识到，我在同学们中的印象开始被加多了一个标签「高冷」。大概是那时我太过集中于思考自己的事情 —— 我当然有很多事情要思考。</p>
<p>我后来评价道，我自认为自己有两段比较中二的时期，一段大概在小学二三年级，另一段就是高一下了。考虑下我的年龄，大部分人这个岁数本来就在读初二也说不定罢了。但是实际的情况是，那时的我不过是被抛向了一系列，我从来从来就没有遇到过的问题罢了。后来我在暑假的记录中写：</p>
<blockquote><p>「高一一学年以来，上半阶段的自己在由于 evenBits 的各项事务和学习成绩落后的极大压力下达成了极其可观的进步。然而在自己水平提高后，来到了一个比上不足比下有余的现实瓶颈，压力减小，动力却没有增大。具体的原因分析如下：</p>
<ol>
<li>学习进步之后潜意识里感到自满，危机感降低，技术上放弃 evenBits ，最终使得压力消失</li>
<li>学习和技术上，都已经领先了大部分不用功的人和身边的人，然而与用功的人差距仍大以至于缺乏与之竞争的动力</li>
<li>自己本身的拖延症、完美主义、没有长远眼光和坚持能力的缺陷</li>
</ol>
<p>这个缺乏动力的问题是目前高中生涯最大的阻碍，也是今后大学和独立都需要面对的问题。这个问题同样已经导致了高一下学期后半部分长达一个月的低潮期，在严重影响自我成长的情况下，终于换来了理智和情感上对自己目标的肯定。因此，在接下来的两年中，必须保证不再出现这种情况。」</p></blockquote>
<p>这段时间实际发生的事情更加复杂，除了学习还在慢慢磨蹭进二三十名的水准之外，平常过的可谓是更加的「浪」，例如说终于有一次无法避免的把画画到了黑板上。我也不知道同学们一个周末回来后，发现整个黑板被在大块粉笔铺设的背景上画了一只动漫画风的少女之后，心情到底是怎样的。之后偶尔节假日逢自己留校学习，总要无聊的来这么一张；一开始是谁画的还是秘密，后来终于发展成了和基友在体育课上公开画了。</p>
<p>然而直接和这段时间挂钩的关键词是「哲学」，不带男性符号的普遍意义上的那个哲学。概括地说，我仓促的离开了那个初中开始自己就不断寻找而终于逐渐发现的世界，所以我前所未有的不得不第一次面临未来的迷茫和方向的抉择；更何况，本来就到了差不多该建立世界观的时候了。</p>
<p>我开始追问生活的意义，只不过我用的是自己熟悉的方式 —— 网络上的资料和哲学的科普著作或部分经典原作。我开始不断的自己思考和询问他人，逐渐了解自己究竟更重视什么，然后审问自己到底想要什么，想选择怎样的现在和未来。</p>
<p>我做了很多中二的事情，包括但不限于在周末的晚上带着耳机躺在学校的操场中央，听着初三放学每天回家路上听的歌，仰望被建筑物围成弧形的天空想自己的未来；包括但不限于成为学校天台的常客，包括但不限于在没有任何人察觉的情况下在教室中流泪一天，包括但不限于尝试在虚拟的故事中寻求真实感。最后，还顺便为自己始终无人理解而痛苦。</p>
<p>这是很显然的；这种属于每一个人自己的事情又怎么会有他人能够理解？不写个百万字又怎么可能陈述的清楚而不只是看起来十分可笑？所以我开始动笔尝试写小说，但这不是关键。</p>
<p>在我今后有机会更详细的叙说个中含意之前，现在我只能说，我绝不认为这些事情全无意义。我自认为，没有高一下那半年可笑而纠结的行为，也不会有如今对自己有着清晰的认识和冷静的自信，有着不容置疑的方向和目标的自己。</p>
<p>很可惜的是，本来那段经历，就自己在哲学上了解到一些有意义的学术内容，本来我打算整理撰写成一篇类似之前写过的量子计算机那样的以「自由意志」为主题的文章，但在搜集好了相关资料和列了些提纲后就没有下文了。那段时间还接触了很多心理学的内容，这两个学科的兴趣我想我也会一直保持下去。</p>
<p>不过，前面也提到，初三下那种自己抓住一切机会输出的做法的空虚感让我感到不安 —— 自己的确看起来好像很厉害，但是自己全部也只有这么一点厉害了。有一种说法说，真正有学识的人应该像一座冰山，展露出来的是一小部分，而水面下的内涵才是绝大部分。至少，我想高中两年平静的积累后的自己，应该会相比之前那样空洞硬撑的自己来说，更实在的有趣一点了吧。并不是没有高中沉寂而大学再度一鸣惊人的菊苣的前例，有时也以此聊以自慰。</p>
<p>我在接下来的记录中写：</p>
<blockquote><p>「因为上个学期已经思考过太多次了，所以答案可以呼之欲出：这并不是什么高尚或者唯一正确的生活方式，更没资格去歧视那些看起来懒懒散散的人，但是只需要这句话就够了。</p>
<p>「因为尝试过以后，就会上瘾，再也无法忘记这种感觉了」。</p>
<p>因为懒懒散散的度过一天后，会发现这样的日子并没有价值，会发现失去了时间感后什么事情都变得不再有趣，只是用娱乐消磨时间，等待着被外力推向下一个不可抗的改变。这时候心里会泛起空虚感，会想起高一初那段拼命的日子。</p>
<p>是啊，那段时间虽然是自己最辛苦的日子，但是哪里又是最痛苦的日子呢 —— 那是自己至今为止最幸福的日子啊。</p>
<ul>
<li>Q: 我的目标是？</li>
<li>A: 和有趣的人做有趣的事。只是自己做有趣的事太过孤单，所以要到好的环境，和菊苣在一起，有趣的事情也会更有趣。</li>
<li>Q: 在身边的人都没那么高的要求的情况下，为什么不降低对自己的要求，顺其自然？</li>
<li>A: 因为我本就不是为他们而活的，我永远不可能也无法接受变成他们心目中的样子，我必须坚持我的路走下去。而且我已经试过顺其自然了，其实根本不开心。</li>
<li>Q: 为什么不能不改变世界，就改变自己，放弃这些无聊的坚持呢？</li>
<li>A: 因为如果放弃了，那我就没有存在的意义了。对我来说我无论如何都要贯彻这些只属于我的信念，因为这样的话，一定也会有只有我才能做到的事情，只有我才能创造的价值。</li>
</ul>
<p>简而言之，我已经不会再怀疑我自己想要的究竟是什么。如果有时候在困难和挫折面前无法回想起当初的心情，那不过是方法上的问题，因为已经怀疑了够多次数，无需再去怀疑自己的目标究竟是否值得。」</p></blockquote>
<p>让一个从来只知道思考怎么玩的孩子，学会努力和对自己负责。那时，我不得不开始尝试这么做。</p>
<hr />
<p>马上迎来了高二上。我如愿进入了重点班，新的班级刚开始有点沉闷，大家都只是埋头学习；这种学霸氛围的压力让我也不得不紧张起来，平常收起了自己作死的一面，开始踏踏实实的学习了一段时间。出于迷一般的运气，我被分到了全班乃至全年级最好的宿舍，那时候我们拿成绩开玩笑，赌谁考到了宿舍前三要请吃饭；可我没想到，就在紧接着的月考里，我们宿舍除了雷打不动的年级第一和第二，其他的人却大失水准，而我则意外的进入了前十。请吃饭是当然的，随之而来的，就是这个几乎唯一主题是课内学习和考试的高二上。</p>
<p>值得一提的故事相对来说并不多。留下记忆的当属社团那难得让我略微有点青春的现实感的招新活动，还有校运会上实习老师为增进我们班级感情做的各种活动，其他的，除了各种绞尽脑汁压榨自己的时间，提高学习效率之外，大概就是利用自己的年龄优势，跑上跑下为报名来年的(少年班)高考做准备吧。新的班级明显变得有趣得多，能融入学霸们的圈子还是十分有趣，运气更好的是，分到的小组里的另外几个男生都是学霸和宅。</p>
<p>相比高一时和身边的现充同学们几乎无话可说，高二终于能不时的和同桌聊聊 Hifi 交换试听耳机和播放器，或者拿着「基础有机化学」和「普林斯顿微积分读本」各种讨论。印象最深的是一天下午，我问起圆周运动向心加速度的公式怎么求证，三个人于是就开始一路从班里聊回宿舍，动用了几何证明、坐标系和取极限等各种能想到的手段，最后勉强弄出了和标准证明思路近似的不严谨的证明。</p>
<p>终于在一次学校元旦晚会的晚上，无聊的思考着的我惊奇的发现从洛伦兹力出发能推导出电磁场的一系列定则和公式，激动的不能自已的我在晚自习结束后走上了讲台，宣扬了一番自己的成果。后来发现自己的推导还真是对的，不过只是个早已存在的考试用处不大顶多当促进理解的奇淫技巧罢了。</p>
<p>然而开始并不是重点，后来我一时兴起创造的这种晚修结束前的小课堂的模式居然成了风俗，在时常和我讨论的那两位同学同时也是学习委员的组织下，坚持了好一阵子。无非是同学们自行报名上来，然后讲点各学科的基础知识、有趣的解法或者未学的选修的黑科技。我无比的确信高一时我的牺牲没有错 —— 在这个班里，总算看起来不那么的让人讨厌。</p>
<p>高二的寒假前也就是新年，我写下了一篇标题为「2016 – 凛と伸び咲く.」的记录。单独成篇发布看起来更加奇怪，所以干脆就大段选摘在此吧。限于篇幅，一些具体的规划和方法就省去了。</p>
<blockquote><p>「又是一年元旦。</p>
<p>记忆中，两年前、一年前的元旦，都是在网络上一片热闹的度过。前年在YY语音里互道新年的声音仿佛就在耳边，半年后我却告别了百度贴吧；去年群里的景象虽然没留下太多的印象但也十分愉快，可半年之后我却已经停下了所有的项目和网站，在网络上变得悄无声息了。而今年的零点十分，我在洗澡，家人已经睡了，QQ 和 Twitter 寂静无声。</p>
<p>如果说，以寒假为标志的中二症晚期开始、对 evenBits 的挥别加处理后事是高一下学期的主旋律，那么以一个失败而不可或缺、平静而充满震荡的暑假分隔而来的，就是高二下学期以难以置信的速度完成的心理稳定和学霸 Level Up 了。今年各种事情的密度很高，并且通过博客、 Log 、邮件和 IM 留下了相当丰富的记录。可是记忆中，一如既往的，高二开学前的事情都恍若隔世。</p>
<p>「掐着秒表做梦」，这是个不太恰当但是可窥见一斑的描述。前半年的中二期现在自然是印象已淡，至于后半年，则是从反复无常到平实稳定，从热血中二到平和冷淡的过程。遗留下来的紧张感有气无力的支配着不算迷茫却总有点难再说出拼命的内心，不再是间断爆发而是如影随身的淡淡无力不时拉扯着蹒跚前行的脚步。总而言之，说差大概会愤懑不平，说好又会心有愧疚，却总觉得也不能冠以一个不上不下的称呼。「有很努力了」，「没有当初拼命了」，「本来应该做得更好」，「时间不允许不做的更好了」。大概就是这样的感觉。</p>
<p>因为情感和回忆太过混杂，文字也显得矫揉粉饰。大概旧的一年不得不得就这样盖棺定论，那么，新的一年呢？</p>
<p>新的一年里，我会迎来 3 月份的 [英语口语测试] 和 [生物竞赛] ， 6 月份的 [学测] 和 [中科大少年班高考] 。每一项都是唯一的机会，每一项都由不得马虎。不如说，我已经对自己的无力足够宽容，放弃到只剩下这几件必须做好的事情了。</p>
<p>新的一年里，我要面对的问题，却仍然很多。</p>
<p>……</p>
<p>「凛然独自开放」，经过了一个堪称中二可笑的，也只有自己知其中心酸的暑假，我终于能够对自己这么说道。我亲手抉择了我要坚持怎样的自己，也真的没有再怀疑。</p>
<p>努力最可怕的事情就是，越努力越清楚知道自己的极限在哪里。虽然现在不能妄言已经尽力，却也知道不可能一个决心一个拼命就能让自己超神无敌了。看着明显与目标相去甚远的现状，却除了在心急如焚的同时踏实逐个慢慢面对之外别无它法。</p>
<p>…… 要考上，要认真考，要考上。</p>
<p>从很早开始就已经没有再质疑过或者动摇过了，哪怕偶尔会担心在落榜之后回看会多么可笑，但是却不打算考虑放弃。</p>
<p>那么，就来面对问题吧。</p>
<p>……</p>
<p>已经没有任何余地了，我必须以自己最好的、以及比最好还更好的姿态去迎接这些至关重要的挑战，即使清晰的知道这一切不是终点，而是无数痛苦的浴火重生的起点。</p>
<p>所以，这一年，我告诉自己，凛と伸び咲く。凛然独自开放，我为这句话赋予了更多的含义。</p>
<p>**凛然** 独自开放，是不在意他人的眼光。因为你身后已经没有任何人了，你要面对的、负责的只有自己。不要在意周围平庸的人的看法， **离开他们，飞向更高更远的地方** 。坚持自己所持的信念，保持一份哪怕是幼稚可笑的、对前方美好的热切向往。</p>
<p>凛然 **独自** 开放，是对自己的完全负责。如果失落难受，那就痛快的哭，如果哭不出来，就滚回去学习。不要乞求别人的理解和安慰，不要含沙射影的寻求心理平衡，因为你早就知道，最终将一无所获。 **到能理解你的人身边，用努力和成绩证明自己** 。绝不能再放弃思考放纵自己，因为除了你自己，没有人把你拉出这无底深渊。</p>
<p>凛然独自 **开放** ，是尽情的展示美丽。不要害羞含蓄，哪怕张扬会带来更多的挫折失败。新的一年，要变得更加可爱，更加温柔，更加接近想成为的自己。想成为 Haruhi ，就去找外星人、未来人、异世界人、超能力者。做出了选择，就去拼命创造奇迹。</p>
<p>……</p>
<p>一周前留宿学校时，和同学谈起大学的目标和志向时，对方出人意外的说了句直入我心坎的话：平日里锋芒毕露的人，可能不一定有很长远的志向；但凡真正想装个大逼的，往往反而知道隐忍。这话虽然说得没有情怀，却是事实所在。</p>
<p>高中对我来说，是第一次学会收起自己的羽毛，隐忍而积蓄力量的时候。也许我的高中，更多的与只身一人的挣扎和痛苦为伴，相比小学的收尽眼前风光，初中的无意之间错过，是真正眼睁睁亲手放开了无数的诱人的机会。不论是网络上还是高中生活，我都只能看着他人博得掌声与喝彩，而自己只能步伐蹒跚，咬咬牙继续前行在自己的路上。但我相信，这一切不是我为自己无能找的借口，最后的最后，自己会抵达旁人所无法涉及的地方。</p>
<p>世之奇伟、瑰怪、非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。</p>
<p>伝えてこの想い 风よ星よ，信じて待っていることを。」</p></blockquote>
<p>啊，写的蛮中二的。不过我喜欢。</p>
<hr />
<p>对高二下，我的评价一般是「简直 bullshit」。用个形容词，就是糟心。寒假时的计划里我这样写：</p>
<blockquote><p>「一言以蔽之，死到临头了。 …… 适应性测试基本确定没法考，一模无法准备，二模基本是唯一机会。接下来的半个月内生物竞赛和听力是头等要务，做好睁眼见闭眼见梦里见的准备。自己作的死，含着泪也要做完。」</p></blockquote>
<p>相比显得相对平淡的高二上，这学期则是一点都不安稳。因为学校和地区软硬件条件最后放弃了强省弱市的 NOIP 的我，选择了最后在好歹是弱省弱市的生物竞赛尝试一下。另外，当时并没有预料到生物竞赛市内能领先出线的我没为此计划太多的时间，所以一开始的主题当然就是并不是很有信心，但是不管怎么说也得全力以赴的挑战一次的高二高考。</p>
<p>除了学习以外值得一提的事情应该还有些许，不过马上能想起来的不过是久违的捡起了代码和设计，和同桌给班里写了个基于 Django with Python 的带随机点名、语音提示、加减分、历史记录和人品计算等功能的课堂助手。个中有趣的事情也不少，但也不得不承认朋友的增多和对高中生活的适应，让学习略微松懈了一点。</p>
<p>学期初的我面临的问题众多，加上上学期一路高走的排名遭到了挫折，使得我开始为焦虑困扰。不得不说，当时读到的几本书对改善我的完美主义和降低焦虑、心里控制有了极大的帮助。但是我终于在连番的失败和压力中，一时间失去了对自己状态的把握，我在后来的记录中写道：</p>
<blockquote><p>「事实上，本学期的主要问题在于开局不利。以探索和混沌为主题的寒假结束后，带着期末不顺和迷茫的心情我来到了新的一学期。以往，我都会在学期伊始，马上提高要求，争取尽快领先；虽然最后总是失败，但是无论如何是给接下来抓住机会，创造决定性突破奠定了基础。但是这学期初几周，我的精力竟然先是在迷茫，随后决定「提高幸福感」上；当然不可否认这个进步的意义，然后随后我又开始了文化和技术方面的「重拾感觉」，这些事情加起来，我可以说本没有约束的学期初期就被消耗掉了。</p>
<p>……</p>
<p>寒假是对追求、动力和自控的探索，在学期初解决了焦虑和幸福感低下的问题后，在面对接踵而至的考试过程中树立了一个完善可靠的自控系统。在情况显得愈来愈好的时候，却被生物竞赛忽然打断，其中收获颇丰，但对其他事情不管不问的做法，也大大延误了课内的任务和计划。 …… 虽然总体上收获还是更多，但是这种初中继承下来的「单线程、对其他事情不管不顾」的做法，已经愈发显得成就和不完善，多半是不应该有下一次了。」</p></blockquote>
<p>大意是，我在备考生物竞赛的时候，仍旧采用的是和初三那时「<a href="http://blog.dimpurr.com/no-impossible/" target="_blank">Nothing is Impossible.</a>」中写过的、类似于临时抱佛脚的仓促而极端的方式。准确一点的说，这也是过去的我常使用的方式：不计成本、不计客观情况、抛下所有的其他必要和不必要的事情只关注一件事的不合理的冲刺方式。这只是一方面；另一方面，也正因为我在自己的关心的目标，学业抑或技术上受挫了，我终于有机会，尽管不合时宜的发现这一点：我对于自己感兴趣的事情以外的太多事情，换句话说关于生活，关注的实在太少了。</p>
<p>所以这学期，在这种小地方当然很难找到同类的伙伴，我可以说是一定程度无视了学校的授课进度而焦头烂额的独自投入到了竞赛和高考中，也终于有了一定合理而有条不紊的、科学的学习和规划能力。除此之外最大的变化，就是我开始重视起了自己从未重视过的东西，生活、健康、人际关系、家庭、亲情，如此等等。在此之前，我尽管在自己的世界里很耀眼，但是在实际的生活中大概并不是一个那么讨人喜欢和积极的孩子；而这个学期，一定程度的以成绩为代价，我想自己离自己心目中的成熟稍微接近了一点。今后还会有更多的机会，在此就不过多的描述了。</p>
<p>具体的故事限于篇幅和时间这次不便再讲，简单地说，我只能疲于应付一个又一个挑战，最后的结果也不算奇怪的并不成功，相比之下过程和经验的意义还显得更大一些。备考生物竞赛前，和学校申请不参加期中考，停课一周每天骑车去图书馆自习室的记忆还十分鲜明，在省实参加考试时，见到来自各地的学霸们、了解到自己求而不得的全然不同的高中生活的感觉自然难以言表。然而我也不讳言，这次的结果最终只有毫无意义的名次，甚至还比不上纯属运气的物理竞赛全国奖的价值。</p>
<p>另一边的高考，更是在模考只有二A的情况下应付完竞赛就仓促上阵，在两个月提分近 100 的情况下，结果除了给学校贡献多了一名重本人数之外，仍旧距离有意义的分数线千里之遥。关于高考前后的逸事也不少，不过经历过的人才知道在广东高考和高二政史地学测三天连考有多痛苦。高考第一天的前夜借同学的宿舍，然而陌生的床位上蚊帐根本关不住，于是那个又热又有三四只蚊子陪伴的夜晚我愣是直到四点半才睡着，第二天就那么硬生生的上了考场。还好刻意调整了几天睡眠的自己状态并不会太差，和真正的高三学生并不太一样、以及自己这学期各种折腾练出来的心理素质也还算过关，除了高考发挥正常，学测也没有差错的保住了全 A ，不必担心给高三留下什么心理负担了。</p>
<p>到最后，如果你可以否认现实和结果的话，只为自己的所谓努力自我感动和陶醉当然是很简单的。可是竞争是冷酷的，没有人会同情你，无论你多努力，还是根本没有努力；无论你过去有多不堪，到今天这一步已经多么不容易。所有争辩全无意义，失败就是失败，仅此而已。</p>
<p>回看当时的记录，五味杂陈。</p>
<blockquote><p>「对这 100 天的自己，我的态度是：</p>
<p>无所谓，我就是想试着逼一下自己。想再一次认真的试一下，自己能做到多好。想离那些自己所喜爱的身影更近一点，想能够和他们一样。想尝试用一件事情把自己的每一天填满是一种怎样的感受，想试试一心一意、专注于目标的感觉。</p>
<p>就是达不到所谓的「目标」，我也有办法活下去。但是我享受为「目标」所困扰的过程。仅此而已。</p>
<p>好事是，自己摒弃多余的关注点和活动之后，能够让自己更加全心全意的面对自己生活的核心问题：学习，和心态问题。焦虑、拖延、完美主义、缺乏安全感，这些困扰自己已久的问题；如何与自己、与事情相处；然后，如何计划，如何利用时间，如何学习。一步步的来，会好的。</p>
<p>……</p>
<p>我如何选择我的生活？</p>
<p>我选择面对每一个现在。学会把未来摆在不远不近的位置。学会思考如何更好的度过每一个今天。学会不闹情绪，听从自己的话。踏踏实实的做好应当做的事情，然后给自己留出时间，面对自己和真正的问题。这是接下来的 100 天，还有一生中，将要切实去做的。</p>
<p>我希望到哪里去？——这固然很重要，但是更重要的是，曾经我希望现在的我身处何方，现在的我希望我现在正在做着什么？</p>
<p>我想，我希望这 100 天里，我变得更加成熟。能冷静的思考，不再为孤独而恐慌，与自己相处，学会听从自己的话语。然后，不再逃避、自暴自弃，而是踏实认真的去面对一直以来困扰自己的问题，面对自身的责任和负担。与此同时，同样最重要的，就是面对高考这项挑战，用这 100 天的表现，证明自己的可能性。</p>
<p>一定可以做到的。因为一直以来，现在仍旧在努力着。</p>
<p>再答应自己一件事：一定不要停下和自己的对话。世界仍旧有趣，不要沉浸在容易醉人的忧郁。在完成任务之前，不要让自己失控。……在那之后。」</p></blockquote>
<p>竞赛前的记录中，我写：</p>
<blockquote><p>「我曾经憧憬过很多的剧本。有所谓蔷薇色的高中生活，有所谓学霸的奋斗历程，有很多动画中故事中描写的、他人转述的经验和经历。我曾经不止一次站在其中一个剧本的起始，我也很清楚，究竟有多少次的机会我已经亲手放过。</p>
<p>现在，我再一次站在了，拥有一切可能性的剧本的起始。这一次，我能像故事里的主人公一样，精彩的书写下动人的过程、炫目的结局么？</p>
<p>……</p>
<p>我希望通过这次的机会能提醒自己，怎样对自己负责，怎样关注重要的事情不在意他人无谓的看法，怎样抓住机会，怎样亲自书写自己憧憬的剧本；同时解决困扰自己两年之久的假期和自习问题，解决许多潜伏已久的家庭关系和心理认识问题，与之前一直无法面对的感情「和解」，继而用全新的在家学习效率迎接最后一个逆袭的暑假，用全新的自控体系面对下一阶段的学习。」</p></blockquote>
<p>想想并不难理解，绝决的抛弃现在、在似乎快要看不到希望的时候也不放弃、咬牙坚持到最后，这并不可能是没有任何困难就可以做到的事。非要说的话，高二下的我仅仅是对于从高一下开始的长途跋涉略微有些失去了信心，所以方向也显得不够坚定。只是所有的挑战仍旧如约而至，我无法逃避。</p>
<p>我想，故事最后的走向不算糟糕，当初计划的要达成的其他事情我大多还是做到了吧。除了最重要的，结果本身。</p>
<hr />
<p>高二下，我因为独自准备竞赛和高考，在校内的排名一路下跌。一切都结束后的一调，我终于能够静下心来好好备考一次，也成功的从近 70 多名回到 10 名左右。在很久之前我就已经稍微想到过竞赛和高考结束后的规划，那时我写：</p>
<blockquote><p>「大概到时候学习上的战略，就是先重建经过高二下修饰的高二上系统，再在以可能的最高状态基础上另寻他变吧。」</p></blockquote>
<p>失败归失败，但是对于高二上一定程度感受到了成绩提升瓶颈的我，应该说在高二下的这段经历还是很有价值的。首先迎来暑假的我，无非就是在补课、规划高三和一趟上海之旅中度过了短暂的不到一个月的假期。</p>
<p>这次的旅行相比小时候的普通观光，应该说是一次目的很明确的出行：我没有去任何文化和娱乐景点，我直奔这里的大学和图书馆，我游览了陆家嘴和各种文化场所，了解这里的中学、大街小巷和日常生活。相比初三时参与活动和参观学校、科技公司为主的那趟北京面基之旅，这次除了被 Thiece 君拿去凑数听了个小的技术交流活动之外，没什么和技术搭边的事情，毕竟高中两年消失在社交网络的我已经没有太多可以联系的朋友了；我更关注的也许是外文书店的 Animate 和人民广场站的 MisterDonuts ，小忍最喜欢吃的甜甜圈。</p>
<p>我要为自己的大学和未来的生活选择城市。</p>
<p>留下了 3000 张照片和对一个地方、一种生活方式的深刻印象，以及带回一袋本子和一袋「本子」的战利品之后，我并没有过多的再逗留下去。很快就是新的学期，就是现在。</p>
<p>在高二下的记录里，我还曾经写：</p>
<blockquote><p>「问题并没有那么复杂 —— 前进是痛苦的，然而我只是开始畏惧这份痛苦。</p>
<p>我用「听话」描述了我上学期期末和这学期初的状态 —— 认真享受老师的确可以称之为精彩的课堂，认真完成作业，认真和优秀的同学们讨论。每一天都很充实，都很棒，除了我在完成任务，表现的完美无缺之外，同时放弃了对自己究竟学到了多少认真负责之外。</p>
<p>从寒假开始我就在试着调整心态。不管是「克服」了完美主义还是在每个早上调整心情，是用习惯取代了不合理而过分的自我要求还是更多「直面」或者「逃避」焦虑的小技巧，我成功了 —— 让我的日子变得很好过，变得无可指责。</p>
<p>我对外用的口径是，正是因为这样，我才学的还不如之前虽然可能不听课、不按要求做作业，但是自己在认真对自己负责，认真做了自己的选择和付出的时候。可是我心底里知道，我究竟害怕的是怎么回事。</p>
<p>我很害怕，害怕自己体验到快乐，然后一旦觉得快乐，就会觉得这样就够了，就会开始懒惰，开始驻足停步，闭上眼睛不再望向下一个地方。学名叫舒适区，这是冠冕堂皇的说法。</p>
<p>冠冕堂皇的说法，不那么好听的版本就是不逼就会懒。但是我知道我真正害怕的其实是，相比之下，我的状态可以称之为是「适应」了。</p>
<p>是啊，找到了最适合现在的生活方式，和其他人一样，享受学习，享受生活，享受好今天；然后，以最「适合」现在的生活方式，走向最「适合」现在的终点，然后奔向下一个既定的地方。如同链式反应一样 —— 我曾经用「一眼就能望到终点」来描述 —— 如同命运一般，默默前行。</p>
<p>企鹅罐里说，「我讨厌『命运』这个词。出生、相遇、离别，成功和失败，人生的幸运与不幸，如果这些都是由命运事先决定好了的话，那我们又是为何而生呢？」</p>
<p>我曾经用过这样的话来描述环境的影响相比个人的决心是微不足道的：「如果你是年级前十，你需要在意这所学校的本科率是怎样的么？只有优秀率对你才有意义了。」在那天下午的对话中，我并没有那么明确的意识到现在的问题的本质，可那天我的全部话题和回应，已经潜意识中说出了我究竟在担心什么。</p>
<p>嗯，把问题描述的简明扼要一点吧。</p>
<p>我怕自己不再贪心了。」</p></blockquote>
<p>当我开始以我是年级第几来定义自己的时候，当我开始斤斤计较身边的同学何以在排名上高过自己的时候，我就只是这个学校小池塘的一个还算可以的学生，我就不再是那个拥有更广阔的世界，拥有无限可能性的自己了。这就是我高二下所一直处于的，也是暑假的我期望能够结束的状态。</p>
<p>当然我还是做到了。我开始不断的提醒自己调整心态注视远方。我重振旗鼓再度踏上了为自己梦想的大学和城市努力的路程，这次是真正的高考。这学期初我终于解决了许多积存已久了听课和作业的问题，月考是之前还未达到过的年级第四，这是个好的开始。</p>
<p>我和自己说，「一手好牌，可别打坏了呢」。</p>
<p>前几天没忍住在草稿纸上摸鱼了起来，却意外的发现自己的伯里曼人体没白练，总算能画出可以萌到自己的画了 ……。小说尽管没有哪篇最终成文的，练习短篇倒是有一堆，对自己的文风也是相当满意。还没到可以晒出来的程度呢。想想距离自己能画出本子估计还要好一段时间，不过说不定可以开始构思第一部漫画的剧情脚本和人设了吧？高中以来，相比初中单纯的专注于代码和设计，在历史、经济学、社会科学方面的阅读也不少。不过前端算是被彻底搁置了，不过有了更好的基础，大学再捡起来也为时不晚吧？嘛，现在最重要的总归是学习呢。</p>
<p>我写：</p>
<blockquote><p>「我想回到那个世界。</p>
<p>不是以后，就是现在。现在就可以，证明自己有实力做到。</p>
<p>因为啊，至少在这漫长而曲折的，混合了探索和迷茫的已经走过的道路中，有一件事我还是明白了的。</p>
<p>没有时间永远不会是问题，因为在因为觉得没有时间而紧张兮兮后，你仍旧很可能在大把大把的浪费时间。更重要的是，没有时间是如此幸福的一件事，因为当自己觉得时间不够时，时间才真真正正的在自己的手中。」</p></blockquote>
<hr />
<p>终于迎来了结尾。</p>
<p>困意已经十分浓重，虽然深夜写这样的文章也不是一次两次，但是高中并不那么适合这样做。本来我大概想用更多的篇幅来描绘下现在的自己，或者谈谈和对未来的想法，但是至此我大概只能以远远超出预想的万字长文的过往经历代替它们，然后尽快草草结束。</p>
<p>很快就会有机会再详叙的，不是吗？不过半年多而已了。</p>
<p>高中生活我留在公开的站点上的记录不多，博客更是基本放置 Play ，唯一有变化的，也许只有每逢画画时大概会更新一下的 <a href="https://twitter.com/myccyycy" target="_blank">Twitter</a> ，还有坚持不懈的标记动画的 <a href="http://bgm.tv/user/myccyycy" target="_blank">Bangumi.tv</a> 。各种群聊自然也是没有时间看了，要联系我的话，也许只能直接 QQ 私信吧。</p>
<p>不多谈各种领域的书籍，只提下高中在个人成长方面我认为对自己有一定影响的书，按我接触到的时间顺序依次是「暗时间」「习惯的力量」「心理控制方法」「专业投机原理」。同样很重要的就是动画了，高中之前看过的有「冰菓」「龙与虎」「樱花庄的宠物女孩」「CLANNAD」「Angel Beats!」，高中按时间顺序依次「吹响吧！上低音号」「回转企鹅罐」「结城友奈是勇者」「ef – a tale of memories.」，和并没有动画的「Narcissu」。我计划做一个单独的页面，收藏我喜爱的动画、书籍、设备 Setup 等等并加以评论，届时再写写详细的感想吧。</p>
<p>高中以来，能谈起学习方法、关于未来和动力的迷茫等话题的人并不是完全没有，但总归很不尽兴；在自己感兴趣的领域中，离开了网络，现实中更是难以找到对互联网和设计、 ACG 作品和业界、哲学历史社科文学和科学科普有与自己一样的趣味的人了。当然，我也并不指望很快就能找到这样的同好；因为高中生活和环境的限制，无法放开手脚的利用互联网或者各种方式去寻找，也许我需要耐心等待大学生活的到来。</p>
<p>尽管很多事情已经改变，后来也又发生了许多，但高一时留下的话语并没有失效。那时我写：</p>
<blockquote><p>「希望能和善于思考、敢于创新、不墨守成规的优秀的人在一起，做有创造力、能让世界变得更有趣的事情。具体的实现方式是，在好的大学和创业、工作单位中，与杰出的人一起做改变世界的产品，在业余进行同人创作。</p>
<p>希望自己成为有独特见解和能力、能依照自己的原则率真待人处世的人，在感兴趣的领域小有名气，作品能为读者、用户带来乐趣或感动，能通过自己的才能给祖国和世界带来些改变。</p>
<p>除去学习，希望高中阶段能改正自己主要的性格缺陷，以一个较为完善的人格进入大学。希望自己能在空余时间尽可能的积攒一些专业知识，以供大学有足够的时间时做好准备。」</p></blockquote>
<p>时间并不剩下很多了。按照日程和规划，月考结束后接下来紧接着就是二调。距离阶段性的目标分数还有距离，目前的情况并不太乐观。明天就要返校，很快得重新投入到新的挑战中去。</p>
<p>但是，还是可以有信心的，不是么？</p>
<blockquote><p>ひとりでもゆくよ例え辛くても<br />
きみと見た夢は必ず持ってくよ<br />
例え辛くても寂しさに泣いても<br />
心の奧には 溫もりを感じるよ<br />
—— 「Girls Dead Monster – 一番の寶物」</p></blockquote>
<p><em>全文 1W6 字符，BGM「Yun*chi – Your song*」单曲循环，写作环境 Byword with OS X 。</em></p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/euphoric-field/">euphoric field</a></p>]]></content>
        
        <summary type="html">
            
            大概已经过了许久，没有再动手写一篇不止是给自己看的文章了。 明天早上返校，所以大概没有那么多时间构思和修改。并不是真的多么在意这在别人眼中会怎样 —— 更重要的是，随着时间沉淀下来的这篇文章，在以后的自己眼中将会怎样。 无意间翻阅 Google Keep 中两三年前的 Note
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="回忆"/>
        
        <category term="成长"/>
        
        <category term="日常"/>
        
        <category term="青春"/>
        
        <category term="高中"/>
        
    </entry>
    
    <entry>
        <title>bash on windows 发行版升级</title>
        <link href="https://www.261day.com/bash-on-windows-%e5%8f%91%e8%a1%8c%e7%89%88%e5%8d%87%e7%ba%a7/"/>
        <id>https://www.261day.com/bash-on-windows-%e5%8f%91%e8%a1%8c%e7%89%88%e5%8d%87%e7%ba%a7/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2016-09-11T02:14:59+08:00</published>
        <updated>2016-09-11T02:14:59+08:00</updated>
        
        <content type="html"><![CDATA[<p>在windows10周年纪念版里面微软推出了黑科技bash on windows。微软通过对windows内核加了一层linux的wrapper使得大多数linux程序可以运行在windows上。为了方便用户使用，微软又把ubuntu 14.04的镜像预置在系统内。</p>
<p>稍等……14.04？这个版本已经停止维护了啊，微软这做的不厚道啊</p>
<p>sudo upgrade-manager 诶，等等，报错了</p>
<p>不能升级绝对不可能的，就算是官方的做法不能升级也有其他方法能做到。在某外国程序员同性交友（雾）网站找到了解决方案：</p>
<p>一：先执行某黑科技的发行版升级命令</p>
<blockquote><p>sudo do-release-upgrade -f DistUpgradeViewNonInteractive -d</p></blockquote>
<p>执行命令的时候程序会在一般卡死，卡死的位置在一个配置文件是否覆盖的问题之后，如果卡死在别的地方那就怀疑是你人品不好。卡死之后强制结束掉这个</p>
<p>二：执行修复命令</p>
<blockquote><p>sudo dpkg –configure -a</p></blockquote>
<p>执行命令的时候如果遇到sudo不能访问tty的时候加上-S参数</p>
<p>三：执行日常的软件升级</p>
<blockquote><p>apt-get update</p>
<p>apt-get dist-upgrade</p>
<p>apt-get autoremove</p></blockquote>
<p>这之后就享用啦。终于可以方便的编译c++14啦</p>
<blockquote><p>manageryzy@MANA:/mnt/c/Users/manag$ sudo lsb_release -a<br />
No LSB modules are available.<br />
Distributor ID: Ubuntu<br />
Description: Ubuntu 16.04.1 LTS<br />
Release: 16.04<br />
Codename: xenial</p></blockquote>]]></content>
        
        <summary type="html">
            
            在windows10周年纪念版里面微软推出了黑科技bash on windows。微软通过对windows内核加了一层linux的wrapper使得大多数linux程序可以运行在windows上。为了方便用户使用，微软又把ubuntu 14.04的镜像预置在系统内。 稍等……1
            
        </summary>
        
        <category term="原创"/>
        
        <category term="bash on windows"/>
        
        <category term="升级"/>
        
    </entry>
    
    <entry>
        <title>奥运终于完了喵……</title>
        <link href="https://yoooooooooo.com/yukari/?p=84"/>
        <id>https://yoooooooooo.com/yukari/?p=84</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2016-08-25T12:08:19+08:00</published>
        <updated>2016-08-25T12:08:19+08:00</updated>
        
        <content type="html"><![CDATA[<p>早班晚班天天轮着上的日子终于结束了QAQ</p>
<p> </p>]]></content>
        
        <summary type="html">
            
            早班晚班天天轮着上的日子终于结束了QAQ  
            
        </summary>
        
        <category term="日常"/>
        
    </entry>
    
    <entry>
        <title>八月啊……</title>
        <link href="https://yoooooooooo.com/yukari/?p=66"/>
        <id>https://yoooooooooo.com/yukari/?p=66</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2016-08-03T20:56:26+08:00</published>
        <updated>2016-08-03T20:56:26+08:00</updated>
        
        <content type="html"><![CDATA[<p>公司居然要奥运支援……这样的话有很多休息时间的8月也忙的要死呢……</p>
<p>大概会有多长时间呢？我也不知道……</p>
<p>不过好在认识了更多的伙伴❤</p>]]></content>
        
        <summary type="html">
            
            公司居然要奥运支援……这样的话有很多休息时间的8月也忙的要死呢…… 大概会有多长时间呢？我也不知道…… 不过好在认识了更多的伙伴❤
            
        </summary>
        
        <category term="日常"/>
        
    </entry>
    
    <entry>
        <title>守夜人公会-20160720集体合影</title>
        <link href="http://www.eric21.com/2016/07/21/483"/>
        <id>http://www.eric21.com/2016/07/21/483</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2016-07-21T09:12:33+08:00</published>
        <updated>2016-07-21T09:12:33+08:00</updated>
        
        <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/131143436@N06/28434877675/in/dateposted/"><img src="https://c4.staticflickr.com/9/8564/28434877675_4c19ff570a_o.jpg" /></a></p>
<p><a href="https://www.flickr.com/photos/131143436@N06/28402250986/in/photostream/"><img src="https://c3.staticflickr.com/9/8499/28402250986_67014657ca_o.jpg" /></a></p>]]></content>
        
        <summary type="html">
            
             
            
        </summary>
        
        <category term="魔兽世界"/>
        
    </entry>
    
    <entry>
        <title>iOS 10在操作逻辑上的一大进步喵</title>
        <link href="https://yoooooooooo.com/yukari/?p=59"/>
        <id>https://yoooooooooo.com/yukari/?p=59</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2016-06-14T13:31:09+08:00</published>
        <updated>2016-06-14T13:31:09+08:00</updated>
        
        <content type="html"><![CDATA[<p>如果你已经升级到iOS 10的话你会发现锁屏状态栏中间多了一个锁的图标。什么意思呢喵？就是你手机目前锁定。此时触摸Touch ID时就会解锁，但不会进入桌面。这时在锁屏上进行App相关的任何操作都会直接进入手机App而不需要再输入解锁密码。</p>
<p>那么为什么要按压Touch ID解锁进入桌面呢？其实是为了给用户在锁屏下更方便的使用Siri。之前的话锁屏的时候呼叫Siri，Siri在执行之前先跳出密码框让你解锁，体验并不流畅；现在摸一下Touch ID解锁（不是按压），然后嘿Siri，Siri就会直接帮你做事。这就是为什么你要按一下Touch ID才能进入桌面，如果亮屏后你摸一下Touch ID就能进入桌面的话，那你锁屏进行任何操作的结果只能是跳出密码框的糟糕体验。</p>
<p>而如果只是想看看通知和时间等内容而不想解锁怎么做呢？苹果还引入了抬腕亮屏功能。</p>
<p>另外一个特性就是快速进入应用。现在很多软件已经集成有通知栏快捷入口。这在iOS 10非常方便，举例一下，在商店买东西，大陆用户最经常使用支付宝付款或者扫一扫，只需要抬手自动亮屏后摸一下Touch ID（解锁），然后向右滑动点击支付宝的付款或者扫一扫就能直接进入付款或者扫一扫的界面。果按照之前的解锁逻辑，亮屏后摸Touch ID就解锁进入主界面的话那这些功能在锁屏就没有实质意义了。</p>
<p>所以现在Apple实质上让更多的“即点即用”功能跳过了“进入主屏幕”这个阶段，将之前的操作更加简化。同样是左滑，之前是进入主屏幕，现在是将搜索、快捷功能、Siri放在一起的一个扩展界面。如果还是直接进入桌面要怎么做呢？点按Touch ID就可以了喵，和之前相同。这是苹果在引入Touch ID之后做出的一系列变化（通知中心扩展、Siri、搜索功能增强）之后的最终结果，将多个功能的实现方法重新考虑并更加简化。Meow~</p>]]></content>
        
        <summary type="html">
            
            如果你已经升级到iOS 10的话你会发现锁屏状态栏中间多了一个锁的图标。什么意思呢喵？就是你手机目前锁定。此时触摸Touch ID时就会解锁，但不会进入桌面。这时在锁屏上进行App相关的任何操作都会直接进入手机App而不需要再输入解锁密码。 那么为什么要按压Touch ID解锁
            
        </summary>
        
        <category term="日常"/>
        
    </entry>
    
    <entry>
        <title>【WOW】那些年我加入的公会</title>
        <link href="http://www.eric21.com/2016/05/22/470"/>
        <id>http://www.eric21.com/2016/05/22/470</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2016-05-22T21:50:19+08:00</published>
        <updated>2016-05-22T21:50:19+08:00</updated>
        
        <content type="html"><![CDATA[<p><a href="http://www.eric21.com/wp-content/uploads/2016/05/小白.jpg"><img src="http://www.eric21.com/wp-content/uploads/2016/05/小白-1024x468.jpg" /></a><br />
麦维影歌，【玩这么久还被人喊小白】公会（联盟）<br />
刚刚转服到麦维影歌服务器的时候，在世界频道喊话求公会的时候，被拉进来的公会。<br />
一晃四年了。公会的人确实都是傻傻很天真的小白，大家都好善良。<br />
认识了这个公会的大腿+王牌指挥孙一谨是我玩wow最幸运的事。</p>
<p><a href="http://www.eric21.com/wp-content/uploads/2016/05/QQ图片20160522181016.jpg"><img src="http://www.eric21.com/wp-content/uploads/2016/05/QQ图片20160522181016.jpg" /></a><br />
玛法里奥，【守夜人】公会（联盟）<br />
2014年发生了一件大事，玛法里奥，麦维影歌，法拉希姆，三个服务器合并了，原来的鬼服一下子热闹了起来。<br />
因为小白公会的主要成员基本都AFK了，我也只好换公会投靠其他大腿，这期间我去了【豪门】和【黎明】两个公会，但是这两个公会的气氛我都不喜欢。<br />
于是我到多玩和NGA发帖，寻找天津人多的公会。<br />
我在世界频道求天津人公会的时候，【滴水】拉我入了这个公会，一直到现在我的主号还在这个公会。<br />
这个公会的人都很友善，也不搞副本开荒奴隶剥削制，挺适合我这种休闲玩家。</p>
<p><a href="http://www.eric21.com/wp-content/uploads/2016/05/11192601_1634348563454700_1438692190_n.jpg"><img src="http://www.eric21.com/wp-content/uploads/2016/05/11192601_1634348563454700_1438692190_n.jpg" /></a></p>
<p>会长是个很厉害的原画师，公会的LOGO都是他原创设计的，上图为公会纪念马克杯。<br />
2016年4月30日第一次参加了公会的线下聚会，众人从北京，山东，上海赶来天津相聚一堂，大家都玩的很嗨，留下了很美好的回忆。</p>
<p><a href="http://www.eric21.com/wp-content/uploads/2016/05/111114-1.jpg"><img src="http://www.eric21.com/wp-content/uploads/2016/05/111114-1-1024x998.jpg" /></a></p>
<p>麦维影歌，【避风港】公会（部落）<br />
那年暴雪举办了【艾泽拉斯重型摩托制作挑战赛】，我为了拿部落的摩托车坐骑，叮了一个90级的血精灵牧师。<br />
本来我们服的部落就是比稀有精英还珍稀的物种，我在双月殿被人拉入会之后，就看到了一个完全不同的世界。<br />
避风港的会长是个萌妹子，叫七七。她很久以前来自联盟的【豪门】公会。</p>
<p>这个公会的人都很有趣。<br />
场景A:<br />
七七：魔兽电影要上映啦！大家一起去电影院看电影，北京的人多就去北京，天津的人多就去天津，然后留下好多回忆！哈哈<br />
公会的某人：我永远忘不了带着七七打副本。刚开怪，七七就躺尸了，还对我们说：你们打吧，我就不活着添乱了。</p>
<p>这个公会还有个传奇一样的人物，【魔法飘零】亡灵法师，野外PVP神人，一对N也总能全身而退，颇有当年三季稻的风采，但是飘零从来不杀小号。<br />
部落弱势的服务器，他们生存很艰难，但是在飘零身上我完全看不到这种感觉。<br />
随着合服，这个公会的主要成员都加入了玛法里奥的【诸神的黄昏】公会。<br />
随着这个公会主要成员的AFK，这个公会也没落了下去。</p>
<p><a href="http://www.eric21.com/wp-content/uploads/2016/05/74fb4f75jw8eruyb2qsq5j21hc0u00xk.jpg"><img src="http://www.eric21.com/wp-content/uploads/2016/05/74fb4f75jw8eruyb2qsq5j21hc0u00xk-1024x576.jpg" /></a></p>
<p>玛法里奥，【诸神的黄昏】公会（部落）<br />
为了部落的坐骑，我又叮了个100级的血精灵法师，找现任诸神的会长，菜菜妹子入了会。<br />
公会QQ群每天都很热闹，群成员比守夜人的群多2倍。现在是本服最大的部落公会了。<br />
真是像打开了新世界的大门一样，部落的人文风情十分丰富多彩，妹子也很多，以前完全不知道。<br />
我刚加入时间不长，期待以后留下更多的美好回忆吧！</p>
<p> </p>
<p>最后的，也是最重要的，我想说的就是。我玩了这么多年魔兽世界到底玩出了什么？</p>
<p>我的答案是，我交到了好多好多好多朋友！</p>
<p>すげたのしかった！</p>]]></content>
        
        <summary type="html">
            
             麦维影歌，【玩这么久还被人喊小白】公会（联盟） 刚刚转服到麦维影歌服务器的时候，在世界频道喊话求公会的时候，被拉进来的公会。 一晃四年了。公会的人确实都是傻傻很天真的小白，大家都好善良。 认识了这个公会的大腿+王牌指挥孙一谨是我玩wow最幸运的事。  玛法里奥，【守夜人】公会
            
        </summary>
        
        <category term="魔兽世界"/>
        
    </entry>
    
    <entry>
        <title>不同编译器下系统开方运算性能测试（已更新Linux版测试）</title>
        <link href="https://www.261day.com/%e4%b8%8d%e5%90%8c%e7%bc%96%e8%af%91%e5%99%a8%e4%b8%8b%e7%b3%bb%e7%bb%9f%e5%bc%80%e6%96%b9%e8%bf%90%e7%ae%97%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95/"/>
        <id>https://www.261day.com/%e4%b8%8d%e5%90%8c%e7%bc%96%e8%af%91%e5%99%a8%e4%b8%8b%e7%b3%bb%e7%bb%9f%e5%bc%80%e6%96%b9%e8%bf%90%e7%ae%97%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2016-05-07T19:56:56+08:00</published>
        <updated>2016-05-07T19:56:56+08:00</updated>
        
        <content type="html"><![CDATA[<p>前两天看到一篇文章提到了用MagicNumber来做神奇的导数开方运算，于是我打算试一试测试系统的函数的性能</p>
<p> </p><pre>#include &quot;stdafx.h&quot;
#include &lt;math.h&gt;
#include &lt;time.h&gt;

#define MAX_SIZE 100000000
double data[MAX_SIZE];

void test() {
	for (int i = 0; i &lt; MAX_SIZE; i++) {
		data[i] = sqrt(i);
	}
}

int main()
{
	int t1 = clock();
	test();
	printf(&quot;%ld ms&quot;, clock() - t1);
	getchar();

	for (int i = 0; i &lt; MAX_SIZE - 1; i++) {
		data[i] = data[i + 1];
	}

    return 0;
}</pre><p>以上这段简短的程序就是我写的来测试性能的代码。<strong>注意：后面的的重写这个数组是为了防止编译器优化把计算的循环给优化掉</strong>。</p>
<p> </p>
<p>测试机器是我的笔记本</p>
<ul>
<li>CPU：Intel i73517U  @2.7GHz</li>
<li>内存：16G DDR3L 1600Mhz</li>
</ul>
<p>性能测试的时候为了准确使用了Intel的性能调试工具，没有使用程序输出的数值。编译全部是windows平台，gcc使用mingw环境。都是debug模式开O2优化，x64代码。</p>
<p> </p>
<p>VS 2015：557.943ms</p>
<p>CLang 3.7：605.040ms</p>
<p>icc 16.0：762.681ms</p>
<p>gcc 5.2.0：1269ms</p>
<p> </p>
<hr />
<p><strong>附加测试：Linux上的性能测试</strong>。有朋友说我的测试都是Windows平台，Linux平台下面g++可能性能会更好，于是我有做了另一个测试</p>
<p>测试机器是我的一台服务器</p>
<ul>
<li>CPU Xeon E5-2603 x2 @ 1.80 GHz</li>
<li>内存：16G</li>
</ul>
<p>由于服务器上没有Intel的性能调试工具的授权，所以使用系统函数来测试时间。系统是Ubuntu</p>
<p> </p>
<p>CLang 3.4 ：1020.149ms</p>
<p>gcc 4.8.4：1355.673ms</p>
<p>所以可以看出来在Linux系统下面gcc的性能有所提升，但是仍然比不了clang</p>]]></content>
        
        <summary type="html">
            
            前两天看到一篇文章提到了用MagicNumber来做神奇的导数开方运算，于是我打算试一试测试系统的函数的性能  #include &amp;quot;stdafx.h&amp;quot;  #include &amp;lt;math.h&amp;gt;  #include &amp;lt;time.h&amp;gt;    
            
        </summary>
        
        <category term="原创"/>
        
        <category term="本地开发"/>
        
        <category term="benchmark"/>
        
        <category term="clang"/>
        
        <category term="gcc"/>
        
        <category term="icc"/>
        
        <category term="vs"/>
        
    </entry>
    
    <entry>
        <title>hihoCoder 1291 - Building in Sandbox   题解</title>
        <link href="https://wind.moe/article/42"/>
        <id>https://wind.moe/article/42</id>
        
        <published>2016-04-10T11:16:04+08:00</published>
        <updated>2016-04-10T11:16:04+08:00</updated>
        
        <content type="html"><![CDATA[<p><strong>描述</strong></p>

<p>Little Hi is playing a sandbox voxel game. In the game the whole world is constructed by massive 1x1x1 cubes. The edges of cubes are parallel to the coordinate axes and the coordinates (x, y, z) of the center of each cube are integers.</p>

<p>At the beginning there is nothing but plane ground in the world. The ground consists of all the cubes of z=0. Little Hi needs to build everything by placing cubes one by one following the rules:</p>

<ol>
<li><p>The newly placed cube must be adjacent to the ground or a previously placed cube. Two cubes are adjacent if and only if they share a same face.</p></li>
<li><p>The newly placed cube must be accessible from outside which means by moving in 6 directions(up, down, left, right, forward, backward) there is a path from a very far place - say (1000, 1000, 1000) in this problem - to this cube without passing through ground or other cubes.</p></li>
</ol>

<p>Given a sequence of cubes Little Hi wants to know if he can build the world by placing the cubes in such order.</p>



<p><strong>输入</strong></p>

<p>The first line contains the number of test cases T(1 &lt;= T &lt;= 10).</p>

<p>For each test case the first line is N the number of cubes in the sequence.</p>

<p>The following N lines each contain three integers x, y and z indicating the coordinates of a cube.</p>

<p>For 20% of the data, 1 &lt;= N &lt;= 1000, 1 &lt;= x, y, z &lt;= 10.</p>

<p>For 100% of the data, 1 &lt;= N &lt;= 100000, 1 &lt;= x, y, z &lt;= 100.</p>

<p><strong>输出</strong></p>

<p>For each testcase output &quot;Yes&quot; or &quot;No&quot; indicating if Little Hi can place the cubes in such order.</p>

<p><strong>样例输入</strong></p>

<pre><code>3
3
1 1 1
1 2 1
1 3 1
3
1 1 1
1 2 1
1 3 2
17
1 1 1
1 2 1
1 3 1
2 3 1
3 3 1
3 2 1
3 1 1
2 1 1
2 1 2
1 1 2
1 2 2
1 3 2
2 3 2
3 3 2
3 2 2
2 2 2
2 2 1
</code></pre>

<p><strong>样例输出</strong></p>

<pre><code>Yes
No
No
</code></pre>

<p><strong>解题思路</strong></p>

<p>先简要翻译一下题意（巨硬不忘推广MC啧啧，可理解为在MC中你拥有一块超平坦地形，每个方块拥有  1×1×1 的体积，Z 坐标为0的地面上已经铺满了方块，现在我们要添加方块，有两个要求：</p>

<p>1.只能紧挨着一个已有的方块放置，当且仅当两个方块共享一个面时为两个方块紧邻
2.方块只能从一个无限远的地方寻路径放进去，不能穿过其他方块</p>

<p>最后给出这个建筑能否被修建出来。</p>

<p>一开始的思路是使用并查集，即将搭建好的建筑假想为一张无向图，不断归并来求解，写着写着思路全乱了...然后又在时间轴上看见了菊苣<a href="https://www.zhihu.com/people/xia-yang-7">夏洋</a>的题目分析 ，茅塞顿开，既然放置方块的解法过于复杂，那何不反之从拆的过程着手呢？于是可以开两个三维数组 Sandbox和 Freebox ，分别表示有放置方块的坐标以及没有放置方块的坐标，然后在建筑完成后任取一闲置方块进行 FloodFill 来将闲置方块标记，然后逆序来拆掉方块（用栈存储），每拆掉一个便再进行一次仅针对释放方块的 FloodFill，这步很重要，因为可能在建筑内部构成一个真空，若最后成功逆序拆掉了所有方块，便可返回正确结果，然后对细节进行一些处理便可便可得出效率较高的解法。</p>

<p><strong>Source Code</strong></p>

<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;stack&gt;
#define LENGTH 100 + 2
#define FOR(x, y, z) for (x = y; x &lt; z; x++)
#define FREE(x)                                                                \n  while (!x.empty())                                                           \n  x.pop()
#define MAX(x, y) x = x &gt; y ? x : y
#define MEM(x) memset(x, 0, sizeof(x))

using namespace std;

int i, j, k, max_num[4], dir[6][3] = {{-1, 0, 0}, {0, -1, 0}, {0, 0, -1},
                                      {1, 0, 0},  {0, 1, 0},  {0, 0, 1}};
bool flag, sandbox[LENGTH][LENGTH][LENGTH], freebox[LENGTH][LENGTH][LENGTH];

struct Point {
  int x, y, z;
  Point() {}
  Point(int x, int y, int z) : x(x), y(y), z(z) {}
};
stack&lt;Point&gt; points, flood;

bool valid(int x, int y, int z) {
  if (sandbox[x][y][z])
    return false;
  FOR(i, 0, 6)
  if (z == 1 || sandbox[x + dir[i][0]][y + dir[i][1]][z + dir[i][2]])
    return true;
  return false;
}

bool valid_free(int x, int y, int z) {

  FOR(i, 0, 6)
  if (freebox[x + dir[i][0]][y + dir[i][1]][z + dir[i][2]])
    return true;

  return false;
}

void floodfill(int x, int y, int z) {
  Point p(x, y, z);
  flood.push(p);
  while (!flood.empty()) {
    int x = flood.top().x, y = flood.top().y, z = flood.top().z;
    flood.pop();
    if (x &lt; 0 || x &gt; 101 || y &lt; 0 || y &gt; 101 || z &lt; 1 || z &gt; 101)
      continue;
    if (sandbox[x][y][z] || freebox[x][y][z])
      continue;
    freebox[x][y][z] = true;
    FOR(i, 0, 6)
    flood.push(Point(x + dir[i][0], y + dir[i][1], z + dir[i][2]));
  }
}

void record(int x, int y, int z) {
  MAX(max_num[0], x);
  MAX(max_num[1], y);
  MAX(max_num[2], z);
}
void init() {
  flag = false;
  MEM(sandbox);
  MEM(freebox);
  FREE(points);
  FREE(flood);
  FOR(i, 0, 3)
  max_num[i] = -1;
  FOR(i, 0, LENGTH)
  FOR(j, 0, LENGTH)
  sandbox[i][j][0] = true;
}
void pruning() {
  FOR(i, max_num[0] + 2, LENGTH)
  FOR(j, 0, LENGTH)
  FOR(k, 1, LENGTH)
  sandbox[i][j][k] = true;
  FOR(i, 0, LENGTH)
  FOR(j, max_num[1] + 2, LENGTH)
  FOR(k, 1, LENGTH)
  sandbox[i][j][k] = true;
  FOR(i, 0, LENGTH)
  FOR(j, 0, LENGTH)
  FOR(k, max_num[2] + 2, LENGTH)
  sandbox[i][j][k] = true;
}

int main() {
  int t;
  scanf(&quot;%d&quot;, &amp;t);
  while (t--) {
    int n;
    scanf(&quot;%d&quot;, &amp;n);
    init();
    while (n--) {
      Point p;
      scanf(&quot;%d %d %d&quot;, &amp;p.x, &amp;p.y, &amp;p.z);
      record(p.x, p.y, p.z);
      if (!valid(p.x, p.y, p.z) &amp;&amp; !flag)
        flag = true;
      points.push(p);
      sandbox[p.x][p.y][p.z] = true;
    }
    if (flag) {
      puts(&quot;No&quot;);
      continue;
    }
    pruning();
    floodfill(0, 0, 1);
    while (!points.empty()) {
      int x = points.top().x, y = points.top().y, z = points.top().z;
      points.pop();
      if (valid_free(x, y, z)) {
        sandbox[x][y][z] = false;
        floodfill(x, y, z);
      } else {
        puts(&quot;No&quot;);
        flag = true;
        break;
      }
    }
    if (flag)
      continue;
    puts(&quot;Yes&quot;);
  }
  return 0;
}

/********************
Status: Accepted
Time : 865ms
Memory : 23MB
Language: C++
********************/
</code></pre>

<p>在第一次 FloodFill 的基础上我们可以进行一次限制避免无所谓的搜索，使用 max<em>num 数组分别记录 x，y，z 的最大值，将这三个值以外的部分直接标记为闲置方块，即将多余部分切掉，在数据量较少的时候可以节约很大一部分资源，不加 min</em>num 的原因是猜测数据应该都会从小值开始，因而感觉提升效率不大（事实也证明如此。</p>]]></content>
        
        <summary type="html">
            
            描述  Little Hi is playing a sandbox voxel game. In the game the whole world is constructed by massive 1x1x1 cubes. The edges of cubes are pa
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 hohobear 發表的 廢業青年的消失 迴響</title>
        <link href="http://wenli.moe/?p=45#comment-41"/>
        <id>http://wenli.moe/?p=45#comment-41</id>
        
        <author>
            <name>hohobear</name>
        </author>
        
        <published>2016-04-09T20:49:36+08:00</published>
        <updated>2016-04-09T20:49:36+08:00</updated>
        
        <content type="html"><![CDATA[<p>自己身為沉迷網路多年的魯蛇大叔<br />
在以前有看過廢業青年的BLOG<br />
(記得還有加入GOOGLE READER 來追蹤(這RSS服務已經沒了))</p>
<p>今天在網路上亂逛看到<br />
『1980年代的台灣遊戲實況：播音人黑盒子攻略錄影帶』這篇文章<br />
覺得作者很有趣   (很專業的收藏又符合大叔喜歡的主題)<br />
連到這邊來，發現是前廢業青年<br />
(很像多年後又遇到當年念書時每天搭同班公車的陌生人那樣)</p>
<p>趕緊來加油打氣一下<br />
壞的都過去了，好的會一直來<br />
也很喜歡現在新的文章<br />
期待有更多的作品~加油!</p>]]></content>
        
        <summary type="html">
            
            自己身為沉迷網路多年的魯蛇大叔 在以前有看過廢業青年的BLOG (記得還有加入GOOGLE READER 來追蹤(這RSS服務已經沒了)) 今天在網路上亂逛看到 『1980年代的台灣遊戲實況：播音人黑盒子攻略錄影帶』這篇文章 覺得作者很有趣   (很專業的收藏又符合大叔喜歡的主
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 pixza_Yaoita 發表的 廢業青年的消失 迴響</title>
        <link href="http://wenli.moe/?p=45#comment-40"/>
        <id>http://wenli.moe/?p=45#comment-40</id>
        
        <author>
            <name>pixza_Yaoita</name>
        </author>
        
        <published>2016-03-24T16:50:05+08:00</published>
        <updated>2016-03-24T16:50:05+08:00</updated>
        
        <content type="html"><![CDATA[<p>很微妙的, 在各個科技復古相關的站點總是能找到你的身影XDDD<br />
不過到這種時候才來第一次打招呼 (扣除掉 twitter 上的幾次亂入外), 幸會幸會</p>
<p>這一陣子在整理舊的 RSS feeds 時也才意識到不少部落格不知不覺消失的事實<br />
像這樣生活顛簸不斷搬家卻又每每都能遇到的情況感覺實在微妙<br />
剛好像是另一篇所寫到的, “This too shall pass.&quot;</p>
<p>新的一年 (雖然現在已經三月底了), 祝一切順心.</p>]]></content>
        
        <summary type="html">
            
            很微妙的, 在各個科技復古相關的站點總是能找到你的身影XDDD 不過到這種時候才來第一次打招呼 (扣除掉 twitter 上的幾次亂入外), 幸會幸會 這一陣子在整理舊的 RSS feeds 時也才意識到不少部落格不知不覺消失的事實 像這樣生活顛簸不斷搬家卻又每每都能遇到的情況
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 JAK 發表的 把付費轉蛋比擬為賭博，是對賭博的侮辱？ 迴響</title>
        <link href="http://wenli.moe/?p=94#comment-39"/>
        <id>http://wenli.moe/?p=94#comment-39</id>
        
        <author>
            <name>JAK</name>
        </author>
        
        <published>2016-03-18T12:59:04+08:00</published>
        <updated>2016-03-18T12:59:04+08:00</updated>
        
        <content type="html"><![CDATA[<p>只知道艦©出來之後，大陸那邊瞬間冒出一堆複製貼上的遊戲，接著有個大陸網友跟我說艦©沒創新，WTF</p>]]></content>
        
        <summary type="html">
            
            只知道艦©出來之後，大陸那邊瞬間冒出一堆複製貼上的遊戲，接著有個大陸網友跟我說艦©沒創新，WTF
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 Susan 發表的 一切都會過去 迴響</title>
        <link href="http://wenli.moe/?p=81#comment-38"/>
        <id>http://wenli.moe/?p=81#comment-38</id>
        
        <author>
            <name>Susan</name>
        </author>
        
        <published>2016-03-13T22:37:06+08:00</published>
        <updated>2016-03-13T22:37:06+08:00</updated>
        
        <content type="html"><![CDATA[<p>Hi雯麗您好,<br />
我們正在為北門附近一個古蹟爭取原地保留, 我在一個部落格看到您爺爺住過那裡, 若方便請您寫mail 給我,謝謝!</p>]]></content>
        
        <summary type="html">
            
            Hi雯麗您好, 我們正在為北門附近一個古蹟爭取原地保留, 我在一個部落格看到您爺爺住過那裡, 若方便請您寫mail 給我,謝謝!
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 Gary 發表的 廢業青年的消失 迴響</title>
        <link href="http://wenli.moe/?p=45#comment-37"/>
        <id>http://wenli.moe/?p=45#comment-37</id>
        
        <author>
            <name>Gary</name>
        </author>
        
        <published>2016-03-08T16:41:39+08:00</published>
        <updated>2016-03-08T16:41:39+08:00</updated>
        
        <content type="html"><![CDATA[<p>難怪覺得似曾相識，我們都算早期台灣做網站和寫個人日記（那時沒部落格）的一代吧，雖然當時我也在某些圈有些小名氣，也因為一些因素關站。<br />
現在的我專心在自己事業，FB幾乎不動，唯一稍微活躍就在G+上，也是因為“安全感”使然。</p>
<p>後來又在G+上圈了你，算緣分嗎？哈哈：）<br />
也許，那就繼續圈下去，這種好像連著又沒真實連著的感覺很奇妙，其實。</p>]]></content>
        
        <summary type="html">
            
            難怪覺得似曾相識，我們都算早期台灣做網站和寫個人日記（那時沒部落格）的一代吧，雖然當時我也在某些圈有些小名氣，也因為一些因素關站。 現在的我專心在自己事業，FB幾乎不動，唯一稍微活躍就在G+上，也是因為“安全感”使然。 後來又在G+上圈了你，算緣分嗎？哈哈：） 也許，那就繼續圈
            
        </summary>
        
    </entry>
    
    <entry>
        <title>DNS放大攻击之实现DDOS的尝试</title>
        <link href="http://www.eric21.com/2016/02/21/448"/>
        <id>http://www.eric21.com/2016/02/21/448</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2016-02-21T02:06:18+08:00</published>
        <updated>2016-02-21T02:06:18+08:00</updated>
        
        <content type="html"><![CDATA[<p>DNS放大攻击这个概念被提出来已经很多年了。<br />
最近在github上看到一个很不错的例子：<a href="https://github.com/dangodai/DNSAmplificationAttack" target="_blank">https://github.com/dangodai/DNSAmplificationAttack</a><br />
但是，是个linux平台的c工程。<br />
初步想把这个工程移植到windows平台，改造成读取web空间配置文件，获取攻击目标IP和端口的样子。然后就可以做成大规模DDOS网络。</p>
<p>遇到的困难：</p>
<pre>#include &lt;sys/socket.h&gt;
#include &lt;netinet/ip.h&gt;
#include &lt;netinet/udp.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;unistd.h&gt;</pre>
<p> </p>
<p>这几个头文件都是windows下VS2013没有的，还不知道如何解决。</p>]]></content>
        
        <summary type="html">
            
            DNS放大攻击这个概念被提出来已经很多年了。 最近在github上看到一个很不错的例子：https://github.com/dangodai/DNSAmplificationAttack 但是，是个linux平台的c工程。 初步想把这个工程移植到windows平台，改造成读取
            
        </summary>
        
        <category term="日记"/>
        
    </entry>
    
    <entry>
        <title>由 影月 發表的 一切都會過去 迴響</title>
        <link href="http://wenli.moe/?p=81#comment-36"/>
        <id>http://wenli.moe/?p=81#comment-36</id>
        
        <author>
            <name>影月</name>
        </author>
        
        <published>2016-02-15T13:50:34+08:00</published>
        <updated>2016-02-15T13:50:34+08:00</updated>
        
        <content type="html"><![CDATA[<p>推人生リセットボタンXD<br />
這個也蠻棒的&gt;&lt;<br />
</p>]]></content>
        
        <summary type="html">
            
            推人生リセットボタンXD 這個也蠻棒的&amp;gt;&amp;lt; 
            
        </summary>
        
    </entry>
    
    <entry>
        <title>Django 学习手记 三 数据操作的常用方法</title>
        <link href="http://blog.dimpurr.com/django-note-3/"/>
        <id>http://blog.dimpurr.com/django-note-3/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2016-02-04T23:45:15+08:00</published>
        <updated>2016-02-04T23:45:15+08:00</updated>
        
        <content type="html"><![CDATA[<p>上一篇中，我们已经建立了基本的 Model 数据模型，并且熟悉了关于数据结构的存取、更新操作。本篇中主要介绍了对 Model 数据进行操作的常用方法，包含有许多示例 <a href="https://docs.djangoproject.com/en/1.9/intro/tutorial02/#playing-with-the-api" target="_blank">参见</a> ，亲自操作一下就很容易明白。</p>
<p>为了方便，我们可以通过 Python 在终端提供的交互式 Shell 来尝试和熟悉各种数据接口类的 API 。</p>
<pre>python manage.py shell</pre>
<p>使用这个命令会启动 Python 的交互式 Shell ，并且预先加载好 Django 所需的环境和变量。</p>
<h3>示例：创建和修改新对象</h3>
<p>涉及到的新方法：</p>
<ul>
<li><code>all()</code> 列出所有对象</li>
<li><code>save()</code> 将该对象存入数据库</li>
</ul>
<p><span></span></p>
<pre>from polls.models import Question, Choice # 导入要操作的 Model
Question.objects.all()

from django.utils import timezone
q = Question(question_text=&quot;What's new?&quot;, pub_date=timezone.now()) # 创建一个新的 Question 对象
q.save() # 保存后才会被写入数据库

q.id # 输出属性
q.question_text
q.pub_date
q.question_text = &quot;What's up?&quot; # 修改属性
q.save()
Question.objects.all()</pre>
<h3>示例：为 Model 编写自定义方法</h3>
<p>因为 <code>Question.objects.all()</code> 的输出 <code>[&lt;Question: Question object&gt;]</code> 是一个没有任何意义的对象标识，我们可以为 Question 类型增一个 <code>__str__</code> 方法。同时可以了解一下如何添加自定义方法。修改之前的 <code>polls/models.py</code> ，在里面加入：</p>
<pre>import datetime
from django.utils import timezone
# …

class Author(models.Model):
# …
def __str__(self):
return self.name

class Question(models.Model):
# ...
def __str__(self):
return self.question_text
def was_published_recently(self): # 判断该 Question 是否为 1 天内添加的自定义方法
return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1)

class Choice(models.Model):
# ...
def __str__(self):
return self.choice_text</pre>
<p>现在再回到交互式 Shell ，测试刚才新增的方法的效果。在 <code>models.py</code> 中对方法的修改并不需要重新迁移生成，就可以马上生效：</p>
<pre>from polls.models import Question, Choice
Question.objects.all() # 此时的输出已经带有描述文字</pre>
<p>当然，如果改动了 <code>models.py</code> 中的数据结构，记得要重新 makemigrations 和 migrate 。</p>
<h3>关联对象常用方法参考</h3>
<p>这些方法常用在含有 ForeignKey 或 ManyToManyField 类的关联对象中。</p>
<ul>
<li><code>add(obj1, obj2, ...)</code> 添加新的关联</li>
<li><code>remove(obj1, obj2, ...)</code> 删除关联</li>
<li><code>clear()</code> 删除所有关联</li>
<li><code>set([obj1, obj2, …])</code> 直接用新的对象组覆盖已有的关联</li>
<li><code>count()</code> 计数子对象数</li>
<li><code>delete()</code> 删除对象</li>
<li><code>create()</code> 新建关联对象并直接引用到数据库（不需要再手动保存）</li>
</ul>
<h3>示例：数据的添加</h3>
<pre>a1 = Author(name=&quot;dim”,email=&quot;dim@example.com&quot;)
a2 = Author(name=&quot;ikaros&quot;,email=&quot;ikaros@example.com&quot;)
a1.save()
a2.save()
q.authors.add(a1,a2) # 给 ManyToManyField 添加多个指向
q.authors.all()

q.authors.count()
q.authors.all()[1].delete()
q.authors.all()

q.choice_set.create(choice_text='Not much', votes=0) # 在 Question 下新建一个 Choice
q.choice_set.create(choice_text='The sky', votes=0)
q.choice_set.all()

c = q.choice_set.create(choice_text='Just hacking again', votes=0)
c.question # 从 q.choice_set 新创建的 Choice 已经自动指向了父级 q</pre>
<h3>其他 Model 类型方法参考</h3>
<p>以下是前文未提到的一些对 Model 对象实例进行操作的方法。<a href="https://docs.djangoproject.com/en/1.9/ref/models/instances/" target="_blank">参见</a></p>
<ul>
<li><code>refresh_from_db()</code> 将缓存中该对象的值更新为与数据库相同</li>
<li><code>clean_fields(exclude=None)</code> 验证 Field 有效性</li>
<li><code>clean()</code> 应当由你自行定义，提供验证 Field 是否有效和自动修复（填入数据）的功能</li>
<li><code>full_clean()</code> 调用 clean_fields() 和 clean() 方法（如果有）</li>
<li><code>validate_unique()</code> 类似 clean_fields() ，用于检测重复</li>
<li><code>save(force_insert=True, force_update=True)</code> 启用强制插入或更新</li>
</ul>
<h3>数据的取出、复制和筛选</h3>
<p>针对每个 Models ，都提供了一个称为 objects 的对象管理器 (Manager)。利用 objects 的各种方法，可以方便的进行数据的管理工作。关于筛选对象的条件语句称为 QuerySet 。</p>
<p>涉及到的新方法：</p>
<ul>
<li><code>objects.get()</code> 获取单个对象</li>
<li><code>objects.filter()</code> 获取多个对象</li>
<li><code>exclude()</code> 排除符合条件的对象</li>
<li><code>F()</code> 在条件语句中引用其他属性的值</li>
<li><code>Q()</code> 合并复杂查询</li>
<li><code>update()</code> 批量修改</li>
</ul>
<p>为了方便，再增加一组测试数据，然后尝试示例：</p>
<pre>q2 = Question(question_text=“Try another?”, pub_date=timezone.now())
q2.save()

Question.objects.get(id=1) # 根据 id 获取对象，也可以用其他 Field 的值搜索
q3 = Question.objects.get(pk=1) # 根据主键 (Primary Key) 获取对象，在这里就是 id</pre>
<p>将一个对象副本的唯一标识 (pk, id 等) 删除，再重新存入，此时会自动分配 pk 或 id ，即实现了对象的复制。</p>
<pre>q3.pk = None
q3.save()
q3.pk # 可以看出 id 已经更新</pre>
<p>get() 只能取得一个对象，无匹配或者不止一个匹配时都会报错，而 filter() 可以取得多个匹配。</p>
<pre>from django.utils import timezone
current_year = timezone.now().year
Question.objects.get(pub_date__year=current_year) Question.objects.filter(pub_date__year=current_year)

qlist = Question.objects.filter(question_text__startswith='What')
from datetime import timedelta
qlist2 = qlist.exclude(pub_date__gte=datetime.date.today() + timedelta(days=3))</pre>
<p>对 ManyToManyField 类 Field 指向的对象集，同样可以应用 get() 和 filter() 。举例来说，要获取关联了该 Question 对象的全部 Choice 对象，只需要加上一个 _set 后缀：</p>
<pre>q.choice_set.filter(choice_text__startswith='Just hacking')</pre>
<p>至于 F() 和 Q() ，使用时需要额外引用其所在的模块。</p>
<pre>from django.db.models import F
Author.objects.filter(email__startswith=F('name'))

from django.db.models import Q
Question.objects.filter(Q(question_text__startswith='What'),Q(pub_date__lt=date(2011, 11, 11)) | Q(pub_date__gte=date(2012, 3, 4)))

Author.objects.all().update(email=&quot;admin@example.com&quot;)
Author.objects.all().update(email=F('name'))</pre>
<h3>QuerySet 条件语句参考</h3>
<p>这里是在括号中使用的一些常用条件语句后缀，在这些条件语句中，利用双下划线区分层级来描述最终的指向，比如连接 Model 和 Field 的名称，最后再加上双下划线以及条件后缀。具体可以参考上方的示例。</p>
<ul>
<li><code>__excat</code> 精确等于，如果是字符则大小写也要相同</li>
<li><code>__contains</code> 内容包含</li>
<li><code>__startswith, __endswith</code> 开始于，结尾于</li>
<li><code>__iexact, __istartswith, __endswith</code> 不精确等于， 不开始于，不结尾于</li>
<li><code>__gt, __gte, __lt, __lte</code> 大于，大于等于，小于，小于等于</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/django-note-3/">Django 学习手记 三 数据操作的常用方法</a></p>]]></content>
        
        <summary type="html">
            
            上一篇中，我们已经建立了基本的 Model 数据模型，并且熟悉了关于数据结构的存取、更新操作。本篇中主要介绍了对 Model 数据进行操作的常用方法，包含有许多示例 参见 ，亲自操作一下就很容易明白。 为了方便，我们可以通过 Python 在终端提供的交互式 Shell 来尝试
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Django"/>
        
        <category term="Django 学习手记"/>
        
        <category term="MVC"/>
        
        <category term="Python"/>
        
        <category term="SQL"/>
        
        <category term="Web"/>
        
        <category term="编程"/>
        
    </entry>
    
    <entry>
        <title>由 神楽坂雅詩 發表的 把付費轉蛋比擬為賭博，是對賭博的侮辱？ 迴響</title>
        <link href="http://wenli.moe/?p=94#comment-35"/>
        <id>http://wenli.moe/?p=94#comment-35</id>
        
        <author>
            <name>神楽坂雅詩</name>
        </author>
        
        <published>2016-02-01T23:34:52+08:00</published>
        <updated>2016-02-01T23:34:52+08:00</updated>
        
        <content type="html"><![CDATA[<p>其实令我感受最深的就是D*M网站的线上游戏，尤其是我玩过舰*以后，那里面的各种游戏简直就像是复制粘贴希望，现在我看到主菜单是左面一个菊花排布的功能按钮，右面是立绘的这种游戏都已经到了直接关闭的程度。让玩家氪金那么多，核心代码还是复制粘贴，规则几乎一样，换个题材就是一个新游戏。手机游戏更是，氪金，抽卡，合成，进化，一样的流程……换题材换卡牌换UI就是新游戏了，制作商骗完不是改进游戏体验而是又去copy出新游戏。可就是那么多人玩，因为有萌妹纸对吧，我只能说宅的钱真好骗。氪金无涯，回头是岸。好了就说这么多了，去LL十一抽去了，但愿出UR。</p>]]></content>
        
        <summary type="html">
            
            其实令我感受最深的就是D*M网站的线上游戏，尤其是我玩过舰*以后，那里面的各种游戏简直就像是复制粘贴希望，现在我看到主菜单是左面一个菊花排布的功能按钮，右面是立绘的这种游戏都已经到了直接关闭的程度。让玩家氪金那么多，核心代码还是复制粘贴，规则几乎一样，换个题材就是一个新游戏。手
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 我怎么就管不住这手呢，把付费抽卡比拟为赌博，是对赌博的侮辱？ | ACGdoge 發表的 把付費轉蛋比擬為賭博，是對賭博的侮辱？ 迴響</title>
        <link href="http://wenli.moe/?p=94#comment-34"/>
        <id>http://wenli.moe/?p=94#comment-34</id>
        
        <author>
            <name>我怎么就管不住这手呢，把付费抽卡比拟为赌博，是对赌博的侮辱？ &amp;#124; ACGdoge</name>
        </author>
        
        <published>2016-02-01T16:15:14+08:00</published>
        <updated>2016-02-01T16:15:14+08:00</updated>
        
        <content type="html"><![CDATA[<p>[…] 原文出自原作者个人博客：雯麗萌 […]</p>]]></content>
        
        <summary type="html">
            
            […] 原文出自原作者个人博客：雯麗萌 […]
            
        </summary>
        
    </entry>
    
    <entry>
        <title>由 柯姊 發表的 廢業青年的消失 迴響</title>
        <link href="http://wenli.moe/?p=45#comment-33"/>
        <id>http://wenli.moe/?p=45#comment-33</id>
        
        <author>
            <name>柯姊</name>
        </author>
        
        <published>2016-01-20T03:53:34+08:00</published>
        <updated>2016-01-20T03:53:34+08:00</updated>
        
        <content type="html"><![CDATA[<p>廢業青年? 有點印象但又不確定是不是有看過…<br />
不管怎樣, 恭喜你這場人生馬拉松沒有在35年時就停下棄權.<br />
雖然我是很意外的因為你的某些文章而圈你的..<br />
不過我希望可以繼續看到你在姬家活躍.<br />
也繼續在三次元充滿朝氣的活動.<br />
我們總會有著低潮的時候別忘了你的<br />
OK GO跟強尼走路的keep walking囉.</p>]]></content>
        
        <summary type="html">
            
            廢業青年? 有點印象但又不確定是不是有看過… 不管怎樣, 恭喜你這場人生馬拉松沒有在35年時就停下棄權. 雖然我是很意外的因為你的某些文章而圈你的.. 不過我希望可以繼續看到你在姬家活躍. 也繼續在三次元充滿朝氣的活動. 我們總會有著低潮的時候別忘了你的 OK GO跟強尼走路的
            
        </summary>
        
    </entry>
    
    <entry>
        <title>平安通顺保险公估有限公司足球队正式成立</title>
        <link href="http://www.eric21.com/2016/01/18/432"/>
        <id>http://www.eric21.com/2016/01/18/432</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2016-01-18T23:13:39+08:00</published>
        <updated>2016-01-18T23:13:39+08:00</updated>
        
        <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/131143436@N06/23830211894/in/dateposted/"><img src="https://farm2.staticflickr.com/1484/23830211894_4c9bf11c88.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/23833418594/in/dateposted/"><img src="https://farm2.staticflickr.com/1702/23833418594_3e50ac422f.jpg" /></a><br />
2016-01-18平安通顺保险公估有限公司足球队正式成立！</p>
<p>场景回放A：<br />
坤：你衣服要多少号？<br />
翔：175的<br />
坤：多少？<br />
翔：175<br />
众人领取自己的衣服，翔哥：尼玛，我说的是衣服的尺码175，不是印175号啊！<br />
其他人衣服后面都印着1号，7号，28号这样的数字，只有翔哥衣服背后印着175</p>
<p>场景回放B：<br />
“像XX这样的胖子，还有YY，肯定上场跑5分钟就不行了。”<br />
开场后，玥：“他们队都是胖子，咱们撑过5分钟就赢定啦！”<br />
二十分钟后，场上已经没人了，全在场下休息。<br />
嗯，全体长期缺乏锻炼。</p>]]></content>
        
        <summary type="html">
            
              2016-01-18平安通顺保险公估有限公司足球队正式成立！ 场景回放A： 坤：你衣服要多少号？ 翔：175的 坤：多少？ 翔：175 众人领取自己的衣服，翔哥：尼玛，我说的是衣服的尺码175，不是印175号啊！ 其他人衣服后面都印着1号，7号，28号这样的数字，只有翔哥衣
            
        </summary>
        
        <category term="日记"/>
        
    </entry>
    
    <entry>
        <title>由 zeroofzone 發表的 一切都會過去 迴響</title>
        <link href="http://wenli.moe/?p=81#comment-30"/>
        <id>http://wenli.moe/?p=81#comment-30</id>
        
        <author>
            <name>zeroofzone</name>
        </author>
        
        <published>2016-01-16T20:13:12+08:00</published>
        <updated>2016-01-16T20:13:12+08:00</updated>
        
        <content type="html"><![CDATA[<p>雯麗姐加油！！！</p>]]></content>
        
        <summary type="html">
            
            雯麗姐加油！！！
            
        </summary>
        
    </entry>
    
    <entry>
        <title>Google Nexus Player 使用初体验</title>
        <link href="http://www.eric21.com/2016/01/14/427"/>
        <id>http://www.eric21.com/2016/01/14/427</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2016-01-14T11:46:03+08:00</published>
        <updated>2016-01-14T11:46:03+08:00</updated>
        
        <content type="html"><![CDATA[<p>谷歌官方商店 https://store.google.com/product/_nexus_player  一直显示缺货。<br />
我想赶在除夕前设置好电视，好在年夜时看春节晚会。<br />
于是上淘宝买了个现货，链接在这里：https://item.taobao.com/item.htm?id=15003207442<br />
<a href="https://www.flickr.com/photos/131143436@N06/24071229400/in/dateposted/"><img src="https://farm2.staticflickr.com/1502/24071229400_95f0b0fa6f.jpg" /></a><br />
以前用电视当显示屏的时候有过经验，因为买的HDMI 2.0数据线质量不好，屏幕有坏线。<br />
所以这次买了一条2米的高质量HDMI线，链接在这里：https://item.taobao.com/item.htm?id=40157078368<br />
<a href="https://www.flickr.com/photos/131143436@N06/24071232480/in/photostream/"><img src="https://farm2.staticflickr.com/1485/24071232480_b7df48cfbe.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/24366812505/in/dateposted/"><img src="https://farm2.staticflickr.com/1581/24366812505_909f6d1ed4.jpg" /></a></p>
<p>第一个晚上尝试刷机到6.0.1 一直失败，因为未解锁。安装国内TV版的APP倒是成功了，然而我并不满意。<br />
第二天研究了一下，参考http://forum.xda-developers.com/nexus-player/general/guide-nexus-player-how-to-unlock-t2961989</p>
<p>大概流程和手机刷机差不多。<br />
我无师自通的试了试，按住盒子底部的按钮开机，果然开启了BOOTLOADER。<br />
成功解锁了之后，刷了6.0.1的rom，链接在这里：https://developers.google.com/android/nexus/images</p>
<p>开机之后，一直卡在搜索遥控器的步骤，怎么按遥控器都连不上，我就懵逼了。<br />
怀疑刷的rom有问题，我又重新下载rom，反复刷了3次，问题依旧，心情十分糟糕。<br />
然后上淘宝旺旺咨询卖家，卖家指点了一下。<br />
经过我自己的摸索，正确的步骤：首先按下盒子底部的按钮，遥控器同时按住任意两个键，OK</p>
<p>因为我家的WIFI是可以翻墙的，顺利登陆了google账号，然后操作电视，点击版本号N次，开启开发者模式，然后开启USB Debugging模式。<br />
然后电脑上安装应用宝PC客户端，用数据线把盒子连接到电脑。PS:盒子要同时连接电视和电脑。<br />
然后店家给我发了一个链接，都是TV专用的安卓APP，可以用应用宝直接安装到盒子。链接在这里：http://pan.baidu.com/s/1ntDRKt7</p>
<p>下面是运行效果：<br />
<a href="https://www.flickr.com/photos/131143436@N06/23999037829/in/dateposted/"><img src="https://farm2.staticflickr.com/1529/23999037829_143f533e1a.jpg" /></a></p>
<p><a href="https://www.flickr.com/photos/131143436@N06/24284343571/in/photostream/"><img src="https://farm2.staticflickr.com/1588/24284343571_cce3e831d8.jpg" /></a></p>
<p><a href="https://www.flickr.com/photos/131143436@N06/24366815715/in/photostream/"><img src="https://farm2.staticflickr.com/1552/24366815715_212c5628b4.jpg" /></a><br />
<a href="https://www.flickr.com/photos/131143436@N06/23740004873/in/photostream/"><img src="https://farm2.staticflickr.com/1528/23740004873_c3164f84a0.jpg" /></a></p>
<p><a href="https://www.flickr.com/photos/131143436@N06/23999047449/in/photostream/"><img src="https://farm2.staticflickr.com/1594/23999047449_168f1728b9.jpg" /></a><br />
测试了一下可以看YOUTUBE上4K画质的视频，只要你的翻墙速度足够给力。<br />
可以翻墙看全世界的电视节目，但是比如NETFLIX是要另外缴费的，大概每个月7.99美金。<br />
装上一个叫VST聚合的APP，还可以看普通电视上的节目，各地卫视都很齐全，就是画质很普通。</p>
<p>使用体验十分优秀，此神器怒甩乐视电视，小米电视盒之类的产品几条街。</p>]]></content>
        
        <summary type="html">
            
            谷歌官方商店 https://store.google.com/product/_nexus_player  一直显示缺货。 我想赶在除夕前设置好电视，好在年夜时看春节晚会。 于是上淘宝买了个现货，链接在这里：https://item.taobao.com/item.htm?i
            
        </summary>
        
        <category term="日记"/>
        
    </entry>
    
    <entry>
        <title>剁手日记：华为mate8使用体验</title>
        <link href="https://www.261day.com/%e5%89%81%e6%89%8b%e6%97%a5%e8%ae%b0%ef%bc%9a%e5%8d%8e%e4%b8%bamate8%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c/"/>
        <id>https://www.261day.com/%e5%89%81%e6%89%8b%e6%97%a5%e8%ae%b0%ef%bc%9a%e5%8d%8e%e4%b8%bamate8%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2016-01-12T02:13:31+08:00</published>
        <updated>2016-01-12T02:13:31+08:00</updated>
        
        <content type="html"><![CDATA[<p>好久没有更新博客了。本来想要更新一点机器学习相关的文章结果发现自己的基础知识匮乏，写不出来有价值的文章。手机也是好久之前就买了的，最近实在是用的比较蛋疼于是就写这么一篇测评吧。</p>
<p>首先声明。我绝对不是土豪啦。这面买手机的主要原因还是手机在杭州参加ELM2015会议的时候在公交车是被偷了（喂喂，话说那两天不是正好乌镇开互联网大会么，为什么治安还是这么差</p>
<p>先来说说华为Mate8使用的第一印象吧：<strong>大</strong>！这个手机不是一般的大，我的手已经算是比较大的了，不过单手操作还是比较困难的。当然了，也有人评价丑的，不过我是没有感觉啦。</p>
<p>说说我感觉好的地方吧：</p>
<ul>
<li>CPU、GPU均为旗舰配置，大多数应用都可以流畅运行（当然了崩坏学园那种优化烂的一逼的U3D游戏另说）</li>
<li>运存通常也都够用</li>
<li>续航持久</li>
<li>Android 6.0系统</li>
<li>自带Google服务框架</li>
<li>WiFi信号很好</li>
<li>一体式的机身</li>
</ul>
<p>剩下的日常说说缺点吧</p>
<ul>
<li>系统界面操作超级蛋疼
<ul>
<li>华为的虚拟按键很多应用不显示MENU键，也没有实体MENU键。比如Google Chrome就无法切换标签页</li>
<li>系统更新之后通知栏占用时间过长，运行全屏应用比如看视频的时候通知栏弹出很烦人（这种显示QQ群消息简直噩梦）</li>
</ul>
</li>
<li>系统默认应用的BUG：我这里修改了多次默认浏览器到Chrome，然而好几次都回到了系统默认</li>
<li>相机不算清晰</li>
<li>距离传感器设置的似乎阈值过高导致通话的时候有的时候会误操作手机</li>
<li>密码键盘不能记住密码之后指纹一键输入密码</li>
<li>SD卡和双SIM不能同时安装</li>
</ul>
<p>怎么说呢，对于我来说，下回有机会还是买Google Nenux吧，虽然也是华为代工的，但是原生Android比起这面好许多</p>]]></content>
        
        <summary type="html">
            
            好久没有更新博客了。本来想要更新一点机器学习相关的文章结果发现自己的基础知识匮乏，写不出来有价值的文章。手机也是好久之前就买了的，最近实在是用的比较蛋疼于是就写这么一篇测评吧。 首先声明。我绝对不是土豪啦。这面买手机的主要原因还是手机在杭州参加ELM2015会议的时候在公交车是
            
        </summary>
        
        <category term="原创"/>
        
        <category term="杂记"/>
        
    </entry>
    
    <entry>
        <title>H萌云观测测试版上线</title>
        <link href="https://www.261day.com/h%e8%90%8c%e4%ba%91%e8%a7%82%e6%b5%8b%e6%b5%8b%e8%af%95%e7%89%88%e4%b8%8a%e7%ba%bf/"/>
        <id>https://www.261day.com/h%e8%90%8c%e4%ba%91%e8%a7%82%e6%b5%8b%e6%b5%8b%e8%af%95%e7%89%88%e4%b8%8a%e7%ba%bf/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2015-11-27T23:58:11+08:00</published>
        <updated>2015-11-27T23:58:11+08:00</updated>
        
        <content type="html"><![CDATA[<p>神隐了一个多月之后又来发东西啦。这回的是花了半个星期 做的一个东西啦。现在已经上线测试啦。</p>
<p>博主在神隐的一个多月里面参加了中国机器学习及其应用研讨会、做了大半个多月项目（然后被坑，一分钱没拿到）。这回一个一时兴起丢下天堂的大坑先过来做了这么一个在线观测。这个观测系统每半个小时检测一下所有H萌UP主的投稿信息（以后检测频率可能会调整吧）</p>
<p>测试版地址（请使用现代浏览器访问）：<a href="http://115.28.73.8/" target="_blank">http://115.28.73.8/</a></p>
<p>项目源码已经在Github开源，求Star：<a href="https://github.com/hmoe/hmoe-ce" target="_blank">https://github.com/hmoe/hmoe-ce</a></p>]]></content>
        
        <summary type="html">
            
            神隐了一个多月之后又来发东西啦。这回的是花了半个星期 做的一个东西啦。现在已经上线测试啦。 博主在神隐的一个多月里面参加了中国机器学习及其应用研讨会、做了大半个多月项目（然后被坑，一分钱没拿到）。这回一个一时兴起丢下天堂的大坑先过来做了这么一个在线观测。这个观测系统每半个小时检
            
        </summary>
        
        <category term="原创"/>
        
    </entry>
    
    <entry>
        <title>【长期有效】天津魔兽世界玩家千人交流群</title>
        <link href="http://www.eric21.com/2015/11/24/420"/>
        <id>http://www.eric21.com/2015/11/24/420</id>
        
        <author>
            <name>eric21</name>
        </author>
        
        <published>2015-11-24T22:06:25+08:00</published>
        <updated>2015-11-24T22:06:25+08:00</updated>
        
        <content type="html"><![CDATA[<p>天津魔兽世界玩家1000人大群，倾力打造大型同城玩家会所。<br />
定期组织线上PVP和PVE活动，定期组织线下聚会。<br />
群号：171049675 欢迎加入！</p>
<blockquote><p><a href="//imgur.com/abJOAyH">展开图片</a></p></blockquote>
<p></p>]]></content>
        
        <summary type="html">
            
            天津魔兽世界玩家1000人大群，倾力打造大型同城玩家会所。 定期组织线上PVP和PVE活动，定期组织线下聚会。 群号：171049675 欢迎加入！ 展开图片 
            
        </summary>
        
        <category term="魔兽世界"/>
        
    </entry>
    
    <entry>
        <title>神舟PC PAD试玩</title>
        <link href="https://www.261day.com/%e7%a5%9e%e8%88%9fpc-pad%e8%af%95%e7%8e%a9/"/>
        <id>https://www.261day.com/%e7%a5%9e%e8%88%9fpc-pad%e8%af%95%e7%8e%a9/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2015-09-30T17:04:49+08:00</published>
        <updated>2015-09-30T17:04:49+08:00</updated>
        
        <content type="html"><![CDATA[<p>由于觉得总背着笔记本来回跑太沉了，就打算搞一个Windows平板用用。苦于预算问题，没有买Surface Pro，买了神舟来玩玩。就把这两天使用的体验说一下吧。</p>
<p>先说一下硬件配置：</p>
<ul>
<li>Intel Atom 1.3GHz CPU</li>
<li>2G DDR3 内存</li>
<li>64G emmc 主储存，可扩展microSD</li>
<li>10寸 1280*800 分辨率屏幕 10点触控</li>
<li>键盘皮套</li>
<li>内置蓝牙4.0</li>
</ul>
<p>下面就说一说使用的时候遇到的问题：</p>
<ul>
<li>硬盘不是SSD，读写速率过低，实际测试4K随机读写差不多2MB/s左右吧这个速度和机械的速度相当，这主要是因为只有一个FLASH芯片的过，要是像SSD一样是FLASH的矩阵构成的话速度应该能快不少。</li>
<li>内存的读写速率没有什么问题，不过2G内存有点不够用，这里开chrome的话比较吃力了</li>
<li>键盘皮套的触摸板太难用了，这个精度基本不能用，而且不支持扩展触摸手势，也不提供禁用功能</li>
<li>键盘皮套占地过大，要是用键盘的话后面要用支架的话需要好长</li>
<li>使用高保真蓝牙耳机进行测试的时候发现经常有卡顿的出现，不知道是CPU负载过高还是单纯的蓝牙模块有问题</li>
<li>Wifi信号也不是很强，离路由器30厘米而信号不是满格</li>
<li>实际使用的时候感觉还是比较热的，差不多外壳有四十度吧，这个还算正常</li>
<li>使用一天中在看高清视频是死过一次机，不是无响应，是直接硬件卡死了，没有蓝屏</li>
<li>预装系统是32位系统，而且自动使用window更新的时候无法连接到服务器，我是挂了代理才更新成功的，不知道为什么，很迷</li>
<li>拍照清晰度很差，这个就不要求了，毕竟要拍照片的都去用单反了</li>
</ul>
<p>说一说优点吧：</p>
<ul>
<li>续航比较持久，我测试6小时是没问题</li>
<li>内置了office 365的授权，这个office 365的授权价格都快要赶上这个平板的价钱了吧</li>
</ul>
<p>基本上目前来看就这些情况，性价比上肯定超过surface pro，但是体验上肯定差很多，由于这面windows 10的升级因为学校的渣网速还没有完成，所以暂且不知道运行windows 10如何</p>]]></content>
        
        <summary type="html">
            
            由于觉得总背着笔记本来回跑太沉了，就打算搞一个Windows平板用用。苦于预算问题，没有买Surface Pro，买了神舟来玩玩。就把这两天使用的体验说一下吧。 先说一下硬件配置：  Intel Atom 1.3GHz CPU 2G DDR3 内存 64G emmc 主储存，可
            
        </summary>
        
        <category term="原创"/>
        
        <category term="杂记"/>
        
        <category term="PC PAD"/>
        
        <category term="测评"/>
        
        <category term="试玩"/>
        
    </entry>
    
    <entry>
        <title>思科网络学院无法访问分析</title>
        <link href="https://www.261day.com/%e6%80%9d%e7%a7%91%e7%bd%91%e7%bb%9c%e5%ad%a6%e9%99%a2%e6%97%a0%e6%b3%95%e8%ae%bf%e9%97%ae%e5%88%86%e6%9e%90/"/>
        <id>https://www.261day.com/%e6%80%9d%e7%a7%91%e7%bd%91%e7%bb%9c%e5%ad%a6%e9%99%a2%e6%97%a0%e6%b3%95%e8%ae%bf%e9%97%ae%e5%88%86%e6%9e%90/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2015-09-16T13:42:43+08:00</published>
        <updated>2015-09-16T13:42:43+08:00</updated>
        
        <content type="html"><![CDATA[<p>这学期的网络课程要求用思科网络学院，然而并不能打开。好吧，抱着一探究竟的态度先去看一下吧。虽然直接ss可破，不过还是看一下GFW到底做了什么手脚吧。</p>
<p>首先访问主页，发现页面加载不出来，直到超时之后发现前端模板引擎没有解析。额，模板引擎竟然放在客户端来做，这个真的很少见。F12看一下资源加载情况，发现来自cloudfront.com的全部资源都无法访问。这明显是被墙了。什么都不说，先PING一下吧。</p>
<p></p><pre>C:\Users\manageryzy&amp;gt;ping 204.246.164.217

正在 Ping 204.246.164.217 具有 32 字节的数据:
来自 204.246.164.217 的回复: 字节=32 时间=100ms TTL=47
来自 204.246.164.217 的回复: 字节=32 时间=106ms TTL=47
来自 204.246.164.217 的回复: 字节=32 时间=96ms TTL=47
来自 204.246.164.217 的回复: 字节=32 时间=88ms TTL=47

204.246.164.217 的 Ping 统计信息:
数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
最短 = 88ms，最长 = 106ms，平均 = 97ms</pre><p></p>
<p>ICMP是通的，至少IP层应该是通的。然后追踪一下路由吧：</p>
<p></p><pre>C:\Users\manageryzy&amp;gt;tracert 204.246.164.217

通过最多 30 个跃点跟踪
到 server-204-246-164-217.sin2.r.cloudfront.net [204.246.164.217] 的路由:

1 5 ms 1 ms 2 ms 192.168.1.1
2 6 ms 2 ms 3 ms 180.201.128.1
3 3 ms 2 ms 2 ms 172.16.0.25
4 5 ms 3 ms 1 ms 172.16.0.1
5 21 ms 14 ms 15 ms 219.147.0.1
6 7 ms 9 ms 17 ms 222.173.65.53
7 24 ms 15 ms 22 ms 60.235.16.97
8 24 ms 21 ms 18 ms 202.97.40.197
9 * * * 请求超时。
10 27 ms 35 ms 35 ms 202.97.91.6
11 59 ms 74 ms 70 ms 202.97.61.58
12 52 ms 52 ms 48 ms 202.97.121.98
13 136 ms 138 ms 138 ms TenGE8-5.br02.sin02.pccwbtn.net [63.218.228.154]

14 130 ms 132 ms 131 ms TenGE8-5.br02.sin02.pccwbtn.net [63.218.228.154]

15 123 ms 111 ms 114 ms 63-218-107-42.static.pccwglobal.net [63.218.107.
42]
16 97 ms 96 ms 98 ms 54.239.41.48
17 93 ms 94 ms 92 ms 203.83.223.83
18 * * * 请求超时。
19 * * * 请求超时。
20 * * * 请求超时。
21 117 ms 104 ms 103 ms server-204-246-164-217.sin2.r.cloudfront.net [20
4.246.164.217]

跟踪完成。</pre><p></p>
<p>嗯，有点奇怪。一开始走的教育网的内网之后到了电信的骨干网。然后走的大概是中国电信的中美海底光缆。然后，WTF！地址怎么跑道新加坡了。以前电信的网抽的时候国内的包也跑道新加坡了。不过这个先不管，有可能是IP地址数据没更新。然后紧接着三个超时之后到达目标。这样来看应该没什么问题，至少IP层面上是通的。那就上WireShark抓包吧。</p>
<p><a href="http://www.261day.com/wp-content/uploads/2015/09/BTNSWTUP098HCPJPKV.png"><img src="http://www.261day.com/wp-content/uploads/2015/09/BTNSWTUP098HCPJPKV.png" /></a></p>
<p>惊了，这重传。这是TLS被GFW干扰之后直接IP丢包。没有任何办法，只能让他丢个开心喽。</p>]]></content>
        
        <summary type="html">
            
            这学期的网络课程要求用思科网络学院，然而并不能打开。好吧，抱着一探究竟的态度先去看一下吧。虽然直接ss可破，不过还是看一下GFW到底做了什么手脚吧。 首先访问主页，发现页面加载不出来，直到超时之后发现前端模板引擎没有解析。额，模板引擎竟然放在客户端来做，这个真的很少见。F12看
            
        </summary>
        
        <category term="网站开发"/>
        
    </entry>
    
    <entry>
        <title>九月一号无题</title>
        <link href="https://www.261day.com/%e4%b9%9d%e6%9c%88%e4%b8%80%e5%8f%b7%e6%97%a0%e9%a2%98/"/>
        <id>https://www.261day.com/%e4%b9%9d%e6%9c%88%e4%b8%80%e5%8f%b7%e6%97%a0%e9%a2%98/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2015-09-01T04:18:54+08:00</published>
        <updated>2015-09-01T04:18:54+08:00</updated>
        
        <content type="html"><![CDATA[<p>一直想写一点什么却一直以各种各样的借口没能动笔，什么在外地啦，什么写程序啦，什么赶火车啦，什么出去吃饭啦，什么回来补番啦，就这样又快两个月没有写博客。终于在新的这个月的凌晨三点我听着初音的音乐 又一次的动笔了。</p>
<p>前一段时间去北京听了黄广斌的ELM培训，还去黄岛又一次的蹭了一个智能数据处理方面的学术会议，然而并没有什么卵用。黄广斌的ELM虽然吹嘘的很厉害，然而我并不用；而数据处理会议上听了那么多报告结果只有两个相关领域的报告。</p>
<p>紧接着去了南京去中国软件杯成功打酱油。好吧，只拿了优秀奖这种事是谁也不想的（12梗）。在那里结交了一个新的基友，一问他发现他和布鲁克很熟，这既视感怎么回事呢，世界又一次的真的好小啊。之前认识szszss的时候结果发现他是Naylon的同学的时候就很吃惊了。</p>
<p>手头上个各种事情也是一堆。h萌新站开发拖了有半年了，boss这面神经网络的控制程序那面虽然外包出去也是要做的，齐鲁软件比赛我还带了三个队，我自己的代码一点还没有码，看来STG游戏大概又是够呛了。还有一个奇葩的国内的数学建模比赛，大概九月的人生也就交代这里</p>
<p>原本还打算做的一个爆菊b站的计划也搁浅了，还有动画数据库的计划也就都搁浅了。算了，突然发觉BGM已经成了LoveLive的歌曲，想到白天家里全都停水停电也是各种绝望，于是决定睡觉</p>]]></content>
        
        <summary type="html">
            
            一直想写一点什么却一直以各种各样的借口没能动笔，什么在外地啦，什么写程序啦，什么赶火车啦，什么出去吃饭啦，什么回来补番啦，就这样又快两个月没有写博客。终于在新的这个月的凌晨三点我听着初音的音乐 又一次的动笔了。 前一段时间去北京听了黄广斌的ELM培训，还去黄岛又一次的蹭了一个智
            
        </summary>
        
        <category term="杂记"/>
        
    </entry>
    
    <entry>
        <title>某钉子 2015 上半年的浏览器 A-Z</title>
        <link href="http://blog.dimpurr.com/a-z-2015-early/"/>
        <id>http://blog.dimpurr.com/a-z-2015-early/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-08-14T00:23:31+08:00</published>
        <updated>2015-08-14T00:23:31+08:00</updated>
        
        <content type="html"><![CDATA[<p>这段时间比较低调。但愿最后的结果是不鸣则已，一鸣惊人吧。</p>
<p>那么以下是凑数更新的利器，现在的浏览器 A-Z 记录 ——</p>
<p><span></span></p>
<ul>
<li>amazon.cn # 买很多很多书</li>
<li>bilibili.com # 补番</li>
<li>coursera.org # 听课</li>
<li>dimpurr.com</li>
<li>exhentai.org</li>
<li>feedly.com</li>
<li>google.com</li>
<li>hostker.com # (免费广告)</li>
<li>internationalsaimoe.com</li>
<li>jianshu.com # 写字</li>
<li>keep.google.com</li>
<li>linode.com</li>
<li>movie.douban.com/top250 # 电影</li>
<li>name.com</li>
<li>onedrive.live.com</li>
<li>plus.google.com # 不怎么上了</li>
<li>qzone.qq.com</li>
<li>rescuetime.com # 利器</li>
<li>s****.**</li>
<li>twitter.com</li>
<li>user.qzone.qq.com</li>
<li>v2ex.com</li>
<li>www.zhihu.com</li>
<li>xitu.io</li>
<li>yaca.cn</li>
<li>zh.wikipedia.org</li>
</ul>
<p>年轻人多看书，少卖弄。以上。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/a-z-2015-early/">某钉子 2015 上半年的浏览器 A-Z</a></p>]]></content>
        
        <summary type="html">
            
            这段时间比较低调。但愿最后的结果是不鸣则已，一鸣惊人吧。 那么以下是凑数更新的利器，现在的浏览器 A-Z 记录 ——   amazon.cn # 买很多很多书 bilibili.com # 补番 coursera.org # 听课 dimpurr.com exhentai.or
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="A-Z"/>
        
        <category term="Chrome"/>
        
        <category term="导航"/>
        
        <category term="年度"/>
        
        <category term="日常"/>
        
        <category term="浏览器"/>
        
        <category term="网站"/>
        
        <category term="链接"/>
        
    </entry>
    
    <entry>
        <title>visual studio code快捷键</title>
        <link href="https://www.261day.com/visual-studio-code%e5%bf%ab%e6%8d%b7%e9%94%ae/"/>
        <id>https://www.261day.com/visual-studio-code%e5%bf%ab%e6%8d%b7%e9%94%ae/</id>
        
        <author>
            <name>manageryzy</name>
        </author>
        
        <published>2015-07-12T20:46:44+08:00</published>
        <updated>2015-07-12T20:46:44+08:00</updated>
        
        <content type="html"><![CDATA[<p>怎么说呢，好久没有写博客，最近发现visual studio code真的实在是太好用了，就来按照官方的总结一下快捷键啦</p>
<p>这里的快捷键都是IBM PC的啦，至于Mac用户自己寻找好了。我会在下面把我认为比较常用的用粗体标示出来。比较鸡肋的用删除线标示出来。</p>
<p>本文章汇编自visual studio code的官方文档</p>
<h2>基础使用</h2>
<p>打开/关闭窗口左侧的边栏：Ctrl + B</p>
<p>增加一栏打开的文件窗口：Ctrl + \</p>
<p><del>在新的一栏里面打开文件：Ctrl + Enter （这个需要在左面的文件栏选择好文件，比较鸡肋）</del></p>
<p><strong>通过名称搜索打开文件：Ctrl + P</strong></p>
<p><strong>保存文件：Ctrl + S</strong> （BTW，保存文件不是Ctrl + S的异端都要灭亡！）</p>
<p>自动保存文件：Ctrl + Shift + P （不是很喜欢idea的那种模式）</p>
<p><strong>在目录下文件中全文搜索： Ctrl + Shift + F </strong></p>
<p>高级版的上一个功能： Ctrl + Shift + J</p>
<p><del>对编辑器输入命令：Ctrl + Shift + P</del> （就当这个是vi的冒号的模式好了）</p>
<p><strong>在最近打开的文件中切换：Ctrl + Tab</strong></p>
<p><strong>查找并且导航到符号：Ctrl + Shift + O</strong></p>
<p><strong>文件编辑窗口导航：Alt + ← 或者 Alt + →</strong> （这个倒是和idea很像）也可以通过<strong> Ctrl + 数字键 </strong>导航</p>
<h2>文件编辑</h2>
<p>跳转到匹配的括号：Ctrl + Shift + ]</p>
<p>多行选择：Alt + Click （鼠标左键） 或者 Ctrl + Alt + ↑ 或 Ctrl + Alt + ↓</p>
<p><strong>选择全部</strong>和当前光标所在的标识符<strong>同名的标识符</strong>：Ctrl + Shift + L 或者 Ctrl + F2 （代码重构反混淆神器）</p>
<p><strong>代码提示：Ctrl + Space</strong>（比起idea那么多代码提示的快捷键好多了，嗯，可是为什么我要黑idea呢）</p>
<p><strong>查看定义：F12 或者 Ctrl+ Click</strong></p>
<p>转到定义：Ctrl + Alt + Click</p>
<p><strong>查找符号：Ctrl + T</strong></p>
<p><strong>查找引用：Shift + F12 或 Alt + F12</strong></p>
<p><strong>重命名符号：F2</strong></p>
<p>查看所有错误：Ctrl + Shift + M</p>]]></content>
        
        <summary type="html">
            
            怎么说呢，好久没有写博客，最近发现visual studio code真的实在是太好用了，就来按照官方的总结一下快捷键啦 这里的快捷键都是IBM PC的啦，至于Mac用户自己寻找好了。我会在下面把我认为比较常用的用粗体标示出来。比较鸡肋的用删除线标示出来。 本文章汇编自visu
            
        </summary>
        
        <category term="原创"/>
        
        <category term="网站开发"/>
        
        <category term="Visual Studio Code"/>
        
        <category term="快捷键"/>
        
    </entry>
    
    <entry>
        <title>当你觉得你是为了我好的时候，是否真是为了我好？</title>
        <link href="http://blog.dimpurr.com/better-for-us/"/>
        <id>http://blog.dimpurr.com/better-for-us/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-07-11T23:22:26+08:00</published>
        <updated>2015-07-11T23:22:26+08:00</updated>
        
        <content type="html"><![CDATA[<p>父母常常会对孩子说，我这是为你好，等你长大你就懂了，然而最后孩子一辈子都没有懂。或者不说父母，还有些人，非常喜欢做其他人的人生导师，动不动对其他人说教一通，碰壁之后只好兀自抱怨别人「好心当成驴肝肺」。</p>
<p>这种情况往往都会面临一个问题，那就是，你觉得你是为他好的时候，你的做法是真的对他好吗？</p>
<p><span></span></p>
<p>我们还是分角度来看看父母和孩子这个很典型的例子。</p>
<p>父母最担心的情况，就是孩子不爱学习。之所以不爱，可能有两种情况。其一，这这个孩子并不明白学习对他人生的帮助和重要性；其二，也许这个孩子经过的认真思考，并且在他的人生目标中，的确不需要很高的成绩。第一种情况中，父母对孩子进行劝说，让他们明白学习的价值，显然是正当的；因为这符合孩子内心的愿望，例如更高的收入和成就等等。至于第二种情况，我反而感受颇深，也是问题的重点。</p>
<p>在我刚进入高中的时候，每天都处在特别打了鸡血的状态，那时候我就经常看不起身边的同学，因为他们丝毫没有学习的紧张感，也没有丰富的见识和视野。我觉得只有拼命努力早起摸黑才是正确的生活方式，甚至还极端到认为，救治那些绝症病人不仅增加家人的痛苦而且根本无法阻止死亡的到来，这种做法是不是浪费社会资源阻碍社会进步，而应该宣扬自觉去死的价值观？</p>
<p>当时在看完太宰治的「人间失格」之后我就开始质疑自己的想法是否正确。因为里面那种被我概括成「吸毒、自杀、玩女人」的生活方式实在刺激到了我 —— 有太多种方式活着了。最后我意识到一个问题，人活着，或者我们努力，并不是为了社会进步才是唯一正解。</p>
<p>所以，有的人不愿意认真学习上清华北大，那是因为他们的价值观里，和同学、朋友们游玩、打球的一个平平凡凡的青春是更重要的。而如果这个选择是他们经过认真思考而做出的，就应当受到尊重。同样的，父母的为孩子好，应当也是充分建立在孩子本人的价值观和人生观之上的。</p>
<p>也许你会问了，假如孩子想去杀人放火，你也得尊重他的选择？其实前述的意思就是，每个人都有在不危害他人的情况下，按照自己的价值观，实现自己的利益的权利。相反的，如果这个人在实现自己权益的时候可能危害他人，出于大多数人的利益即正义，的确应当阻止他。</p>
<p>不过就家长和孩子的情况，还会有第三种可能，那就是家长出于自己的价值观和利益，比如想在亲戚朋友面前有显摆的资本，或者将自己未完成的理想和志愿强加于孩子之上，因此而逼迫孩子改变价值观，选择学习。这种做法显然是值得批判的。</p>
<p>刚才所讲的所谓杀人放火，也即假如一个人的价值观与社会所需要的价值观相悖的时候怎么办，同时也折射出了更深的一个问题：解决问题的关键，需要找到这种价值观形成的根源。</p>
<p>比如高二语文课文中节选了鲁迅的「阿 Q 正传」中精神胜利法一篇，在这堂课上，我们就对文章反映的阿 Q 的人格，也即鲁迅想批判的当时时代的人格进行了激烈的讨论。我们的结论是，这种人格的形成是时代的悲哀，是在当时历史环境下生存所不得不选择的方式。</p>
<p>我们今天可以以此为鉴，避免自己重蹈覆辙，但是假若我们在今天拥有高度的知识和视野、人与人之间平等和谐的时代，指责平日受尽屈辱、无法受到教育的阿 Q 欺负弱小或自欺欺人以换取心理平衡、不懂得革命这样的行为，相当于要求对方在比自己恶劣的条件做到比自己还要伟大的事情。这样想的话，我们对阿 Q 指指点点的批判嘴脸是否显得太恶劣了一点？</p>
<p>事实上，真心想要改变阿 Q 这样的悲剧，就要明白其根源是封建社会的思想束缚，以及整个国家低下的教育和经济水平。与其坐享自己既得利益者的位置而批判他们，不如意识到自己身为幸运者而对当今世界不幸者的亏欠和责任，尽自己能力推动社会进步和公平。</p>
<p>如果要回到之前家长和孩子的例子，这种情况也许会是，家长应当意识到，孩子不喜欢读书而喜欢玩游戏的原因可能并非他们生性懒惰，因为他们也会用极大的毅力学习游戏技能；可能只是父母从未教会孩子思考和学习的乐趣，或者孩子在学习上屡屡受挫，只好用游戏填补自信心。</p>
<p>假若能够意识到这种价值观形成的原因所在，父母就会意识到自己实际上往往是自己的失职而未能让孩子形成一个健康向上的价值观。可惜在现实中，一些父母往往只是一味指责自己的孩子，而价值观的分歧又让亲子之间的关系裂痕显得越来越大。比如说，很多时候父母搞不明白为什么别家孩子那么勤奋，自家孩子就无心向学，只好选择打骂。</p>
<p>那么是不是只要孩子的价值观不是杀人防火，父母就没必要多嘴了呢？我的看法是，如果孩子的价值观实际上还算是积极健康，那么很多时候，的确是的。</p>
<p>比如国家宣传我们要好好学习，那是因为从国家和政府的角度，一群好好学习的公民显然利于长治久安。这个行为的出发点是首先是国家利益，当然在大部分时候也符合公民个人利益。其实每个人也应该支持鼓励别人好好学习，因为大家都好好学习社会就会进步，显然对自己有利。这就是这种行为的合理性。</p>
<p>但是每个人都是独特的，其价值观难免会有些地方和社会普遍价值观有所区别，这种区别也正是社会和人生的多样性所在。如果不能正视这些特别的价值观，一味用普遍价值观要求他们，不仅会磨灭他们原有的个性和创造力，更会造成无数不必要的误解和伤害。</p>
<p>父母对孩子也一样。应当说，从小开始，父母就必须要注意到各种细节对孩子的影响，主动引导孩子建立一个积极良好的世界观、人生观和价值观。而在孩子已经拥有独立和完整的人格之后，要学会尊重他们，平等的看待他们的个性和决定。</p>
<p>例子就分析到这里。</p>
<p>综上，问题的本质实际上是：当你说你是为谁好的时候，你应当从他人的价值观出发。如果你从自己的价值观出发那纯属狭隘，如果从社会普遍需要的价值观出发倒还是维护正义和集体利益；但是如果不是从对方价值观出发，就多半可能实际上损害了对方利益。</p>
<p>因此我建议，在自己面对想要帮助的人，而自己和对方价值观有冲突的时候，最好不要把随意自己的价值观标为正确，给自己一种道义上更高一筹的心理假象。这种心理是造成很多本可以避免的互相伤害的冲突根源。</p>
<p>如果你是真心想为对方好，本来应该优先从对方的角度考虑。不过如果实在不同意对方的价值观，那么应当先找出形成双方价值观差异的原因所在，这往往是不同的经历和理解所致。然后请让双方站在对等的位置，积极沟通，才能得出真正好的结果。</p>
<p>关于这个问题，要说的就是这么多。</p>
<p>之所以写这篇文章，一个目的是希望提醒一些身处或即将身处在父母、教师等教育者地位的人。很多父母并没有意识到他们在子女的成长和三观建立的过程中起到了多么大的正面和负面的影响，这也反映了一点，究竟有多少父母缺乏对教育问题的基本认识。</p>
<p>很多父母会忽视对孩子的人格和思想教育本身的重要性，总认为学习知识是唯一要务，好一点的的懂得要培养一下孩子良好的习惯，却忽略了对其根基，即三观的培养。他们总认为小县城也能出清华北大，认为孩子的精神人格不在自己的培养范围内。这是因为他们所处的时代才刚刚进入小康，对他们来说这一切有着一个理所当然的答案：为了吃饱肚子，为了过上好生活。</p>
<p>可是这一代的孩子并不一样，日渐被满足的物质文化需求使得他们开始会问生存的理由，学习和努力的理由是什么。这种疑惑在这种时代条件下是完全正常的，而父母辈因为时代的局限，导致的对这种问题的缺乏了解和漠不关心，使得这一代的孩子越发脆弱，更轻易的可能选择自暴自弃甚至放弃生命。只是很多父母却完全没有意识到问题所在，只懂得对孩子物质上的溺爱。</p>
<p>写这一篇文章的另一个目的，是提醒一些喜欢对他人说教，自以为为他人好的人。这也是曾经的我自己。这些人应当意识到，很多时候忍不住想对他人进行超出你义务内的「教育」的时候，也许只是你的虚荣心或者自我满足的作怪。即使是真心想为对方好，记住正文的结论，你要明白对方真正需要的是什么。如果草率的从自己的价值观出发，往往会为双方都带来没必要的伤害，这种时候，请问自己：你真的是在为对方好吗？</p>
<p>前文讨论的问题，还反映了一种个人和集体利益的矛盾。后面的内容，如果对哲学和政治这些太泛泛的问题没有兴趣，就请略过或者权当笑谈了。</p>
<p>我之前的论述，隐隐含着一种意思，大概可以表述为「在合法范围内，个人的意志是应当被绝对尊重的」。这句话也许在某些人听来会有些不是滋味，是不是只要不违法，你想怎样就怎样，我没什么可说的了呢？</p>
<p>是的，事实上就是这样。在前面我已经分析了，无论是从个人价值观还是社会普遍价值观出发，但是只要不是从本人的价值观出发，而又假如这个人所作的决策并非非理性，而只是在不同的价值观框架下理性决定的，那么，对此做出反对的行为就极有可能是会损害这个人利益的。</p>
<p>所以，上面问题的某一个角度反映的是个人价值观和社会所需要的价值观的矛盾，即个人利益和集体利益的矛盾。究竟应该选择哪个，应该说是没有简单明了的对错的，这个就有无数先辈和社会资本主义争霸的先例之类的为我们来讨论了，不在我们可以下定论的范畴。</p>
<p>但是即使我本人现在更偏好自由主义的观点，我个人还是倾向于认为中国不论从历史文化传统、国情和社会主义的国体出发都更需要的是集体主义。而如何培养养尊处优、多为独生子女的这一代乃至下一代的集体主义精神，又是一个长远的话题了。</p>
<p>当然，这不影响正文得出的结论，如果你不得不为集体利益牺牲对方个人利益，请不要说成是为对方好。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/better-for-us/">当你觉得你是为了我好的时候，是否真是为了我好？</a></p>]]></content>
        
        <summary type="html">
            
            父母常常会对孩子说，我这是为你好，等你长大你就懂了，然而最后孩子一辈子都没有懂。或者不说父母，还有些人，非常喜欢做其他人的人生导师，动不动对其他人说教一通，碰壁之后只好兀自抱怨别人「好心当成驴肝肺」。 这种情况往往都会面临一个问题，那就是，你觉得你是为他好的时候，你的做法是真的
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="人生"/>
        
        <category term="价值观"/>
        
        <category term="哲学"/>
        
        <category term="学习"/>
        
        <category term="教育"/>
        
        <category term="理想"/>
        
    </entry>
    
    <entry>
        <title>HTML Head Generator – 纯 CSS 实现的头部元标签代码生成器</title>
        <link href="http://blog.dimpurr.com/head-generator/"/>
        <id>http://blog.dimpurr.com/head-generator/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-05-30T20:09:23+08:00</published>
        <updated>2015-05-30T20:09:23+08:00</updated>
        
        <content type="html"><![CDATA[<p>前段时间突发奇想，捣鼓出了这个纯 CSS 选择器实现的在线 HTML &lt;head&gt; Meta 标签生成器，以解决每次要写 HTML 头都得去找个之前的文档复制，还得琢磨半天需要哪些的麻烦。没有到用一行 JavaScript ，基本原理是 CSS 3 的 + 紧邻选择器和 ~ 同级后继选择器。前端攻城狮们可以用短链接 <a href="http://find.moe/headgen" target="_blank">http://find.moe/headgen</a> 快速访问，也可以拖到收藏夹备用。</p>
<p>感谢 <a href="http://dring.cc/" target="_blank">电灵</a> 酱对最终样式的建议。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/05/headgen.png"><img src="http://img1.dimpurr.com/dimblog/2015/05/headgen-600x363.png" /></a><p>Dimpurr’s Head Tag Generator</p></div>
<p>写的时候感觉槽点一大堆，过了一周什么都忘了 …… 简单说明一下实现的要点吧。如果有更好的实现思路或觉得有可以改进的地方敬请指教，不过，前提是无 JavaScript 。</p>
<p><span></span></p>
<p>首先是要在无 JavaScript 的情况下，实现左侧的多选和单选按钮效果。尝试了几种隐藏复选框的方案之后，最后实现的原理是这样的：</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/05/2015-05-30-下午7.49.51.png"><img src="http://img1.dimpurr.com/dimblog/2015/05/2015-05-30-下午7.49.51-600x202.png" /></a><p>Checkbox + Span</p></div>
<p>修改 <code>&lt;input type=&quot;checkbox&quot; /&gt;</code> 和 <code>&lt;input type=&quot;radio&quot; /&gt;</code> 的尺寸和边距，使之和后继 Span 模拟的按钮完全重合，并设置透明度 <code>opcatiy: 0</code> 。当复选框或多选框选中之后，使用伪类控制 Span 的样式变化：<code>.check:checked + span { ... }</code></p>
<p>同样，在代码生成部分，预先存储好生成器可能用到的代码并设置 <code>display: none</code> 。最后为每组标签的选择框和对应代码设置相同样式，然后设置当选中时显示： <code>.xxx:checked ~ .code .xxx { display: block; }</code></p>
<p>当然，这就会需要一长串不同的类名，可能会导致极其难以维护的 HTML 代码。一般可以用 LESS 之类的解决方案，不过我最后是把数据部分抽出写了个蹩脚的 Python 脚本来生成文档结构。</p>
<p>另外，我尽可能的收集了大部分常用的 Head 标签，如果鼠标悬浮在按钮上还可以看到我三脚猫英文的注释。有什么要补充的话可以回复我，或者去我的 Github Repo 里找源码。</p>
<h3>参考来源</h3>
<ul>
<li><a href="http://fex.baidu.com/blog/2014/10/html-head-tags/" target="_blank">HTML head 头标签 – FEX</a></li>
<li><a href="https://github.com/yisibl/blog/issues/1" target="_blank">常用的 HTML 头部标签 · Issue #1 · yisibl/blog</a></li>
<li><a href="http://code.lancepollard.com/complete-list-of-html-meta-tags/" target="_blank">Complete List of HTML Meta Tags | Lance Pollard</a></li>
<li><a href="http://iblogc.com/2015/05/06/UC和QQ浏览器私有META/" target="_blank">UC&amp;QQ浏览器私有META | Korvin’s blog</a></li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/head-generator/">HTML Head Generator – 纯 CSS 实现的头部元标签代码生成器</a></p>]]></content>
        
        <summary type="html">
            
            前段时间突发奇想，捣鼓出了这个纯 CSS 选择器实现的在线 HTML &amp;lt;head&amp;gt; Meta 标签生成器，以解决每次要写 HTML 头都得去找个之前的文档复制，还得琢磨半天需要哪些的麻烦。没有到用一行 JavaScript ，基本原理是 CSS 3 的 + 紧邻选择
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS3"/>
        
        <category term="HTML"/>
        
        <category term="Python"/>
        
        <category term="代码"/>
        
        <category term="前端"/>
        
    </entry>
    
    <entry>
        <title>Slackview – 多级响应式 WordPress 主题</title>
        <link href="http://blog.dimpurr.com/slackview/"/>
        <id>http://blog.dimpurr.com/slackview/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-05-30T18:46:21+08:00</published>
        <updated>2015-05-30T18:46:21+08:00</updated>
        
        <content type="html"><![CDATA[<p>Slackview 是一个黑色扁平大气风格、 HTML5 多级响应式三栏布局的 WordPress 主题。她是 <a href="http://blog.dimpurr.com/clearision/" target="_blank">Clearision</a> 的姐妹主题，也将是我的第二款长期自用主题。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/05/screenshot.png"><img src="http://img1.dimpurr.com/dimblog/2015/05/screenshot-600x417.png" /></a><p>Slackview</p></div>
<p><span></span></p>
<h3>功能特点</h3>
<ul>
<li>宽屏、平板、移动三级响应式布局</li>
<li>站点头图和文章特色图片支持</li>
</ul>
<h3>获取主题</h3>
<ul>
<li>演示 <a href="http://work.dimpurr.com/demo/wp/slackview/" target="_blank">Slackview Demo Site</a></li>
<li>下载 <a href="https://github.com/dimpurr/Slackview/releases/" target="_blank">Github Release</a></li>
</ul>
<h3>使用说明</h3>
<ul>
<li>记得将 <code>img/background.png</code> 替换为你的站点头图</li>
<li>侧边栏的最后一个 Widget 将会自动应用 Sticky 滚动粘连效果</li>
<li>支持多级导航菜单</li>
<li>正文中 <code>&lt;pre&gt;</code> 为多行代码， <code>&lt;code&gt;</code> 为行内代码</li>
<li>没有后台设置，功能扩展请用插件解决</li>
<li>评论区居中的设计将保留，不满意请自行修改</li>
</ul>
<h3>截图预览</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2015/05/article.png"><img src="http://img1.dimpurr.com/dimblog/2015/05/article-600x337.png" /></a><p>Slackview Article</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2015/05/mobile.png"><img src="http://img1.dimpurr.com/dimblog/2015/05/mobile-600x881.png" /></a><p>Slackview Mobile</p></div>
<p> </p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/slackview/">Slackview – 多级响应式 WordPress 主题</a></p>]]></content>
        
        <summary type="html">
            
            Slackview 是一个黑色扁平大气风格、 HTML5 多级响应式三栏布局的 WordPress 主题。她是 Clearision 的姐妹主题，也将是我的第二款长期自用主题。 Slackview  功能特点  宽屏、平板、移动三级响应式布局 站点头图和文章特色图片支持  获取
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Clearision"/>
        
        <category term="Slackview"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
    </entry>
    
    <entry>
        <title>密码保护：五月喵~</title>
        <link href="https://yoooooooooo.com/yukari/?p=53"/>
        <id>https://yoooooooooo.com/yukari/?p=53</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2015-05-20T18:54:01+08:00</published>
        <updated>2015-05-20T18:54:01+08:00</updated>
        
        <content type="html"><![CDATA[
<p>这是一篇受密码保护的文章，您需要提供访问密码：</p>
<p>密码：  </p>
]]></content>
        
        <summary type="html">
            
             这是一篇受密码保护的文章，您需要提供访问密码： 密码：   
            
        </summary>
        
        <category term="日常"/>
        
    </entry>
    
    <entry>
        <title>五月了……</title>
        <link href="https://yoooooooooo.com/yukari/?p=50"/>
        <id>https://yoooooooooo.com/yukari/?p=50</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2015-05-20T18:34:34+08:00</published>
        <updated>2015-05-20T18:34:34+08:00</updated>
        
        <content type="html"><![CDATA[<p>转眼马上就要毕业了呢……于是在乐视找了一份工作，云颜文字也在继续中~</p>
<p><a href="https://yoooooooooo.com/yukari/wp-content/uploads/2015/05/B_-uH5PUIAAxO4h.jpg"><img src="https://yoooooooooo.com/yukari/wp-content/uploads/2015/05/B_-uH5PUIAAxO4h-224x300.jpg" /></a></p>]]></content>
        
        <summary type="html">
            
            转眼马上就要毕业了呢……于是在乐视找了一份工作，云颜文字也在继续中~ 
            
        </summary>
        
        <category term="日常"/>
        
    </entry>
    
    <entry>
        <title>Django 学习手记 二 建立模型层</title>
        <link href="http://blog.dimpurr.com/django-note-2/"/>
        <id>http://blog.dimpurr.com/django-note-2/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-04-12T00:56:56+08:00</published>
        <updated>2015-04-12T00:56:56+08:00</updated>
        
        <content type="html"><![CDATA[<p>这篇文章记录了如何创建 Django 项目的一个子应用并编写 models.py 。如有错误，请不吝赐教。</p>
<p>Django 框架同样遵循 MVC 开发模式。在 Django 中，我们定义 Model 数据模型并自动同步生成数据库和后台，由 Template 和 Views 处理界面并转交 URLconf 控制器。</p>
<p>因为 MVC 中 C (Controller) 的部分主要交给框架进行，我们也将 Django 称为 MTV (Model, Template, Views) 模式。 <a href="http://djangobook.py3k.cn/2.0/chapter05/#cn19" target="_blank">参见</a></p>
<p>一个 Django 项目有两种层级，称为 project 项目 和 app 应用。一般来说，一个 project 就是一个完整的站点，比如一个大型论坛或者门户站点。而一个 app 就是一个有完整功能、可复用的应用，比如一个私信组件，一个投票组件或者一个讨论版。</p>
<p>一个 project 即使没有 app 也能独立运行，但是一个独立的 app 可以在不同的 project 中复用。另外，如果你要使用 Django 的模型功能即数据库层，模型必须存放在 app 中。</p>
<h3>创建应用并建立模型</h3>
<p>执行 <code>./manage.py startapp polls</code> 命令，来创建一个名为 polls 的 app 。同样， Django 会自动在项目根目录下创建一个名为 polls 的目录和一系列文件。我们会以 Django 官方教程为例，先编写一个投票应用。</p>
<p>在这个应用中，我们需要 Quesntion 问题和 Choice 选项两个类，并且添加一系列的属性。</p>
<p>首先，我们编辑 <code>polls/models.py</code> ，这个文件就是你的模型：</p>
<p><span></span></p>
<pre>from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=50)
    email = models.EmailField()

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    authors = models.ManyToManyField(Author)

        # class Meta:
        # date = [&quot;pub_date&quot;]
        # text_filed_name = “question”

class Choice(models.Model):
    question = models.ForeignKey(Question)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)</pre>
<p>代码很容易理解。为 <code>question_text</code> 这样的属性名提供一个易读的名字会方便接下来的开发。</p>
<p>对于一个类，提供一个名为 Meta 的内嵌类，可以存放一些「不是 Field」的 Field ，比如排序信息，数据库名。<a href="https://docs.djangoproject.com/en/1.8/ref/models/options/" target="_blank">详见</a></p>
<h3>应用更改</h3>
<p>编辑完成后，我们修改 project 根目录的 <code>settings.py</code> ，找到 INSTALLED_APPS ，在已安装应用列表的底部加上我们自己的新 app <code>'polls'</code> 。这里也列出了其他的自带 app ，如果用不着，可以注释掉。</p>
<p>运行 <code>./manage.py makemigrations polls</code> 以生成更改。这个命令同时会生成类似 <code>polls/migrations/0001_initial.py</code> 的脚本文件，它们是人类可读的，但是一般你不需要太过在意。使用 <code>./manage.py sqlmigrate polls 0001</code> 命令可以查看生成的数据库命令。</p>
<p>最后使用 <code>./manage.py migrate</code> 迁移命令，应用更改到数据库。</p>
<p>下篇文章将会介绍如何使用 <code>./manage.py shell</code> 测试当前的数据模型、以及关于元素间互相绑定和关联的详情。<a href="https://docs.djangoproject.com/en/1.8/topics/db/models/#relationships" target="_blank">元素绑定详见</a></p>
<h3>Field 类型参考</h3>
<p>下面是一些常用的 Field 类型和部分特有的参数。</p>
<ul>
<li><code>ForeignKey(Class_Name, limit_choices_to={‘key_name’: value}, on_delete=models.SET_NULL)</code>
<ul>
<li>绑定一个其他类的元素(类名、可以是 ‘self’, 对于目标的属性的限制条件，关联目标被删除时的操作)</li>
<li>一般会生成一个下拉列表</li>
</ul>
</li>
<li><code>ManyToManyField</code> # 多对多关联，用法同上</li>
<li><code>OneToOneField</code> # 单对单关联，用法同上</li>
<li><code>CharField(max_length = 100)</code> # 字符</li>
<li><code>TextField(max_length = 100)</code> # 字符</li>
<li></li>
<li><code>SlugField</code> # 为 CMS 预留的别名栏，用法同上</li>
<li><code>DateField(auto_now/auto_now_add)</code></li>
<li>
<ul>
<li>日期 (自动设为最后编辑日期/自动设为首次创建日期)</li>
</ul>
</li>
<li><code>TimeField</code> # 时间</li>
<li><code>DateTimeField</code> # 日期和时间，参数同上</li>
<li><code>IntegerField</code> # 实数</li>
<li><code>BigIntegerField</code> # 大实数</li>
<li><code>FloatField</code> # 浮点数</li>
<li><code>BooleanField</code> # True or False 单选</li>
<li><code>EmailField</code> # 邮件</li>
<li><code>IPAddressField</code> # IP 地址</li>
<li><code>GenericIPAddressField(protocol=ipv4, unpack_ipv4=False)</code>
<ul>
<li>自动获得 IP 地址(协议限制，解包去掉 ::ffff: 前缀)</li>
</ul>
</li>
<li><code>URLField</code> # URL 地址</li>
<li><code>FileField(upload_to = ‘photos/%Y/%m/%d’ )</code>
<ul>
<li>文件(相对于 MEDIA_ROOT 设置的媒体路径的子目录，支持解析日期)</li>
<li><a href="https://docs.djangoproject.com/en/1.8/topics/files/" target="_blank">文件系统参见</a></li>
<li><a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/#filefield-and-fieldfile" target="_blank">文件 Field 的调用方法参见</a></li>
</ul>
</li>
<li><code>ImageField</code>
<ul>
<li>图片，参数同上，可以通过 height_field 和 width_field 熟悉拿到宽高</li>
</ul>
</li>
<li><code>FilePathField(path=&quot;/home/images&quot;, match=“*.png”, recursive=True, allow_files = True, allow_folders = False)</code>
<ul>
<li>文件路径(起始路径，正则匹配，包含子目录，允许选择文件，允许选择目录)</li>
</ul>
</li>
</ul>
<h3>Field 参数参考</h3>
<p>以下是一些其他常用的通用参数。</p>
<ul>
<li><code>blank = true</code> # 该属性可为空</li>
<li><code>null = Ture</code> # 该属性可为 null</li>
<li><code>choices = a_list_or_a_tuple</code> # 该属性从一个列表中选择，值的具体写法见列表结束</li>
<li><code>default = 'A default value'</code> # 设置默认值</li>
<li>validators = [validate_even] # 设置数据有效性验证器 <a href="https://docs.djangoproject.com/en/1.8/ref/validators/" target="_blank">详见</a></li>
</ul>
<p>使用如下形式的，最终的每个元素是 (‘option value’, ‘option name’) 形式的元组的多层嵌套元组，可以定义一个任意层级的可选列表。最终将会在 HTML 中生成多个 select 下拉列表的形式。第一项是 None 的元组会被作为默认选项。<a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/#choices">详见</a></p>
<pre>MEDIA_CHOICES = (
    ( None, 'Unknown' ),
    ( 'Audio', ( ('vinyl', 'Vinyl'), ('cd', 'CD'), ) ),
    ( 'Video', ( ('vhs', 'VHS Tape'), ('dvd', 'DVD'), ) ),
)</pre>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/django-note-2/">Django 学习手记 二 建立模型层</a></p>]]></content>
        
        <summary type="html">
            
            这篇文章记录了如何创建 Django 项目的一个子应用并编写 models.py 。如有错误，请不吝赐教。 Django 框架同样遵循 MVC 开发模式。在 Django 中，我们定义 Model 数据模型并自动同步生成数据库和后台，由 Template 和 Views 处理界
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Django"/>
        
        <category term="Django 学习手记"/>
        
        <category term="MVC"/>
        
        <category term="Python"/>
        
        <category term="Web"/>
        
        <category term="编程"/>
        
    </entry>
    
    <entry>
        <title>Django 学习手记 一 安装和配置</title>
        <link href="http://blog.dimpurr.com/django-note-1/"/>
        <id>http://blog.dimpurr.com/django-note-1/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-04-11T22:35:55+08:00</published>
        <updated>2015-04-11T22:35:55+08:00</updated>
        
        <content type="html"><![CDATA[<p>Django 是一款知名的 Python Web 框架，最初为 CMS 设计，现在已经发展成为了一个能快速根据抽象数据模型生成和维护数据库、后台、和模版系统，同时自带用户系统、地址重写等大量实用功能的大型框架。</p>
<p>本文为个人在 Django 学习中的一些心得体会，主要是官方教程和参考文档的一些整理和归纳，并非完全依照原教程翻译而来，因此如有错误，请不吝赐教。</p>
<p>由于本文力求语言精简、参考方便，因此很多较为基础的内容，并没有特别详细的进行解释。不过在容易混淆的部分，大部分都提供了有对应的详细解释说明的「参见」链接，应当注意。</p>
<h3>参考资料</h3>
<ul>
<li>官方文档 <a href="https://docs.djangoproject.com/en/" target="_blank">https://docs.djangoproject.com/en/</a></li>
<li>The Django Book (Chinese) <a href="http://djangobook.py3k.cn/2.0/" target="_blank">http://djangobook.py3k.cn/2.0/</a></li>
</ul>
<h3>安装 Django</h3>
<p>首先，安装 Python 的包管理器 <a href="http://pip.pypa.io" target="_blank">pip</a> 。首先尝试使用 Python 自带的 easy_install 模块安装：</p>
<p><span></span></p>
<pre>easy_install pip</pre>
<p>如果成功就没问题了。如果无法使用 easy_install ，使用以下方式安装：</p>
<pre>wget https://bootstrap.pypa.io/get-pip.py
sudo python get-pip.py</pre>
<p>完成之后，编辑配置文件，如果没有可以新建一个，换用豆瓣源加速下载： <code>~/.pip/pip.conf</code></p>
<pre>[global]
index-url = http://pypi.douban.com/simple/</pre>
<p>现在可以使用 PiP 安装 Django 了。安装成功后，查看 Django 版本号。</p>
<pre>sudo pip install django
python -c &quot;import django; print(django.get_version())&quot;</pre>
<h3>开始项目</h3>
<p>在打算存放项目文件的位置使用一下命令， testsite 是站点的名字。随后， Django 会自动创建一个同名文件夹和一些必要文件。出于权限控制合安全考虑，不建议存放在类似 <code>/var/www</code> 的网站目录下，实际上， Django 项目可以运行在任何位置。</p>
<pre>django-admin.py startproject testsite</pre>
<p>编辑文件夹内的 <code>settings.py</code> ，修改语言和时区设置。</p>
<pre>LANGUAGE_CODE = 'zh-cn'
TIME_ZONE = 'Asia/Shanghai'</pre>
<p>然后进行数据库设置。</p>
<p>默认的设置是 Python 自带的 SQLite3 ，简单易用、单文件存储，你可以修改 <code>'NAME': os.path.join(BASE_DIR, 'db.sqlite3')</code> 后面的 db.sqlite3 为自己想要的相对项目根目录的路径和数据库文件名。下面是一份其他数据库的示例。</p>
<pre>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': ‘数据库名’,
        'USER': ‘数据库用户’,
        'PASSWORD': ‘数据库密码’,
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}</pre>
<p>如果想使用其他的数据库，可以尝试把 <code>'ENGINE'</code> 的值改为以下 Django 自带支持的数据库包。如果打算使用的数据库不包含在下列列表中，可以尝试直接填写该数据 Python 包的全名。<a href="https://docs.djangoproject.com/en/1.7/ref/settings/#std:setting-DATABASE-ENGINE" target="_blank">详见</a></p>
<ul>
<li><code>django.db.backends.postgresql_psycopg2</code></li>
<li><code>django.db.backends.mysql</code></li>
<li><code>django.db.backends.sqlite3</code></li>
<li><code>django.db.backends.oracle</code></li>
</ul>
<p>如果你使用的是 SQLite3 以外的数据库，运行 <code>./manage.py shell</code> 进入 Django 环境的测试用交互式 Shell ，使用以下命令进行测试连接。如果没有报错信息说明链接成功。</p>
<pre>&gt;&gt;&gt; from django.db import connection
&gt;&gt;&gt; cursor = connection.cursor()</pre>
<p>配置完成后，执行 <code>./manage.py migrate</code> ，首次创建项目数据库。我们姑且将这个命令称为「迁移」。在较老版本的教程中这一步会执行 syncdb ，实际上 migrate 这个命令原本来自一个叫 <a href="http://south.aeracode.org/" target="_blank">South</a> 的插件，在 Django 1.7 以上<a href="https://docs.djangoproject.com/en/1.8/releases/1.7/#schema-migrations" target="_blank">变为自带</a>，拥有比 syncdb 更高级的数据库同步和版本控制特性。</p>
<p>创建完成后，执行 <code>./manage.py runserver 127.0.0.1:8888</code> ，最后的地址和端口可以自行修改或省略，就可以成功运行 Django 的测试服务器了。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/django-note-1/">Django 学习手记 一 安装和配置</a></p>]]></content>
        
        <summary type="html">
            
            Django 是一款知名的 Python Web 框架，最初为 CMS 设计，现在已经发展成为了一个能快速根据抽象数据模型生成和维护数据库、后台、和模版系统，同时自带用户系统、地址重写等大量实用功能的大型框架。 本文为个人在 Django 学习中的一些心得体会，主要是官方教程和
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Django"/>
        
        <category term="Django 学习手记"/>
        
        <category term="Python"/>
        
        <category term="Web"/>
        
        <category term="数据库"/>
        
        <category term="编程"/>
        
    </entry>
    
    <entry>
        <title>书柜大整理 (Lゝω·)~☆ Kira</title>
        <link href="http://blog.dimpurr.com/bookcase-clean/"/>
        <id>http://blog.dimpurr.com/bookcase-clean/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-03-06T23:53:33+08:00</published>
        <updated>2015-03-06T23:53:33+08:00</updated>
        
        <content type="html"><![CDATA[<p>为了制定新学期的阅读计划，看着乱七八糟的书柜实在不爽，于是折腾了一整个晚上把自己的书柜整理好了 …… 相应为自己的两个书架做了份布局对照表。于是留档。</p>
<h3>房间内主役小书柜</h3>
<p>就在钉子房间书桌旁边触手可及的书柜。存放常用的书，不过也有不少书带到学校了，比如看了十来遍的「量子力学史话」缺席此合照。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/03/QQ20150306-1.png"><img src="http://img1.dimpurr.com/dimblog/2015/03/QQ20150306-1-600x400.png" /></a><p>钉子房间内的小书架の对照表</p></div>
<p><span></span></p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/03/DSC_0656.jpg"><img src="http://img1.dimpurr.com/dimblog/2015/03/DSC_0656-563x1000.jpg" /></a><p>房间内主役小书柜</p></div>
<h3>书房藏书用大书柜</h3>
<p>钉子家书房的书柜有整面墙大小，于是钉子果断霸占了靠左的两列。除了轻小说基本上存放的都是小学初中看的，和其他现在不常看的书。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/03/QQ20150306-2.png"><img src="http://img1.dimpurr.com/dimblog/2015/03/QQ20150306-2-600x291.png" /></a><p>钉子书房的两列书柜の对照表</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2015/03/DSC_0658.jpg"><img src="http://img1.dimpurr.com/dimblog/2015/03/DSC_0658-563x1000.jpg" /></a><p>书房藏书柜</p></div>
<p>以上。怎么感觉还是小学时的自己（相对同龄人的阅读面来说）比较菊苣 ……</p>
<p>新的学期开始了，大概忙起来博客也会再次变得安静吧 ……。另外也许有人发现，咱把博客背景换了，记得这个画面是小圆中沙耶香失去灵核的片段，当时被构图震惊果断截的图。嘛，也祝愿我在接下来更多生死未卜的高中征途中好运吧。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/bookcase-clean/">书柜大整理 (Lゝω·)~☆ Kira</a></p>]]></content>
        
        <summary type="html">
            
            为了制定新学期的阅读计划，看着乱七八糟的书柜实在不爽，于是折腾了一整个晚上把自己的书柜整理好了 …… 相应为自己的两个书架做了份布局对照表。于是留档。 房间内主役小书柜 就在钉子房间书桌旁边触手可及的书柜。存放常用的书，不过也有不少书带到学校了，比如看了十来遍的「量子力学史话」
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="书"/>
        
        <category term="学习"/>
        
        <category term="小说"/>
        
        <category term="文学"/>
        
        <category term="考试"/>
        
        <category term="阅读"/>
        
    </entry>
    
    <entry>
        <title>量子计算机有什么实际的应用意义？</title>
        <link href="http://blog.dimpurr.com/quantum-means/"/>
        <id>http://blog.dimpurr.com/quantum-means/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-02-18T09:44:26+08:00</published>
        <updated>2015-02-18T09:44:26+08:00</updated>
        
        <content type="html"><![CDATA[<blockquote><p>此回答由本人原载于知乎：<a href="http://zhi.hu/fvDI" target="_blank">如何用圈外人士能理解的文字解释「量子退火」？ – Cheny Dimpurr 的回答 – 知乎</a></p></blockquote>
<p>鄙人见识浅薄，还请诸位大神指正。</p>
<p>量子有一种很神奇的特性，也就是量子的叠加态。一个粒子，在我们观测之前，它处于又左旋又右旋的状态。但是我们观测以后，我们只能得到要么左旋，要么右旋的结果。换句话说，在观测的一瞬间，它「塌缩」了。</p>
<p>对于量子处于叠加态的证明，可以搜索一下托马斯·杨的「双缝干涉实验」中，观测手段影响光的波粒二象性的表现，以及「延迟决定实验」中，在一切结束后再对过程进行决定的实验。可以说，量子论打破了经典物理学中的决定论和定域性，实际上，不存在一个确定的「历史」，而取决于我们观察的方式。同时，不同的观测方式甚至可以导致不同的历史。</p>
<p>把它放到量子计算机上，这意味着几个好处。</p>
<p><span></span></p>
<p>第一，是指数级增长的计算能力。经典计算机中，一个经典比特只能存储一位信息，要么是 1 ，要么是 0 。但是在量子计算机中，这个比特可能是 0 ，也可以是 1 ，关键是它们同时参与了计算，而只在你观测时，才会塌缩成一个完全确定的解答。假如是 10 经典比特，那么相当于 10 位数据参与运算。而 10 量子比特，就是 2^10 ，也就是 1024 位数据参与了运算，这是多么巨大的差距。</p>
<p>第二，假设现在你的手放在键盘上，准备进行 Google 搜索。不可思议的地方在于，甚至在你想好要搜什么之前，量子计算机就可以完成计算！乍看起来这样非常不合常理，但是实际上，在你打字时，后台就可以开始进行计算。这个计算可能是各种搜索关键字的叠加态，而在你打好字按下回车时，这个叠加态一瞬间塌缩为你要的关键字，你的搜索早已运算完毕了。</p>
<p>第三，我们现在计算机的主要热量，来源于我们对存储器的不断读写和重置。假设我们的存储器内有 0 和 1 组成的杂乱无章的数据，现在我们全部清零。这一刻，我们的存储器显然变得更加「有序」，即无序程度「熵」的降低，而根据热力学定律，这些熵就以热量的形式散发出去。因为微观粒子的幺正性，量子的运算是一种完全可逆计算，信息不会丢失而得到重用，几乎不会有热量的散失。</p>
<p>所以说，届时在一块手表上实现超越一切经典计算机的算力，并且超低功耗和热量，的确不是不可能的。我们可以期待通用量子计算机普及的时候，人类文明会迎来多大的飞跃。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/quantum-means/">量子计算机有什么实际的应用意义？</a></p>]]></content>
        
        <summary type="html">
            
            此回答由本人原载于知乎：如何用圈外人士能理解的文字解释「量子退火」？ – Cheny Dimpurr 的回答 – 知乎 鄙人见识浅薄，还请诸位大神指正。 量子有一种很神奇的特性，也就是量子的叠加态。一个粒子，在我们观测之前，它处于又左旋又右旋的状态。但是我们观测以后，我们只能得
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="物理"/>
        
        <category term="知乎"/>
        
        <category term="量子"/>
        
        <category term="量子计算机"/>
        
    </entry>
    
    <entry>
        <title>如何用圈外人士能理解的文字解释「量子退火」？</title>
        <link href="http://blog.dimpurr.com/quantum-annealing/"/>
        <id>http://blog.dimpurr.com/quantum-annealing/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-02-18T09:39:07+08:00</published>
        <updated>2015-02-18T09:39:07+08:00</updated>
        
        <content type="html"><![CDATA[<blockquote><p>此回答由本人原载于知乎：<a href="http://zhi.hu/fuv9" target="_blank">如何用圈外人士能理解的文字解释「量子退火」？ – Cheny Dimpurr 的回答 – 知乎</a></p></blockquote>
<p>不邀自来，见识浅薄，还请诸位大神指正。</p>
<p>量子退火法，是一种基于量子特性的量子计算机算法，脱胎于经典计算机上的模拟退火算法。实际上，模拟退火算法的步骤和思路，与金属的退火确实有着异曲同工的妙处。</p>
<blockquote><p>将金属加温到某个高于再结晶温度的一点并维持此温度一段时间，再将其缓慢冷却。<br />
—— <a href="http://zh.wikipedia.org/wiki/%E9%80%80%E7%81%AB" target="_blank">退火<i></i></a> – Wikipedia</p></blockquote>
<p>关于通用量子计算机的原理和特性，可以参见我的另一个回答：<a href="http://zhi.hu/fvDI" target="_blank">量子计算机有什么实际的应用意义？ – Cheny Dimpurr 的回答</a></p>
<p>作为量子退火机应用较多的一种特性，再补充一种神秘的「量子隧道效应」。这种效应一般来说，指的是微观粒子有一定纪律穿过穿过不可能穿越的壁障，出现在壁障的另一端的情况。因为一个微观量子并不存在一个精确的位置，而是以一定概率分布在一片区域，化学上的电子云概念就是这样的。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/02/d55d83bb687b4d982f0287f2974ea76e_b.jpg"><img src="http://img1.dimpurr.com/dimblog/2015/02/d55d83bb687b4d982f0287f2974ea76e_b.jpg" /></a><p>量子隧道效应</p></div>
<p>假设容器的边缘有一个粒子，蓝色的深浅标出了它的德布罗意波，即它可能出现的位置的可能性大小。可以注意到，在很小的几率下，这个粒子会出现在容器的对面。不是漏出，也不是穿过，而是瞬移！但是这也不是瞬移，因为对于电子来说，它本来就有可能出现在那里，只是在你观测的时候，本来存在于一定范围的电子忽然给出了一个正好的容器外的位置。</p>
<p>首先，我们先来看看我们都熟悉的一种贪心算法，爬山算法。</p>
<p>爬山算法指的是以以一个任意值为起始点，计算临近的解，然后不断判断这个解和符合条件的差距，选择选择更适合的方向继续计算，直到达到一个任意方向都是更劣解的位置。</p>
<p><span></span></p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/02/b3c44a2f3adaf1b87a54906de4d85be4_b.jpg"><img src="http://img1.dimpurr.com/dimblog/2015/02/b3c44a2f3adaf1b87a54906de4d85be4_b-600x325.jpg" /></a><p>解的示例图像</p></div>
<p>来看看这幅图。假设蓝线的位置就是正解的位置。</p>
<p>首先，一个登山者（计算机）从 <b>FE</b> 段的任意一处出发。对他来说，向下走无疑是更接近正解的。只不过，当他走到了山谷，也就是 <b>E</b> 点时，他会发现：此时无论他往哪边走，都会距离谷底更远！</p>
<p>我们的爬山者被困在山谷底，或者说「势阱」了。</p>
<p>至于模拟退火法，引入了一个随机的扰动，也就是温度 <i>T</i><i> 。</i></p>
<p>我们可以这样来概括它的步骤：</p>
<ol>
<li>在值域内，按照随机扰动 <i>Δ</i> ，产生一个一定范围距离的新解</li>
<li>判断新解和正解的距离，与当前解与新解的距离进行比较</li>
<li>如果可以接受，那么在当前 <i>T </i>的范围内，有一定可能性改用新解</li>
<li>当确定正解在某个区间以内时，缩小范围继续应用模拟退火算法</li>
</ol>
<p>实际上，就模拟退火算法的具体实现来说这个概括不是很准确。不过这样一来，就可以看出它和爬山算法的最大区别：我们的登山者一次被困在山谷 <b>E</b> 时，他可以选择瞬移到 DC 段的某处，并且惊喜的发现这里更接近正解！在对「整座山」通过统计学方法「退火」时，他就会发现最接近正解的区间<b>BCD</b> ，从而集中精力在 <b>C</b> 处寻找精确解了。</p>
<p>退火法还有很多有趣的性质，比如初温 <i>T </i>越高，得到正解的概率也越高，因为此时计算机会更勇敢的选择新解，相当于退火的更彻底。相应的，要达到对「整座山」锁定目标需要的耗时就越长。这个问题，量子退火中就可以得到改善。</p>
<p>那么，这次我们的登山者不同寻常，是一位量子登山者。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/02/e7501a8947c1198bf4944280f095ccaa_b.jpg"><img src="http://img1.dimpurr.com/dimblog/2015/02/e7501a8947c1198bf4944280f095ccaa_b-600x317.jpg" /></a><p>量子登山者</p></div>
<p>看到这幅图也许已经有人明白了：此时这个登山者不仅处在 <b>DE </b>段上的某一点，其实他「同时」存在于这四周的一大块区域！在它的可能性范围所能触及的区域，他发现了 <b>CD </b>段上有着更低的一点。利用量子隧道，我们的登山者逃出了山谷！</p>
<p>还不仅仅如此。我们还记得在模拟退火法的第一步上，我们提到了我们会从图像（山脉）的某处开始搜索。但是，因为量子的叠加性质，我们的量子计算元件可以同时处在图中的很多个位置！这样以来，搜索的效率可以以（2 的）指数性增长！</p>
<p>这样优秀（当然，适合处理的问题有所局限）的算法，让我们来看看这个庞然大物， D-Wave Two 是怎么实现的。</p>
<p>首先，在合适的环境下，制备好一系列量子比特。 D-Wave Two 拥有 128 个量子比特。</p>
<p>接着，为这些量子设置好三维的伊辛模型，也就是设置好他们的初始位置和自旋状态。这个初始模型就决定了接下来的计算，可以说就是编好的程序。</p>
<p>随后，减弱量子间的相互作用，通过向超导电路通入特殊电流，向设置好的模型施加一个横磁场。这种情况下，量子就进入了自旋的叠加状态，相当于同时具有 0 和 1 状态的比特。</p>
<p>最终，我们进行「退火」。我们慢慢撤去横磁场，增强相互作用，量子们稳定下来，我们得出了最终解。</p>
<p>就像别的答案中提到的，量子退火机就是让大自然自己去进行计算，我们等着看结果：最终稳定下来的量子，一定是在这个三维伊辛模型中，相互间能量很小的状态。意即只要模型设置得当，我们就有非常大的机率落到最低的「山谷」当中。</p>
<p>因为算法本身基于统计学而非遍历的性质，我们可以理解，即使量子退火算法在模拟退火算法的基础上提高了算力，还是有只得出近似解的情况存在。因此， D-Wave Two 据说会针对每次计算任务重复 4000 次，选择其中的最优解得出解答。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/02/b0063796af646363f4d2c4748ee7faed_b.jpg"><img src="http://img1.dimpurr.com/dimblog/2015/02/b0063796af646363f4d2c4748ee7faed_b-600x528.jpg" /></a><p>D-Wave Two</p></div>
<p>最终，和大家预想的不一样， Dwave Two 确实「只是」一台量子退火机。在吭哧吭哧工作时，还得全程由液氮保护运行在 0.02 K，也就是 -273.13 ℃ 下。不过，相比经典计算机，量子退火机还是在特定领域达到了上万甚至上亿倍的算力提升。我们可以期待，一个真正的通用量子计算机，将会给科技行业乃至人类智慧带来极大的革命。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/quantum-annealing/">如何用圈外人士能理解的文字解释「量子退火」？</a></p>]]></content>
        
        <summary type="html">
            
            此回答由本人原载于知乎：如何用圈外人士能理解的文字解释「量子退火」？ – Cheny Dimpurr 的回答 – 知乎 不邀自来，见识浅薄，还请诸位大神指正。 量子退火法，是一种基于量子特性的量子计算机算法，脱胎于经典计算机上的模拟退火算法。实际上，模拟退火算法的步骤和思路，与
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="D-Wave"/>
        
        <category term="物理"/>
        
        <category term="知乎"/>
        
        <category term="算法"/>
        
        <category term="退火"/>
        
        <category term="量子"/>
        
        <category term="量子计算机"/>
        
        <category term="量子退火"/>
        
    </entry>
    
    <entry>
        <title>Tuneiz – 清新文字向单栏 Ghost 主题</title>
        <link href="http://blog.dimpurr.com/tuneiz/"/>
        <id>http://blog.dimpurr.com/tuneiz/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2015-01-02T12:27:24+08:00</published>
        <updated>2015-01-02T12:27:24+08:00</updated>
        
        <content type="html"><![CDATA[<p>这是一个简洁清新、注重阅读体验的轻量级 <a href="https://ghost.org/" target="_blank">Ghost</a> 主题。自用主题，庆祝 <a href="http://blog.dimpurr.com/clearision/" target="_blank">Clearision</a> 用户数破千特别释出 ……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/01/2014-08-26-下午7.28.20.png"><img src="http://img1.dimpurr.com/dimblog/2015/01/2014-08-26-下午7.28.20-600x335.png" /></a><p>Tuneiz</p></div>
<p><span></span></p>
<div><a href="http://img1.dimpurr.com/dimblog/2015/01/2014-08-26-下午7.33.19.png"><img src="http://img1.dimpurr.com/dimblog/2015/01/2014-08-26-下午7.33.19-600x335.png" /></a><p>Tuneiz 正文</p></div>
<h3>功能特点</h3>
<ul>
<li>自适应宽屏和响应式移动版</li>
<li>Ghost 原生 Logo 和 Cover 支持</li>
<li>全屏首页和作者页头图</li>
<li>HTML5 语义标签和 CSS3 特效，兼容到 IE9 及以上</li>
</ul>
<h3>主题演示</h3>
<ul>
<li><a href="http://work.dimpurr.com/demo/ghost/tuneiz/" target="_blank">Tuneiz 静态演示</a></li>
</ul>
<h3>获取主题</h3>
<ul>
<li><a href="https://github.com/dimpurr/Tuneiz/releases/tag/1.0.1" target="_blank">Github</a></li>
<li><a href="http://pan.baidu.com/s/1dDxnCrv" target="_blank">百度网盘</a></li>
</ul>
<h3>使用说明</h3>
<ul>
<li>将 <code>tuneiz</code> 文件夹复制到 <code>content/themes/</code> 目录下即可使用</li>
<li>可在 <code>assets/css/style.css:46</code> 的 <code>height: 100vh;</code> 修改头图占竖屏百分比</li>
<li>可以编辑 <code>partials/nav.hbs</code> 来编辑导航</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/tuneiz/">Tuneiz – 清新文字向单栏 Ghost 主题</a></p>]]></content>
        
        <summary type="html">
            
            这是一个简洁清新、注重阅读体验的轻量级 Ghost 主题。自用主题，庆祝 Clearision 用户数破千特别释出 …… Tuneiz  Tuneiz 正文 功能特点  自适应宽屏和响应式移动版 Ghost 原生 Logo 和 Cover 支持 全屏首页和作者页头图 HTML5
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Ghost"/>
        
        <category term="Tuneiz"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
    </entry>
    
    <entry>
        <title>钉子的谜之 SETUP</title>
        <link href="http://blog.dimpurr.com/setup-2014/"/>
        <id>http://blog.dimpurr.com/setup-2014/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-10-02T22:20:51+08:00</published>
        <updated>2014-10-02T22:20:51+08:00</updated>
        
        <content type="html"><![CDATA[<p>高中充实的有点过了头。基本每天都满满的有事干，平常周末也几乎在上课和作业中一晃而过。即使勉强能算可以自由支配的长假，也总是因为这样那样的事情，连想回来码下项目或者维护下博客都做不到。</p>
<p>…… 还是要学习好好的珍惜时间呢。</p>
<p>那么，先趁这个国庆来介绍一下我的设备栈吧。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/DSC_0004_8.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/DSC_0004_8-600x338.jpg" /></a><p>书桌大合照 (XPERIA Z1 用于拍照)</p></div>
<p><span></span></p>
<h3><a href="www.apple.com/cn/macbook-pro/" target="_blank">MacBook Pro</a> with Retina 15` (港行 Mid 2014, 16GB x 256GB)</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/DSC_0014_4.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/DSC_0014_4-600x338.jpg" /></a><p>MacBook Pro with Retina 15` &amp; Haier Extended Display</p></div>
<p>对我来说 MBP 给生产力带来的最直接影响是因为配置，然后才是 OS X。</p>
<p>毕竟 16GB 的内存保证了 Parallels 虚拟的 Windows 8.1 可以一直挂在后台都不会有影响，同时 UNIX 终端仍然那么熟悉 (iTerm2 + ZSH) 。作为一只跨三系统生存党，先不说本来很多解决方案就已经是妥妥的跨平台了，方便的集三系统为一身的 OS X 工作流迁移更是各种无压力。调试一下 LAMP (MAMP)，打打心绮楼 (Wine / Parallels)，重启都免了是吧。</p>
<p>哦对了，对一只视觉动物来说， OS X 真的漂亮，水果真的能改变你的来福式戴尔 (Life Style)。</p>
<p>屏幕是之前卡到不行的 Haier PC (轰天雷 T5, Core i3 二代, 4GB x 2.5TB) 留下来的， 21` 外接起来还是很酸爽，屏幕下面那个大白块就是 DisplayPort 转接器，这里用的 HDMI 线。嗯，可以看得出我的 MBPr 日常其实就是当个主机，偶尔当移动工作站用的，所以选择了大屏大容量版本。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/2014-10-02-下午8.15.00.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/2014-10-02-下午8.15.00-600x375.png" /></a><p>LaunchPad</p></div>
<h3><a href="http://store.apple.com/cn/product/MB110CH/B/%E9%85%8D%E6%9C%89%E6%95%B0%E5%AD%97%E5%B0%8F%E9%94%AE%E7%9B%98%E7%9A%84-apple-keyboard" target="_blank">Apple Keyboard with Numeric Key</a></h3>
<p>…… 这是我家第一个水果产品，第二个就是 MBPr 。是的，所以我才一直不是个果粉。</p>
<p>买不起机械键盘装逼，而且知乎上说手感确实不错，于是入了（而且当时还以为过段时间会买垃圾桶的，现在想想真是 So Naive）。嘛，虽然给台式机用巧克力（孤岛？）键盘感觉有点怪怪的，但是的确手感不错。另外，当时要换键盘的真实理由是原来的键盘响声太大，不适合偷偷敲代码，于是你们懂了。</p>
<h3><a href="http://www.microsoft.com/hardware/zh-cn/p/sculpt-comfort-mouse" target="_blank">Microsoft Sculpt Comfort Mouse</a></h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/DSC_0009_8.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/DSC_0009_8-600x338.jpg" /></a><p>Microsoft Sculpt Comfort Mouse</p></div>
<p>手感其实也就那样，不过对于各种水平介质适应性特别好，蓝牙距离也长，在客厅控制被当成机顶盒的 MBPr 时很好用。是的，这个就是在 MBPr 的经销商那入的。</p>
<p>那个带触摸的 Windows 徽标键用 BetterTouchTool 设置成了双击 Alfred，上滑 Mission Control 下滑 LaunchPad 。</p>
<h3><a href="http://www.sonymobile.com/cn/products/phones/xperia-z1/" target="_blank">Sony XPERIA Z1</a> (国行 L39h, 5`, 2GB x 16GB + 64GB, 5`)</h3>
<p>简直是个尤物，我只能这样说。美得令人窒息。索尼大法好。</p>
<p>其实一开始我只是在 2k 的价位上下选机，最后还是因为亚马逊上没有 HTC ONE M8 的非定制版和 One Plus One 64GB 缺货才忍痛超了三百预算入了当时 2k6 的大法。然后摸到机器我感动的哭了。</p>
<p>说实话要不是我为了 Root (官方 4.2 以上不能 Root) 作死刷了个不太稳定的第三方 Rom 不然简直流畅的飞起。仅有的几个缺点是，跑大游戏偶尔会烫，因为薄，真的是由内而外的酸爽；还有算不上大问题的我个人不是很喜欢超过 4.5` 的手机。</p>
<p>噢噢噢噢噢 XPERIA UI 实在太美你造嘛！ Android 体验十分完整同时又不失清新字体渲染特别漂亮内置主题系统也很给力简直见不到更好的厂家定制 UI 了噢噢噢噢！(曾经我更喜欢 Flyme 2，可惜 Flyme 3 已经从 Android UI 叛变到 iOS 8 Style 了 ……)</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/IMG_20141002_205608.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/IMG_20141002_205608-600x450.jpg" /></a><p>主屏</p></div>
<p>和 Miku 酱实在太配了。毕竟 XPERIA 的基因那样的适合 Hatsune Miku 纪念版。壁纸是「八王子P feat.初音ミク – Electronic Love」的专辑封面，入了正版 CD，扫图中能看出油墨颗粒反而增加了酷炫感。</p>
<p>对了，如果你在这张图里看到了像素颗粒，那只是因为母上的 Lenovo A789t 相机实在太渣。拍不出那种美哭的质感，很遗憾。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/IMG_20141002_205402.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/IMG_20141002_205402-600x450.jpg" /></a><p>自带底座</p></div>
<p>虽然 PPI 算不上特别高，但是总体来说屏幕还是很赞，靓丽舒服。玻璃也相当硬朗耐划，这手感实在不忍心贴膜啊。平常只要往上一按就可以充电了，比插线方便一些，看视频时也很实用。另外那个 Widget 是 Google Now 。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/IMG_20140709_130627.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/IMG_20140709_130627-600x450.jpg" /></a><p>奇葩的 CE 标识位置</p></div>
<p>这块大 G 摄像头也是一个意外惊喜，高达 2240 万像素，继承了索大相机的优良血统，还真不是随便个应用能驱动的起的。所以自然内置的相机应用可以和市场上所有主流卡片机媲美，特效各种好玩。那个 N 的标识是所谓的 Sony 醇音技术，虽然我觉得开起来比不开音质要差 ……</p>
<p>对了，如果你在这张图里看到了抖动，那只是因为我原来那部 Lenovo A789 相机实在太渣。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-10-02-19-08-05.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-10-02-19-08-05-563x1000.png" /></a><p>主页</p></div>
<p>主题名字叫 Tri Flat ，基于内置 XPERIA 主题 系统，在 Play 市场发现的。略骚，要是机器是紫色款的话就更骚了。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-10-02-19-08-52.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-10-02-19-08-52-563x1000.png" /></a><p>锁屏</p></div>
<p>锁屏。 4.3 以上 XPERIA 经典的百叶窗解锁动画没了挺可惜，不过有锁屏密码的话都差不多。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-10-01-18-47-27.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-10-01-18-47-27-563x1000.png" /></a><p>版本</p></div>
<p>Rom 是机锋论坛的 EXR.Ming 。当然 XPERIA Xposed 什么的是必备的。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-09-07-22-41-25.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-09-07-22-41-25-563x1000.png" /></a><p>Sony 生活轨迹</p></div>
<p>这个生活轨迹应用也是挺好玩的，记录应用历史的功能有点像简略版的 RescueTime ，不过详细的生活数据要配合 Sony SmartWatch 才记录的到睡眠时间这些。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-07-23-15-14-47.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/Screenshot_2014-07-23-15-14-47-563x1000.png" /></a><p>PowerAMP</p></div>
<p>壮哉我大 PowerAMP 。不过唯一值得吐槽的一点是网站购买和 Play 购买的程序是两个版本，结果有时候不小心从 Play 更新了得卸了从官网重下并激活。</p>
<h3><a href="http://www.philips.com.cn/c/mobile-phone/mobile-phone-cte1300bk_40/prd/" target="_blank">Philips E130</a></h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/DSC_0006_9.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/DSC_0006_9-600x338.jpg" /></a><p>Philips E130</p></div>
<p>为了高中我也是挺拼的。</p>
<p>只要 130¥ ，30 万像素相机， MP3 播放器， FM 收音机，广场舞级超大声音响，WAP 浏览器，没错你没有听错，全部集于这个可以从三楼扔下去毫发无损的超轻迷你机身中！</p>
<p>…… 从这个价位和定位来说，确实是相当可以的机子了。相当价格的诺基亚神机 1080 还完全没有网络收音等功能呢，不过这机子确实上下网就挺不过三天。不过 WAP 浏览器的解析实在太弱，也不支持 Cookie ，在下不怎么看小说，平常除了查下资料基本没什么用处 …… 果然还是安心学习吧。</p>
<h3><a href="http://www.colorfly.net/ch/product_index_c3.html" target="_blank">Colorfly C3</a> (16GB + 32GB)</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/DSC_0008_9.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/DSC_0008_9-600x338.jpg" /></a><p>Colorfly C3 (16GB)</p></div>
<p>我只能说音质绝对横扫 500¥ 价位的一切号称 Pocket Hifi 的播放器，甚至媲美相当不错的电脑声卡，只是功能目测百元级的 MP3 都能横扫。两行屏幕只能放歌 TXT 都读不了倒是挺正常，但是你没队列，没睡眠定时，触摸还各种抽风等等怎么解释 ……</p>
<p>总体来说输出还是中规中矩，不同音域的风格化增强基本交给了耳机。对新格式的支持也不是很好，还好我的曲库都统一整理成 FLAC 了。对音质之外没什么要求的话这是个性价比很高的选择。</p>
<h3><a href="http://shop.sennheiser.com.cn/ProductDetail/CX300-IIPrecisionBlack_38.html" target="_blank">Sennheiser CX300 II</a></h3>
<p>声道剥离感人，立体混响美哭，<del>耳扒谱子必备，</del>人声解析带感。不过这还真的妥妥的是个高音耳机，听电音的时候那个沙拉沙拉轰隆轰隆，真的能听到头晕，低音也有点薄。从 300¥ 的价位和我个人的听歌偏好来说还是物有所值了。</p>
<p>拿 XPERIA Z1 推的时候人声也会特别薄，通透感倒是挺不错。至于拿 MBPr 推时低音就全部出来了，相当醇。</p>
<h3>Skyworth Coocaa E83RS (Android 2.3)</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/DSC_0017_4.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/10/DSC_0017_4-600x338.jpg" /></a><p>Skyworth Coocaa E83RS</p></div>
<p>呵呵呵这个酷开市场在我们把电视买回来的那天开始就没更新过。真是傻了才贪便宜没入 4.0 的智能电视，搞得我好不容易越狱了还连 Bilibili 客户端都安不了。不过平心而论，内置的浏览器倒是挺好用，当然支持 Flash 。</p>
<p>硬件上诚意倒是很足，支持 3D 不说还送了个低音炮。自入了 MBPr 之后这货终于焕发了第二春，HDMI 接上之后就可以当机顶盒用了。躺在沙发上拿无线鼠标简单操控一下，刷刷新闻看看弹幕，赞。</p>
<h3><a href="http://h10025.www1.hp.com/ewfrf/wc/product?cc=cn&amp;dlc=zh-hans&amp;lc=zh-hans&amp;product=391174" target="_blank">HP Officejet 7208 All-in-One Printer</a></h3>
<p>我也不清楚这是0几年的东西了，不过卡纸或者一次进多张已经各种家常便饭，双面打印简直是噩梦。不过自带扫描还是真心方便，至少各种设计图纸扫进去比拍照清新多了。 HP 自带的软件套件也不错，就是在 Mac 下 ……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/10/Screen-Shot-2014-08-22-at-9.18.16-PM.png"><img src="http://img1.dimpurr.com/dimblog/2014/10/Screen-Shot-2014-08-22-at-9.18.16-PM-600x375.png" /></a><p>HP 你给我死一万年</p></div>
<p>最后还是想说一句，在下不是壕。我的电脑确实是我们全家除了桌子以外最壕的地方 …… 但是现在对我来说，我宁肯花 5 元去淘宝买个 Windows 8 Key ，甚至购买某些相对便宜的软件的正版，也不愿意花两个小时去找破解办法。我也曾经浪费了一年为了找几个免费空间和域名，现在想起来各种后悔。</p>
<p>因为你的时间值钱，你会用这些时间把你的时间变得更值钱。</p>
<p>…… 咱也是接了那么几单，赚了点小钱，父母才稍微愿意支持咱的 ……</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/setup-2014/">钉子的谜之 SETUP</a></p>]]></content>
        
        <summary type="html">
            
            高中充实的有点过了头。基本每天都满满的有事干，平常周末也几乎在上课和作业中一晃而过。即使勉强能算可以自由支配的长假，也总是因为这样那样的事情，连想回来码下项目或者维护下博客都做不到。 …… 还是要学习好好的珍惜时间呢。 那么，先趁这个国庆来介绍一下我的设备栈吧。 书桌大合照 (
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="Android"/>
        
        <category term="Apple"/>
        
        <category term="Colorfly"/>
        
        <category term="Mac"/>
        
        <category term="Microsoft"/>
        
        <category term="Setup"/>
        
        <category term="Sony"/>
        
        <category term="XPERIA"/>
        
        <category term="设备"/>
        
        <category term="音乐"/>
        
    </entry>
    
    <entry>
        <title>初中毕业了，毕竟老了。</title>
        <link href="http://blog.dimpurr.com/become-history/"/>
        <id>http://blog.dimpurr.com/become-history/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-08-29T01:58:47+08:00</published>
        <updated>2014-08-29T01:58:47+08:00</updated>
        
        <content type="html"><![CDATA[<p>在遇到 ByWord 之前，很久没有这么舒服的码字了。最丧病的是我还关了灯，窗外小区的楼房灯光依稀错落着。 MBPr 虽然外放不甚出彩，推力倒是妥妥的够足，硬是给我家的 CX300II 推出了高端耳塞的低音。 Vox 正单曲循环着「じんP feat. Lia – days」，「目隐都市的演绎者」的 ED 。那么，就从阳炎 Project 说起吧。</p>
<p>实际上，对于阳炎不论是剧情还是音乐本身，我是一直不太感冒的。驱使我追完全集缺经费毁原作的动漫并收了一半的小说的动力来源是，我本期待 Jin 能造就一个全新的同人模式。结论是很明显的，即使阳炎的话题热度在圈内的占比不下于昨晚锤子和 ZEALER 互掐在段子手圈的流行度，但是对一部 P 主能把水平一般的编曲捆在我家的 ODDS&amp;ENDS B面坑钱的卖人设作，也就仅此而已了。</p>
<p>…… 很明显我不是来黑阳炎的，当然也不是来黑小学生的。是的，今天想提的就是据说是阳炎主要受众群体的，中二生们。有点长，现在走还来得及。</p>
<p><span></span></p>
<p>出于很明显的动机，我也有意去留心过许多青少年菊苣的成长历程了。</p>
<p>应该说，小学开始接触、初中进入正轨、高中小有名气是最普遍的发展轨道。其中这类人又分为两种，想学的和不想学的。然后抛开准备升入或者正在就读技校的一帮人不谈，竞赛圈、ACG 圈算两个最大的年轻菊苣抱团地，还有知乎、各色论坛上零零碎碎的有人冒头。再算上质量参差不齐的学校计算机社团，要说当今在做计算机的少年，也就是如此了。</p>
<blockquote><p>我初中学编程的时候我妈也是这么说我的。关键是你脸皮要厚，地理考30分也继续编程，就没事了。—— vczh 于 <a href="http://zhi.hu/60wT" target="_blank">初中生学习编程是不务正业吗？</a></p></blockquote>
<p>我也不知道是什么造成的固有印象，但是现实绝对不像这种抖机灵回答一样理想主义。我可以明确的说，除了技校党（我不是在歧视因为又自己的原因不上高中的人，而是在歧视单纯因为放弃面对学业压力而选择这条路的人），这样做的人只能是被逼的。任何一个稍微成熟的人，都不需要去和他讨论应试教育的弊端与现实。如果你想像王子亭一样决心辍学，你先起码超越宅里奥的高度，或者有翁天信的家庭背景，不然你可以是圈内知名作品无数的所谓菊苣，实际上正在读着高五。</p>
<p>既然都写到开始点名了，那么我也不收敛什么了。我想讲的第一个关于青少年菊苣们的现实，就是教育和家庭背景因素。</p>
<p>学校教育的问题前面已经提过一段，其实也真的没什么好说的了。实际情况根据学力和选择的技术道路各有不同，但是高中还没有规划应该算是罕见情况了。走竞赛上来的，前些年很多都选择了走保送的路，只是如今这一代多半得回炉闭关认真面对高考了。主要在圈子里活跃的，也许以学业和技术不能兼顾告终的占多，还有一部分就是明知自己的道路不在学习上，早有准备的。</p>
<p>前者大抵便是通常意义上的学霸。有句出处已经不记得的话，「你必须承认有些人就是条件比你好，也处处比你优秀的，更可怕的是他们还比你更努力。」可以遇见的是，后者的阻力明显会大出很多，一路上来被筛下来的也要多出很多。其实这年头真的说完全不理解，不能接受发展一下个人兴趣的家长已经很少了，尤其大城市的家长更是支持，何况计算机还有一条做算法竞赛升学的道路，职业本身也有相当的前景。</p>
<p>也有个我不太想提的话题，有些时候，互联网和计算机科学是一种可以让被特殊的家庭环境逼迫成的女汉子或者玻璃心少年托付抑郁的存在。</p>
<p>还有一个关于青少年菊苣的现实应当是地域因素。</p>
<p>我们的父辈深有体会的农村孩子对城市的向往，如果你和我一样生长在一个三线城市都算不上，甚至更糟糕的地方，却仍然关注互联网或者是其他一类现代化的领域，你多半也会有体会。当我看见帝都魔都寨都等等日常大大小小的科技类展会，图书馆成排的图灵博文华章，学校社团出没的各路菊苣大神甚至是地域性计算机社团联盟，这种感受我不吝于用眼红之类的词来形容。</p>
<p>呐，其实针对之前那个问题，我也曾经有不同的答案。就在这个暑假去北京前的几个星期我才说过这样的话。「大城市毕竟还是太过拥挤，尤其受不了广州那种乱。像惠州这种中等程度的城市也相当不错，尤其污染也小，住着舒服，实在不行也可以选择往上或者往下走。」然后你们也知道了，在下乡下人进城了一个星期，回来立下了不把下一代带进大城市誓不为人的毒誓 ……</p>
<p>中等你妹啊 (╯°□°）╯︵ ┻━┻ 在这种小穷破地方你能幼儿园有计算机课么，能拉几个学弟学妹就做一个同城互联网主题班会么，能围观个 Kcon 被抓到台上么？城我也不是之前没进过，我是认真的，长大了才知道差距啊 ……</p>
<p>然后是圈子因素。</p>
<p>不算线下，因为身边的人影响、计算机类社团和兴趣班等入了技术坑的，主流的的入坑途径，从我认识的圈子来说大概是博客圈到 Web 开发圈、折腾终端设备到开源圈、游戏破解和设计方面到游戏或编程圈三种。 6R 这种闷声出菊苣的地方不见少。</p>
<p>人是群居动物，有人的地方就会有圈子。对我们的同龄人来说，低调的要么是真正做大事的菊苣，要么是自娱自乐的闲杂人等。如果你希望自身得到发展，那么你就会需要人脉和资源。不可避免的，你就会需要一定程度的出镜率。这里又可以再次分成在同龄人圈子当中混好的菊苣，在没有明显年龄阶层的圈子与大自己一轮的人混的菊苣，还有把年龄当成资本哪里都混的不好的渣渣（比如我）。</p>
<p>要明白的一点是，所谓的混圈子，并不是指向性或者说目的性很明显的什么举动，而是更加日常性的，也就是比自我满足稍微高一个层次的弱社交。实际上最主要的是，朋友不是扯扯淡扯出来的，自身没有实力，你也得不到任何资源。当然关于这个问题，我也时有见到以下的论调。</p>
<p>「我觉得认识不认识就是缘分，刻意去和不熟悉的人说话好累」</p>
<p>这正是我想讲的动机问题。我可以给某位在数个月内通过完美验证了什么八度空间关系链的方式侵蚀了整个某圈子的少年一个狼性的评价，同样可以给某位正在走在下的老路目前处于全社交平台无处不在的少年这样的评价。相对一些居心叵测的人，有的人真的只是很寂寞。当然，不去提程度太过的情况，是否为理想付出努力，只是这样的问题而已。</p>
<p>「我当初深有体会，队友就是用来坑你的，我已经放弃了」。</p>
<p>……</p>
<p>—</p>
<p>和某人的「这篇文章起源于和某人的一个对话」系列一样，促使我来写这篇莫名其妙的文章的缘由当然不是写作环境很舒服。</p>
<div>应该也有一部分人知道我在做一个名为悦调的项目。与此同期，同龄人带的项目，则是和我日常互黑的电灵的五弹幕了。我时常纠结为何五弹幕能以十倍于悦调的效率运转，最后得出了结论。第一，我是个傻逼。第二，对电灵来说，五弹幕是一个项目；对我来说，悦调是一个作品。在他考虑如何市推的时候，我仍然在重设计首页的第五个版本。归根结底，异地高考分数线不允许我这样做。第三，悦调开发团队士气不如五弹幕的秘诀是，五弹幕的任何一个人的水准都根本无法做到实现悦调的设计本身，更别说对代码规范再作要求了。<p></p>
<p>于是我仍然不是来黑五弹幕的。虽然我觉得我要找的人是不会看到这段文字就来找我的，看到这段文字会来找我的人也多半不是我要找的，总之我是想说：我有自信，这将是个够格让我们自豪的作品。这是一个长期计划。欢迎你的加入。</p></div>
<p>最后恭喜你看完了这篇标题开头正文结尾有四个主题，我在考虑要不要扔进里博客的奇文。仅此纪念我逝去的青春，和夜幕下的敲代码。插播一则恐怖消息，后天开学。那么，烷氨。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/become-history/">初中毕业了，毕竟老了。</a></p>]]></content>
        
        <summary type="html">
            
            在遇到 ByWord 之前，很久没有这么舒服的码字了。最丧病的是我还关了灯，窗外小区的楼房灯光依稀错落着。 MBPr 虽然外放不甚出彩，推力倒是妥妥的够足，硬是给我家的 CX300II 推出了高端耳塞的低音。 Vox 正单曲循环着「じんP feat. Lia – days」，「
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="Geek"/>
        
        <category term="假期"/>
        
        <category term="开发者"/>
        
        <category term="开学"/>
        
        <category term="暑假"/>
        
        <category term="菊苣"/>
        
        <category term="青少年"/>
        
    </entry>
    
    <entry>
        <title>某钉子 2014 上半年的浏览器 A-Z</title>
        <link href="http://blog.dimpurr.com/a-z-2014-middle/"/>
        <id>http://blog.dimpurr.com/a-z-2014-middle/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-08-21T15:51:58+08:00</published>
        <updated>2014-08-21T15:51:58+08:00</updated>
        
        <content type="html"><![CDATA[<p>又是一段时间没更新了，总觉得最近发生了好多事情，却写不出什么东西来 …… 可能有些承诺的作品发布时间要变成待定了。</p>
<p>那么还是先看看半年来 A-Z 的变化。嗯，大概苦逼了很多 …… 之前的在这：<a href="http://blog.dimpurr.com/a-z-2013/" target="_blank">某钉子 2013 年的浏览器 A-Z</a></p>
<p><span></span></p>
<ul>
<li>alipay.com</li>
<li>bgm.tv</li>
<li>cdn.bootcss.com # 因为把 BootStrap 源码遍历了两遍</li>
<li>dnspod.cn</li>
<li>exhentai.org</li>
<li>feedly.com</li>
<li>git.miv.im</li>
<li>hzkszx.com # 中考去死</li>
<li>iconfinder.com</li>
<li>jd.com</li>
<li>keep.google.com</li>
<li>loli.gs</li>
<li>macappbox.com # 入了 MacBook Pro with Retina 15` 低配版</li>
<li>name.com</li>
<li>outlook.com</li>
<li>pan.baidu.com</li>
<li>qzone.qq.com</li>
<li>rhytune.io</li>
<li>stackedit.io</li>
<li>tower.im # 苦逼 PM</li>
<li>umunk.com</li>
<li>v2ex.com</li>
<li>work.dimpurr.com/theme/</li>
<li>xiyu.in</li>
<li>yuming.be</li>
<li>z.cn</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/a-z-2014-middle/">某钉子 2014 上半年的浏览器 A-Z</a></p>]]></content>
        
        <summary type="html">
            
            又是一段时间没更新了，总觉得最近发生了好多事情，却写不出什么东西来 …… 可能有些承诺的作品发布时间要变成待定了。 那么还是先看看半年来 A-Z 的变化。嗯，大概苦逼了很多 …… 之前的在这：某钉子 2013 年的浏览器 A-Z   alipay.com bgm.tv cdn.
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="A-Z"/>
        
        <category term="Chrome"/>
        
        <category term="导航"/>
        
        <category term="年度"/>
        
        <category term="日常"/>
        
        <category term="浏览器"/>
        
        <category term="网站"/>
        
        <category term="链接"/>
        
    </entry>
    
    <entry>
        <title>啊呜啊呜……</title>
        <link href="https://yoooooooooo.com/yukari/?p=24"/>
        <id>https://yoooooooooo.com/yukari/?p=24</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2014-08-01T10:17:50+08:00</published>
        <updated>2014-08-01T10:17:50+08:00</updated>
        
        <content type="html"><![CDATA[<p>用Google Web Desiger算是喵和雅诗姐姐的新尝试吧……<br />
结果不包含动画感觉还好……<br />
包含动画以后非Webkit核心的全都挂掉了呢……<br />
喵和姐姐也没打算向web开发发展呢喵……<br />
心有余悸&gt;_</p>]]></content>
        
        <summary type="html">
            
            用Google Web Desiger算是喵和雅诗姐姐的新尝试吧…… 结果不包含动画感觉还好…… 包含动画以后非Webkit核心的全都挂掉了呢…… 喵和姐姐也没打算向web开发发展呢喵…… 心有余悸&amp;gt;_
            
        </summary>
        
        <category term="日常"/>
        
    </entry>
    
    <entry>
        <title>这是第一条呢喵</title>
        <link href="https://yoooooooooo.com/yukari/?p=15"/>
        <id>https://yoooooooooo.com/yukari/?p=15</id>
        
        <author>
            <name>神楽坂紫</name>
        </author>
        
        <published>2014-07-31T22:38:13+08:00</published>
        <updated>2014-07-31T22:38:13+08:00</updated>
        
        <content type="html"><![CDATA[<p>在姐姐指点下喵终于会用这个东西了喵……</p>]]></content>
        
        <summary type="html">
            
            在姐姐指点下喵终于会用这个东西了喵……
            
        </summary>
        
        <category term="日常"/>
        
        <category term="神楽坂紫"/>
        
    </entry>
    
    <entry>
        <title>ADC 2014 如何成为一位合格的产品策划者 – 青少年开发者大会 EVENT 14 演讲稿</title>
        <link href="http://blog.dimpurr.com/event14/"/>
        <id>http://blog.dimpurr.com/event14/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-07-20T13:30:06+08:00</published>
        <updated>2014-07-20T13:30:06+08:00</updated>
        
        <content type="html"><![CDATA[<p>转载请注明：ADC 2014 – 如何成为一位合格的产品策划者 – 青少年开发者大会演讲稿 | 钉子の次元 http://blog.dimpurr.com/event14/</p>
<blockquote><p>这是本次 EVENT 14 青少年开发者大会我的个人演讲稿。于 2014 年 7 月 20 日下午第二场。</p>
<p>PPT 源文件包下载：<a href="http://pan.baidu.com/s/1hqf57hi" target="_blank">http://pan.baidu.com/s/1hqf57hi</a></p></blockquote>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/11.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/11-600x375.png" /></a><p>Idea 开花结果：如何成为一位合格的产品策划者</p></div>
<p>诸位好，这里是陈旸，也可以称呼我 dimpurr 。零零后，初中毕业生，强迫症，多媒体设计爱好者，交互前端略懂，后端算法硬伤。</p>
<p>不过虽然自诩为一位设计师，都说巧妇难为无米之炊，美工也要码农衬嘛。这种时候团队的力量就出现了，为了实现自己的设计，组建一个有各路大神的开发团队是必不可少的。不过做项目不是来一段说写就写的代码，今天在这里就是想以 悦调 Rhytune 这个项目为例，不止讲讲一路上来产品设计的历程，更从一个创业者和管理者的角度来谈一谈怎么做到让自己的创意经受住检验。</p>
<p><span></span></p>
<h2>抓住灵感：如果苹果敢砸你，你就砍了苹果树</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/26.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/26-600x375.png" /></a><p>抓住灵感：如果苹果敢砸你，你就砍了苹果树</p></div>
<p>嗯 …… 请忽略副标题。</p>
<p>了解我的人都知道，在音乐方面我是个完完全全的强迫症。我家那块 2TB 的希捷硬盘中将近三分之一，都被我精心搜集整理、全部切割为单轨 FLAC 的无损音乐给填满了。</p>
<p>那天，此人秉承着作为一位设计师的作死天性和强迫症，为了打印用来背歌词的文档，如图所示，正在流畅地进行着 Google 搜索歌词， Pascal 脚本排列， Word 手动排版的流水线。终于在在下的简单过滤脚本不堪忍受 百度知道 和 各类歌词网站 中，造型各异、时而罗马音不加空格、时而片假名注音混杂、时而怎样怎样 …… 的歌词重负之后，咱一摔桌：为什么这些网站不能把歌词直接导出文档啊！</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/31.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/31-600x375.png" /></a><p>幻灯片3</p></div>
<p>回到我们的话题中来。前面讲的这个故事，就是一个关于发现自身需求的例子。各位一定都拥有一定程度自己解决问题的能力，比如我后来研究 lrc 转 HTML 去了 …… 这也说明了一点，就是大家所面对的问题，几乎都是确确实实没有被满足的需求。简而言之，我们生活中遇到的不便，便是绝好的 idea 来源。</p>
<p>为了这个小小的不满，本人毅然决定自己做一个提供完善的导出文档和 lrc 的歌词库，让歌词网站走向现代化、革新化，于是， Project LYRICS 就诞生了。</p>
<h2>发散思维：离开妻子在外打工多年的小明听说生了后大喜过望</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/51.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/51-600x375.png" /></a><p>幻灯片5</p></div>
<p>嗯 …… 请忽略副标题。</p>
<p>往往在我们遇到一些问题时，二逼码农的解决方法就是自己撸一段高端大气上档次的脚本，总之解决了就好。有分享精神的普通码农或许会把脚本修改一下分享出来，供相似需求的人下载使用。至于有战略眼光的伪码农真PM，会敏锐的发现市场的空缺，并且创造出好的 idea 。</p>
<p>那么上回说道，咱因为编撰歌词的麻烦萌生了做歌词库的想法。这时，我逐渐发现了我在 寻找 &gt; 聆听 &gt; 整理 音乐的过程中，还有许多地方缺乏合适的服务。例如，我寻找资源时，总要去 Google 或者 nyaa.se 等地搜索，在各大论坛水贴下载，能否为音乐做一个 萌否 那样的资源聚合服务；我总是要去 Bilibili 等视频网站寻找 MV 和 翻唱 ，能否为音乐做一个关联各类 MV 视频的 BGM 式百科 …… 于是我决定，将理想中的产品，打造成一个「歌词百科」的形式。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/61.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/61-600x375.png" /></a><p>幻灯片6</p></div>
<p>当然， UNIX 哲学中有一条是“各司其职”。换句话说，不是什么相关的功能都能添加上去的，而是经过取舍，确定出围绕一个中心的需求，最后组成一个完整的产品。</p>
<h2>虎视眈眈：竞品分析，确保有实力争一席之地</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/81.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/81-600x375.png" /></a><p>虎视眈眈：竞品分析，确保有实力争一席之地</p></div>
<p>这次请忽略 …… 对不起，这一段内容比较重要，我就不废话了。</p>
<p>做完之前的两步之后，相信一个 idea 也算是羽翼渐丰，基本成型了。对某些人来说，做到这一步，就基本可以上代码垒技术栈了。正因如此，这就成为了导致无数一腔热血的创业项目半途夭折的罪恶之源 ╮(╯-╰)╭</p>
<p>竞品分析这一步，不仅是产品设计开发中极其重要的流程，也是在正式立项之前必须做好准备的一步。你需要利用手中的媒体和搜索引擎，在浩瀚如烟的互联网上搜寻有朝一日可能和你针锋相对括号争风吃醋的现有产品。如果不幸发现某企鹅或者某数字企业已有同类产品，我只能说，差不多打道回府吧。</p>
<p>不过，如果你仍然相信你的 idea 有坚持的价值，在研究寻找相关产品时，请务必注意下这些方面：</p>
<ul>
<li>有哪些现存的同类产品？它和我们是功能性质相同，运营模式相同，用户群相同，还是几乎一模一样？</li>
<li>我的 idea 独特的地方在哪里？能作为差异化或者是噱头的设计有哪些？还有哪些没有被关注的方向？</li>
<li>我的产品能否从现有的产品中争夺一席之地？我能否提供足够的技术实力来完成设想？</li>
</ul>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/91.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/91-600x375.png" /></a><p>幻灯片9</p></div>
<p>前面说产品的心态确定为歌词百科后，我立刻调查了歌词相关的软件和网站，最终总结出我们的竞争对手主要有以下几类：</p>
<ul>
<li>现有的使用文章类 CMS 系统的歌词网站。
<ul>
<li>我们的优势是方便和可自定义的歌词显示、导出；对方的优势是完整的歌词制作生态链。因此在社区运行的早期，我们引入有经验的歌词制作用户。</li>
</ul>
</li>
<li>音乐播放器的内置歌词系统。
<ul>
<li>我们的优势是更广的受众和可导出作多种用途；对方的优势是稳定的用户群和无缝的使用体验。因此我们可以考虑推出客户端。</li>
</ul>
</li>
<li>豆瓣模式的音乐分享和鉴赏网站。
<ul>
<li>我们的优势是完善的歌曲数据和周边的服务；对方的优势是优质的内容质量和社区氛围。因此我们可以考虑通过推出认证媒体帐号等方式，扩展我们的平台，化敌为友。</li>
</ul>
</li>
</ul>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/101.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/101-600x375.png" /></a><p>幻灯片10</p></div>
<p>就像这样，在调查的过程中，逐渐完善和修改构思，当你最终可以自信的回答以上问题时，我们就可以走进下一步了。</p>
<h2>走进科学：访谈调查，将产品带向真实用户需求</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/111.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/111-600x375.png" /></a><p>走进科学：访谈调查，将产品带向真实用户需求</p></div>
<p>咳咳。大家好，我是陈旸，也可以称呼我 Dimpurr 。我是一名设计师，同时也是划时代的歌曲百科和音乐服务 悦调 Rhytune 的创始人。要说我的非凡灵感，当然是来自于平常孜孜不倦的钻研和开发，才有了这个集音乐视听、资源、百科、社交等于一身的史无前例的产品。我们一定能改写未来互联网音乐分享的篇章，为广大深度音乐用户带来福音！好吧，我已经看见台下有人准备好臭鸡蛋了 ……</p>
<p>作为项目的发起人，还通过自身的需求和市场调查，最终讲 idea 确立为一个完善的产品形态，那当然会自我感觉良好 —— 简直 Amazing 。但是自己的需求终究只是特例，如果产品推出之后，才发现设计出来的功能是风中摇曳的一朵奇葩，没有用户欢迎，那时就后悔也来不及了。</p>
<p>及时避免这种情况的办法，当然是提前接触用户，了解他们的实际情况。以下几种途径，我们可以选择最方便的方式，也可以多管齐下，达到最好的效果：</p>
<ul>
<li>对身边的人一对一访问。现实中的家人朋友，网络上的朋友，都可以通过聊天、即时通讯等方式进行对话。向他们咨询他们平常是怎么使用你的项目的同类产品的，或者简要描述下你的蓝图，听听他们的感想。
<ul>
<li>以 Project LYRICS 为例，我不仅在和朋友们介绍想法、征求意见的过程中，从身边的音乐爱好者们听到了对各种歌词网站的牢骚、对一些媒体中心设计的赞美，也从一些平常只是拿手机偶尔听听网络电台的朋友们了解到了客户端渠道的重要性。更难能可贵的是通过访问，我还得到了几位早期开发人员。</li>
</ul>
</li>
<li>在熟悉的社区里，邀请朋友回答问卷。这种时候就需要学习正确的问卷设计姿势了，简洁明了、精准明确的提出问题是要诀，对于复杂的问题不要直接让被调查者回答，而可以拆分成多个旁侧敲击的简单问题。利用熟悉社区的优势，你能更方便的获得大样本而且有价值的数据，被调查者往往也乐意配合你回答问题。
<ul>
<li>在知乎上提问，在 V2EX 上让大家谈谈自己的音乐习惯，在开源社区调查各平台的音乐客户端占有率，或许还可以了解到有趣的音乐方面的 Geek 小工具，也不失为一种做法。</li>
</ul>
</li>
<li>潜入目标用户群体。某些人本身就是因为是用户群体中的典型所以萌发的构思，这种时候就具有天然优势。如果有一部分用户你还不了解，这种时候不妨悄悄的来场谍中谍，在目标社区中研究他们的交流习惯，学习他们的模式。
<ul>
<li>Project LYRICS 的设计很大一部分得益于我一段时间的歌词组参与制作经历，这种时候就需要重回社区，温习一遍社区里的歌词制作、发布工具和渠道。你在社区里混熟了之后，还可以毫不费力的向大家推广你的产品呢。</li>
</ul>
</li>
</ul>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/121.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/121-600x375.png" /></a><p>幻灯片12</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/131.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/131-600x375.png" /></a><p>幻灯片12</p></div>
<h2>拉帮结派：不会写代码的美工不是好 PM</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/172.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/172-600x375.png" /></a><p>拉帮结派：不会写代码的美工不是好 PM</p></div>
<p>经过重重历练，你的 idea 终于百炼成钢，确定将来能经得住市场检验了，或许还已经有了初期的代码框架和开发人员。不过没有也不要急，类似 V2EX 、知乎、之前 JoyNeop 介绍的 实现 这类平台，都是你公布设想和寻求合作伙伴的好去处。类似 ADC 这样的机会，还可以将你的项目广而告之、寻找风投。</p>
<p>不过相对于公开招募，如果有个人渠道中熟悉的开发者，显然是契合度更高更利于行程团队的选择。各位的技术之路一路走来，相信也不是单打独斗，而是经过了各种社区和朋友的帮助指导。如果你真的是靠着基本砖头不借外力自学成才，我只能说，在互联网时代，你 Out 了。混社区，交朋友，是成为技术大牛，获得良好发展资源的的必经之路。</p>
<p>程序员乃产品之本，设计师乃产品之魂，PM 却是产品之师。之前那么长的篇幅，相信诸位也明白到了我想传递的另一层意思：并不是埋头写代码就能让项目成功的。作为团队，即使你对大家的技术和配合再有信心，务必去物色以为合适的产品经理或者亲自学习创业技能，才能让项目的路走的更远。作为团队的灵魂，适当的知道不同领域的基础知识对于开发的帮助也是非常大的。</p>
<p>作为一剂强心剂，再提提我之前黑过的一点，也是无数创业者日夜担惊受怕，夜不能寐的一个威胁，就是巨头进入自己项目的领域带来的威胁。任凭你多么辛苦从前面几步锁定了完美针对市场空缺和用户需求的方向，巨头也能凭借强大的用户资源和技术实力把你微创新掉，順便接纳了被你培养好习惯的用户。都说开心农场的流量下滑之日约等于 QQ 农场推出之日，我们要在几乎没有知识产权的现状下求得生存，只有保持创新能力，并且在无法偷走的社区氛围、内容资源等反面发力。</p>
<h2>打造品牌：高端大气上档次，低调奢华有内涵</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/141.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/141-600x375.png" /></a><p>打造品牌：高端大气上档次，低调奢华有内涵</p></div>
<p>如果你以为我的产品就准备叫 Project LYRICS 了，我会以设计师的尊严向你发送无限的怨念。就和许多人常犯的埋头写代码的毛病一样，萌XX啊XX酷啊XX云啊这种名字真是屡见不鲜。如果拥有 SEO 的相关知识你就会知道，一个好的名字对于推广产品有多么重要。所以，在设计品牌的识别体系时，你需要注意一下方面：</p>
<ul>
<li>产品名字务必优美，清晰，易于理解，独特好记，读起来悦耳动听，切合产品形象。嘛，这个可以说是大家都知道的好名字的标准了</li>
<li>中英结合，慎用拼音作为英文名，最好中英名字皆有意义，读音相近更佳，可以考虑自造词、合成词。</li>
<li>名字没有山寨感，不会让人联想到其他厂商，搜索结果中没有知名度高的站点，域名有空余。当然现在各种后缀已经流行起来，没有 .com 域名已经不再是致命的问题了</li>
<li>取一个朗朗上口的标语，传递产品的愿景，让用户快速理解产品的定位。</li>
<li>设计一个简洁耐看的 LOGO ，贴合产品，富有寓意，形状有特征。考虑到缩小到系统托盘区、单色出现在手机通知栏时能保证容易辨认</li>
<li>对品牌色、品牌形状、品牌字体等提前做好一定程度的规划，利于统一产品形象，增加辨识度。</li>
</ul>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/151.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/151-600x375.png" /></a><p>幻灯片15</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/161.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/161-600x375.png" /></a><p>幻灯片16</p></div>
<h2>群策群力：已经没有什么好害怕的了</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/181.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/181-600x375.png" /></a><p>群策群力：已经没有什么好害怕的了</p></div>
<p>你征求意见的帖子反馈良好，也有各路大神愿意参与开发。群里一片欣欣向荣之势，作为创始人的你感到十分欣慰。不过，在有实际成果前千万不能高兴的太早，在开发过程中，还有很多的问题值得注意。</p>
<p>虽然你经过层层考量，对项目已经胸有成竹胜券在握，不过被你求爷爷告奶奶拉来的苦力门却未必能对此了然于心。写个文档把你对项目的概念说出来，同样，把前几步你对市场定位、用户需求、竞品分析的小笔记贴上去，才能让大家明白你的构想。如果实在不知道该写些什么内容，不妨去网络上搜索一下 MRD 文档的范例作为参考，但是最忌讳文风形式化，完全套模板。清晰简洁的诉说你的设计，诚实的指出当前的困难，杜绝假大空装逼语句，适当的还要辅以流程图和插画表达清楚你的构想。一千个读者就有一千个哈姆雷特，如果总有几个人无法理解你的文章，一定不要失去耐心，逐个沟通，同时征求他们对你的文档风格的意见。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/191.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/191-600x375.png" /></a><p>幻灯片19</p></div>
<p>既然是一个团队，而且可能是在远隔千里的时空中协同工作，必然会需要一些提高沟通效率的工具。如果你告诉我一个 QQ 群和一个网盘就是你们团队讨论和交换代码的全部，嗯 …… 我没说不可以，毕竟少一个竞争对手是好事嘛 ╮(╯-╰)╭ 总之，作为团队管理者，如果你决心让自己的团队工作流更加高效化、专业化，你有必要了解一下以下工具：</p>
<ul>
<li>代码：Github BitBucket Gitlab</li>
<li>设计： Axure在线原型 快现 DesignBoard</li>
<li>OA：格子云 GoogleApps Office365</li>
<li>项目：Tower.im MicrosoftProject</li>
<li>通讯：QQEXMAIL QQ GoogleGroups 内部论坛</li>
<li>自动化：.idea Gulp Grunt Vagrant Docker</li>
</ul>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/201.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/201-600x375.png" /></a><p>幻灯片20</p></div>
<p>管理的艺术，这是一个永恒的话题。作为暂时没有盈利的没有工资的，单凭一腔热血聚集起来的团队，没有有效的管理，是很容易涣散的。当然凭我没法在这里大谈特谈如何管理好一个团队，但是，对于我们这种类型的团队，我还是有几点小建议：</p>
<ul>
<li>人员宁缺毋滥，责任分配清晰
<ul>
<li>在小型项目中，就算你找几桌麻将的人回来，还不如让每个人都发挥出十倍的战斗力。每个人的任务和工期都要有明确规定，记录在案，才能让人有责任感，给团队中的各位确确实实的参与感、主人翁意识和对进度的信心</li>
</ul>
</li>
<li>定期开会讨论，撰写总结，增加归属感和凝聚力
<ul>
<li>有新人的时候要确保沟通，让他们了解协作流程，熟悉团队中的其他人。不时的开会讨论、工作总结，会给团队中的各位确确实实的参与感、主人翁意识和对进度的信心</li>
</ul>
</li>
<li>沟通最重要，懂得坚持和妥协
<ul>
<li>美工和程序猿的关系在开发中永远十分紧张，尤其是产品经理还两边不讨好。该坚持的决策要坚持，但是在自己不了解的范畴上，切不可随意发言，即使是自己觉得有必要的问题，也应该先问过大家的意见，说清楚自己的想法，投票决定</li>
</ul>
</li>
<li>快速迭代，不要试图慢工出细活
<ul>
<li>对我们来说，因为学业和生活上各种繁琐的原因，是不一定有非常稳定的时间参与开发的。这种时候你就需要掌握快速迭代和精益创业的精髓，迅速上线，边接受反馈边修改更新。如果你指望闭门造车，一鸣惊人，到时候可能就胎死腹中咯。</li>
</ul>
</li>
</ul>
<h2>开花结果：我种下一颗种子 终于长出了果实 今天是个伟大日子</h2>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/211.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/211-600x375.png" /></a><p>开花结果：我种下一颗种子 终于长出了果实 今天是个伟大日子</p></div>
<p>DNET Tech News (@DNETNews) 2025/2/30 – 09:61<br />
今天，在帝都举办了当今世界科技巨头之一 Rhytune 的开发者大会，由 CEO Dimpurr 带来了全新的跨平台媒体库客户端“有词”。产品采用了全新的设计语言，我们将继续在 Twiiter+ 上直播这次大会。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/221.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/221-600x375.png" /></a><p>幻灯片22</p></div>
<p>多年以后，你们或是已经成为了硅谷新星团队，或是行将成为国内纳税大户企业，或是正在开发人造变形金刚。当你作为嘉宾出席青少年开发者大会， Hein 姐请你为台上台下初出茅庐的小开发者们传授一下你当年的创业经。这时候你会发现，其实一切不过起源于一个小小的创意，还有不断的学习。</p>
<p>虽然是老生常谈，不过在互联网时代，只有不断的质疑自己、接纳新知识才是最重要的。不管是我们今天领导项目、参与开发还是努力学习，都是为了提升自己的实力，得到更好的资源，百尺竿头更进一步。年轻是我们的资本，对待项目，不应该草草了事，或是希望出名走红，而是应该抓住难得的学习机会，精益求精，为真正长远的技术之路服务。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/241.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/241-600x375.png" /></a><p>幻灯片24</p></div>
<p>以上。这些都不过是我的个人见解，或许还错漏百出。不过我希望我一路上通过亲身体验总结出来的这些经验，能够在大家在技术之路上，引发一些有益的思考。或许在座的各位，有朝一日将会成为技术界知名的黑客，或是产品享誉世界的设计师，或是互联网上弄潮的企业家。总之我相信，我们青少年开发者现在站在时代的最前沿，今后也必定能引领互联网时代的潮流！谢谢大家！</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/07/251.png"><img src="http://img1.dimpurr.com/dimblog/2014/07/251-600x375.png" /></a><p>幻灯片25</p></div>
<p><del>嗯。我觉得我讲的很好了，不过据说一定要有观众提问的环节，好吧，正面上吧。╮(╯-╰)╭</del></p>
<p>PPT 下载：<a href="http://pan.baidu.com/s/1c09xSRI" target="_blank">http://pan.baidu.com/s/1c09xSRI</a></p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/event14/">ADC 2014 如何成为一位合格的产品策划者 – 青少年开发者大会 EVENT 14 演讲稿</a></p>]]></content>
        
        <summary type="html">
            
            转载请注明：ADC 2014 – 如何成为一位合格的产品策划者 – 青少年开发者大会演讲稿 | 钉子の次元 http://blog.dimpurr.com/event14/ 这是本次 EVENT 14 青少年开发者大会我的个人演讲稿。于 2014 年 7 月 20 日下午第二场
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="ADC"/>
        
        <category term="EVENT14"/>
        
        <category term="PM"/>
        
        <category term="团队"/>
        
        <category term="开发"/>
        
        <category term="悦调"/>
        
        <category term="管理"/>
        
        <category term="设计"/>
        
        <category term="项目"/>
        
    </entry>
    
    <entry>
        <title>听歌向：Vocaloid China 良曲率持续好评上升中。</title>
        <link href="http://blog.dimpurr.com/bilibili-vocaloid-china/"/>
        <id>http://blog.dimpurr.com/bilibili-vocaloid-china/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-07-09T17:10:06+08:00</published>
        <updated>2014-07-09T17:10:06+08:00</updated>
        
        <content type="html"><![CDATA[<div><a href="http://img1.dimpurr.com/dimblog/2014/07/13.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/07/13-600x337.jpg" /></a><p>洛天依 x 乐正绫</p></div>
<p>虽然放假已经快一个月了，博客依然和死了差不多。好吧，我曾经以为这个没有作业的暑假会很愉♂悦，但是事实证明，上个寒假是我最后一次真正的假期了 ……</p>
<p>十六号去北京参加 ADC ，届时欢迎面基。答应的惊喜之一可能会在同一时刻公布。至于之前预告的新主题，现在处于无限延期状态，在此致歉。我在努力。</p>
<p>那么，这次就单纯的是推荐一下我收藏夹里被我翻来覆去的听的几首 Vocaloid China 的良曲。希望有朝一日你和我也能加入制作者的世界。</p>
<p><span></span></p>
<h2>填词向</h2>
<p>类似投食歌，食谱颂之类的老坟我就不挖出来了。不过事实上，早期的中国 Vocaloid China 界缺乏编曲实力，作品集中在调教技术和 Vocaloid 日文曲填词部分。当然即使这样，仍然有填词向的杰作出现。</p>
<h3>【洛天依】【百合治愈向】外婆桥</h3>
<p></p>
<p>原曲初音梦与叶樱。早期相当优秀的填词作品。</p>
<h3>【洛天依】葬花【bad apple民乐remix】</h3>
<p></p>
<p>原曲东方 Bad Apple ，填词红楼梦黛玉葬花。混音已初具风格。</p>
<h3>【言和】炉心融解【调教：OQQ君】【PV附】</h3>
<p></p>
<p>原曲镜音炉心溶解，可以听出混音水准和填词仍有一部分硬伤。后期作品，PV 相当成熟。</p>
<h2>重口向</h2>
<p>早期山新特色的声音也曾经被用来做过一些不好的事情 ╮(╯-╰)╭</p>
<h3>【洛天依原创】二小姐虐杀曲《血红满月之夜》</h3>
<p></p>
<p>原创东方同人曲，无论编曲混音填词都很有实力。 PV 略重口，略。这个时期相当多这类作品。</p>
<h2>原创向</h2>
<p>随着论坛和社区的成熟，也渐渐涌现出许多的同人社团。推出的专辑也涉及越来越多的风格，质量层层上升。因为音色原因，洛天依少女向的 J-Pop 类歌曲似乎调教难度较大，（只是我的固有印象）于是后期的良作基本集中在两种风格。</p>
<h3>【洛天依民国风】八辈子【PV付】</h3>
<p></p>
<p>中国风向。请允许我这么叫，但是实际上往往只是民乐风、和乐风甚至是管弦乐风。更接地气的填词、更平实的语言、更精纯的文言文，都更多的出现在新作上。不过对于这首歌，我只能说，恰到好处的填词，民国风的混音和超萌的 PV，简直美哭了。</p>
<h3>【洛天依原创】怎么爱♀动画PV付【咏吟轩】【第二页收录曲】</h3>
<p></p>
<p>电子向/RAP向。 电子乐是 Vocaloid 的正确用法。至于最近的 RAP 风潮可能是针对中文的特性而言，因为事实证明简单的将很多 J-Pop 的旋律填上中文会让人感觉很奇怪。同时，这首歌是堪称目前国内最大 Vocaloid China 社团咏吟轩的作品，即将于专辑收录。</p>
<h3>【洛天依原创曲】I LOVE U【PV付】</h3>
<p></p>
<p>刚被我黑说洛天依不适合唱的就是这类歌，虽然也有部分出类拔萃的作品。至于言和似乎比较适合黑化歌。我坚持认为 Vocaloid China 还差音色更清脆，和音色更软的声库 …… 乐正绫，会是你吗？</p>
<p>以上。这些都是我收藏夹里被屯的最久的作品，并没有选入像咏吟轩的纸飞机这样非常经典但是我个人觉得不够优秀的作品。好吧，其实我只是想留作存档而已。也欢迎诸位给我推荐点你喜欢的作品 …… 在评论敲 AV 号就好了，不然目测会给当垃圾评论吞掉。</p>
<p>最后请允许我说一句：如果诸位有会编曲的务必教我 QAQ</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/bilibili-vocaloid-china/">听歌向：Vocaloid China 良曲率持续好评上升中。</a></p>]]></content>
        
        <summary type="html">
            
            洛天依 x 乐正绫 虽然放假已经快一个月了，博客依然和死了差不多。好吧，我曾经以为这个没有作业的暑假会很愉♂悦，但是事实证明，上个寒假是我最后一次真正的假期了 …… 十六号去北京参加 ADC ，届时欢迎面基。答应的惊喜之一可能会在同一时刻公布。至于之前预告的新主题，现在处于无限
            
        </summary>
        
        <category term="次元爱"/>
        
        <category term="ACG"/>
        
        <category term="Bilibili"/>
        
        <category term="CD"/>
        
        <category term="PV"/>
        
        <category term="Vocaloid"/>
        
        <category term="洛天依"/>
        
        <category term="视频"/>
        
        <category term="言和"/>
        
        <category term="音乐"/>
        
    </entry>
    
    <entry>
        <title>Adagiio V1.1.1 – 宽屏大图 ACG 风格单栏 WordPress 主题</title>
        <link href="http://blog.dimpurr.com/adagiio/"/>
        <id>http://blog.dimpurr.com/adagiio/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-06-26T15:50:27+08:00</published>
        <updated>2014-06-26T15:50:27+08:00</updated>
        
        <content type="html"><![CDATA[<p>Adagiio 是一个 HTML5 的宽屏大图 ACG 风格单栏 WordPress 主题，又名 Sankarea ，配色灵感来自绣球花的叶。适合文艺向、动漫向个人博客和大图风格 CMS 站点。附带移动版响应式页面，支持中英文。感谢 (null) 群的各位在开发过程中的帮助，没有你们这个主题也做不出来 ……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/06/screenshot3.png"><img src="http://img1.dimpurr.com/dimblog/2014/06/screenshot3-600x400.png" /></a><p>Adagiio 首页</p></div>
<p>欢迎在此页提出相关问题和建议！</p>
<p><span></span></p>
<h3>功能特点</h3>
<ul>
<li>自定义大头图随机切换</li>
<li>文章缩略图显示</li>
<li>自适应宽屏和响应式移动版</li>
<li>中/英语言支持</li>
<li>HTML5 语义标签和 CSS3 特效，兼容到 IE8 及以上</li>
</ul>
<h3>主题演示</h3>
<ul>
<li><a href="http://work.dimpurr.com/demo/wp/adagiio/" target="_blank">主题演示</a></li>
</ul>
<h3>获取主题</h3>
<ul>
<li><a href="http://pan.baidu.com/s/1jG0xSvO" target="_blank">百度网盘</a></li>
<li><a href="http://work.dimpurr.com/theme/adagiio/update/adagiio.zip" target="_blank">测试版更新源</a> (随时更新最新测试版本，可能不稳定)</li>
</ul>
<h3>使用说明</h3>
<ul>
<li>将会随机输出 /bannner/ 下的文件作为随机头图，请确保有至少一个文件且全部为有效图片</li>
<li>将会自动选取文章第一张图片作为特色图片，可自行删除。如果找不到设置特色图片的地方，请在文章编辑页右上勾选 显示选项 &gt; 特色图像</li>
<li>首页显示的摘要，请在文章编辑页右上勾选 显示选项 &gt; 摘要，然后在摘要框编辑</li>
<li>正式版功能更加稳定，希望使用最新版可以下载正式版后在后台更新到最新测试版或者从测试版更新源下载</li>
<li>直接在后台主题安装上传 Zip 文件即可使用，也可以手动解压至 wp-content/theme 目录</li>
<li>推荐使用 WordPress 子主题进行修改，这样还可以继续享受更新，详细可搜索相关教程</li>
<li>&lt;pre&gt; 为多行代码， &lt;code&gt; 为行内代码</li>
</ul>
<h3>更新历史</h3>
<ul>
<li>v1.0 主题发布</li>
<li>v1.1 微调动画和完善后台</li>
</ul>
<h3>截图预览</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/06/201406261351341.png"><img src="http://img1.dimpurr.com/dimblog/2014/06/201406261351341-600x399.png" /></a><p>页脚小工具</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2014/06/201406261355591.png"><img src="http://img1.dimpurr.com/dimblog/2014/06/201406261355591-600x400.png" /></a><p>内文</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2014/06/20140626135955.png"><img src="http://img1.dimpurr.com/dimblog/2014/06/20140626135955-600x400.png" /></a><p>评论区</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2014/06/20140626150724.png"><img src="http://img1.dimpurr.com/dimblog/2014/06/20140626150724.png" /></a><p>移动版</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/adagiio/">Adagiio V1.1.1 – 宽屏大图 ACG 风格单栏 WordPress 主题</a></p>]]></content>
        
        <summary type="html">
            
            Adagiio 是一个 HTML5 的宽屏大图 ACG 风格单栏 WordPress 主题，又名 Sankarea ，配色灵感来自绣球花的叶。适合文艺向、动漫向个人博客和大图风格 CMS 站点。附带移动版响应式页面，支持中英文。感谢 (null) 群的各位在开发过程中的帮助，没
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Adagiio"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
    </entry>
    
    <entry>
        <title>在下还没死呢。</title>
        <link href="http://blog.dimpurr.com/also-alive/"/>
        <id>http://blog.dimpurr.com/also-alive/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-05-31T21:49:44+08:00</published>
        <updated>2014-05-31T21:49:44+08:00</updated>
        
        <content type="html"><![CDATA[<p>消失了那么久博客还有访客真是不胜荣幸。实在安静了太久所以来冒个泡。</p>
<p>之所以销声匿迹当然是因为众所周知的中考。经历了三月份的体育中考，五一的华附自招，还有即将到来的二十天倒计时的中考。压力不小，成长也不小。不如说 …… 初三的下学期的确是属于变革和成长的半年。「做一个有趣的人」，这是向自己许下的诺言。</p>
<p>中间除了各种作死和敲代码，几乎没有什么空闲时间。比较值得纪念的大概是 <a href="https://plus.google.com/113009935346267402225/posts/Uz7Yg3wBH1y" target="_blank">进妖都赶考</a> 时和 <a href="https://otakuchiyan.github.io" target="_blank">宅酱</a> 的 <a href="https://plus.google.com/113009935346267402225/posts/J6QDtgykqRR" target="_blank">首次面基</a>。这个暑假已经被排满了一半，相信又会痛并快乐着。在此向大家承诺，绝对会带来一个以上的惊喜。順便预告一下，暑假第一周内预计会有一款极简和一款 Ajax 扁平主题发布。还有就是 …… 几个大坑大概很快也可以公开了。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/also-alive/">在下还没死呢。</a></p>]]></content>
        
        <summary type="html">
            
            消失了那么久博客还有访客真是不胜荣幸。实在安静了太久所以来冒个泡。 之所以销声匿迹当然是因为众所周知的中考。经历了三月份的体育中考，五一的华附自招，还有即将到来的二十天倒计时的中考。压力不小，成长也不小。不如说 …… 初三的下学期的确是属于变革和成长的半年。「做一个有趣的人」，
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="中考"/>
        
        <category term="吐槽"/>
        
        <category term="悦调"/>
        
    </entry>
    
    <entry>
        <title>madoro – 扁平黑色自适应窄单栏 WordPress 主题</title>
        <link href="http://blog.dimpurr.com/madoro/"/>
        <id>http://blog.dimpurr.com/madoro/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-03-16T21:29:13+08:00</published>
        <updated>2014-03-16T21:29:13+08:00</updated>
        
        <content type="html"><![CDATA[<p>madoro 是我花了一个下午一个晚上单曲循环「まどろみの约束」速成的以星空为主题的新单栏主题，没有用背景以外的任何一张图片素材，大概可以用在文字为主或想自定义背景的简洁风格博客。附带移动版响应式页面。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/03/screenshot.png"><img src="http://img1.dimpurr.com/dimblog/2014/03/screenshot-600x378.png" /></a><p>madoro</p></div>
<h3>千反田える (佐藤聡美) &amp; 伊原摩耶花 (茅野愛衣) – まどろみの約束</h3>
<p></p>
<p><br />
<span></span></p>
<h3>功能特点</h3>
<ul>
<li>自适应宽屏（增大到 800px）和响应式移动版</li>
<li>HTML5 语义标签和 CSS3 特效，兼容到 IE8 及以上</li>
<li>简单的后台设置</li>
<li>英文语言包支持</li>
<li><a href="http://work.dimpurr.com/demo/wp/madoro/" target="_blank">主题演示</a></li>
</ul>
<h3>获取主题</h3>
<ul>
<li><a href="http://pan.baidu.com/s/1o6oFHYq" target="_blank">百度网盘</a> (V1.1正式版)</li>
<li><a href="https://github.com/dimpurr/madoro/releases/tag/v1.11" target="_blank">Github</a> (V1.1正式版)</li>
<li><a href="ftp://work.dimpurr.com/theme/madoro/update/madoro.zip" target="_blank">测试版更新源</a> (随时更新最新测试版本，可能不稳定)</li>
</ul>
<h3>使用说明</h3>
<ul>
<li>直接在后台主题安装上传 Zip 文件即可使用，也可以手动解压至 wp-content/theme 目录</li>
<li>若有任何问题或希望什么新特性请在此页面回复，会尽力帮忙</li>
</ul>
<h3>更新历史</h3>
<ul>
<li>v1.0 基本样式和响应式</li>
<li>v1.1 后台设置和英文语言支持</li>
</ul>
<h3>截图预览</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2014/03/20140316211549.png"><img src="http://img1.dimpurr.com/dimblog/2014/03/20140316211549-600x377.png" /></a><p>小工具和尾部</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2014/03/20140316211640.png"><img src="http://img1.dimpurr.com/dimblog/2014/03/20140316211640-600x378.png" /></a><p>评论区</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/madoro/">madoro – 扁平黑色自适应窄单栏 WordPress 主题</a></p>]]></content>
        
        <summary type="html">
            
            madoro 是我花了一个下午一个晚上单曲循环「まどろみの约束」速成的以星空为主题的新单栏主题，没有用背景以外的任何一张图片素材，大概可以用在文字为主或想自定义背景的简洁风格博客。附带移动版响应式页面。 madoro 千反田える (佐藤聡美) &amp;amp; 伊原摩耶花 (茅野愛衣
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="ACG"/>
        
        <category term="madoro"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="冰菓"/>
        
        <category term="前端"/>
        
        <category term="动漫"/>
        
        <category term="博客"/>
        
    </entry>
    
    <entry>
        <title>Ticker – 个人时间管理应用概念原型</title>
        <link href="http://blog.dimpurr.com/ui-ticker/"/>
        <id>http://blog.dimpurr.com/ui-ticker/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-03-09T20:15:16+08:00</published>
        <updated>2014-03-09T20:15:16+08:00</updated>
        
        <content type="html"><![CDATA[<p>取了个有点装逼的名字，其实只是忽然想到博客里除了各种前端和各种折腾之外也该扔点交互相关的内容了，于是除了稀薄到可以忽略不计的两篇交互研讨文之外决定陆续把闲时无聊构思的进行中抑或是被毙的项目线稿什么的搬上来了。嘛但是相比交互更多设计稿反而仅仅草草的做了个做信息架构这方面也请不要吐槽。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/03/Scan-0005.png"><img src="http://img1.dimpurr.com/dimblog/2014/03/Scan-0005-600x390.png" /></a><p>Ticker 线稿 (字球不吐槽，建议戳开大图)</p></div>
<p>Ticker 是去年设计的一个用于管理时间的应用，简而言之就是增强版的 Todo 。</p>
<p>构思来源于健忘的某人正极其依赖 Google Keep 和 Google Calendar 的时期，经常会为一项任务是添加到 Todo 还是日历而感到纠结。更别说 Google Keep 将备忘便签和 Todo 融合已经让我少开了一个应用， Aviate Launcher 对于日历事项的展示方式更是硬生生变成了 Todo ，因此我就想到——以待办事项为共同核心，能否将 Todo 、日历和便签融合到一起？</p>
<p><span></span></p>
<p>当然马上不可避免的就是可观的复杂度增长，因此定位是重度依赖时间管理类应用的人群。</p>
<p>毫无疑问<span>首先</span><span>依次测试了类似的竞品，其中在模式的融合方面几种最有参考价值的是 Todo + 便签的 Google Keep 和 Todo + 便签 + 日历的 ColorNote 。当时还针对每种产品的竞争力和优秀特性列了一个表单，已几乎回想不起来所以不在此赘述。</span></p>
<p>在此之中确定了任务分类和进度系统、 Todo 日历和笔记三个系统之间可以互相绑定的思路。举个栗子，我为明天的会议创建一个日历日程，在标注了具体时间之后就会被显示在日历上，同时我可以把备忘的信息写在关联的便签上。</p>
<p>从整个产品的维度来考虑，「任务」应该是沟通三个组件的概念，最后选用了类似 Any.Do 的任务列表作为设计出发点。画线稿的过程中自然而然的发现原生 Holo 风格非常适合这类结构清晰的应用于是就上手了，最后的成品是一个以侧边栏（现在看来应该改用原生 Drawer ）区分 Todo 、记录和日历，以 Tab 切换视图的 Holo 风格界面。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/03/Index-Floder.png"><img src="http://img1.dimpurr.com/dimblog/2014/03/Index-Floder.png" /></a><p>Ticker Index-Floder Pencil 原型</p></div>
<p>后来使用 Evolus Pencil 的 Holo 元件简单制作了一个 Todo 列表的原型。中间的 Tab 可以切换时间和文件夹两种视图，其下是点击标题可以被折叠的层叠卡片。任务右侧的数值可能代表子任务数、时间或者价格等和任务最相关的信息，在任务上自左向右轻扫标记完成，再次右滑删除，向左滑动展开操作，点击展开子任务和详情。</p>
<p>现在回顾设计还存在几个问题，都集中在对任务的操作上。其一是左右滑动的手势被任务操作占用之后，违反了 Andriod Design 中对于 Tab 应该可以被滑动切换的要求。其二是操作的隐喻，虽然可以通过新手教学等告诉用户两个滑动手势的意义，但是明显应该在最常规的心里模型即点击后展开详情同时提供操作按钮，否则很可能出现摸不着头脑的情况。</p>
<p>随后值得注意的是新建事件的界面。这个页面借鉴的是 Google 日历的新建日程风格，除了必要的选项还表达了简要注释或关联记录、将日程分享给其他参与者、增加自定义的元数据和子任务等构思。至于查看单个事件的界面就非常简单，只是标题、元数据和子任务展示以及分享编辑等操作了。</p>
<p>最后还有一个没有来得及呈现在纸上但却是至关重要的构思，就是名为「时间」的一个页面，展示了当前时间日期、正在进行的任务和其操作、接下来进行的一项任务的界面，是使用我要当学霸时看到记时界面灵机一动想到的。这同样是一个场景出发的设计，思路大致如下：之所以想到把这几个方面的功能整合为一个应用，都是因为他们关于「我要做什么」。那么正好应该有一个页面告诉我现在和马上应该干什么，这胜过让我看一串长长的 Todo 列表。可惜当时的原型和聊天记录都不知道死哪里去了，现在也没有心情重画。</p>
<p>当时与螺丝、E姐交流过关于这个构思的事情，包括考虑有没有 Java 开发的人手、要不要做开源项目之类的。螺丝也提出了记录等其实不是痛点的功能可以拆开做成可选插件，还有和 Google Calendar 的同步之类的想法。但是最后没有考虑去实现原因还是真的对时间管理有如此复杂需求的用户实在不多，庞杂的设计显得过于累赘（虽然我保证我都会用）开发的成本过高。不过如果谁无聊想把这个设计实现了，记得署我一个名就好了 ……</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/ui-ticker/">Ticker – 个人时间管理应用概念原型</a></p>]]></content>
        
        <summary type="html">
            
            取了个有点装逼的名字，其实只是忽然想到博客里除了各种前端和各种折腾之外也该扔点交互相关的内容了，于是除了稀薄到可以忽略不计的两篇交互研讨文之外决定陆续把闲时无聊构思的进行中抑或是被毙的项目线稿什么的搬上来了。嘛但是相比交互更多设计稿反而仅仅草草的做了个做信息架构这方面也请不要吐
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="Andriod"/>
        
        <category term="Andriod Design"/>
        
        <category term="Pencil"/>
        
        <category term="Ticker"/>
        
        <category term="Todo"/>
        
        <category term="交互"/>
        
        <category term="原型"/>
        
        <category term="应用"/>
        
        <category term="线框"/>
        
    </entry>
    
    <entry>
        <title>OpenSUSE (Linux) 下安装 Sublime Text</title>
        <link href="http://blog.dimpurr.com/linux-sublime/"/>
        <id>http://blog.dimpurr.com/linux-sublime/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-03-01T22:51:50+08:00</published>
        <updated>2014-03-01T22:51:50+08:00</updated>
        
        <content type="html"><![CDATA[<p>Sublime Text 作为某人御用的编辑器已经到了没有 ST 就不想写代码的地步了 …… 当然因为是 Python 编写， ST 在 Linux 下的安装使用实际上非常简单，唯一需要注意的是输入法 bug 的修复。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/03/shot7.png"><img src="http://img1.dimpurr.com/dimblog/2014/03/shot7-600x458.png" /></a><p>Sublime Text 3 with OpenSUSE &amp; fcitx &amp; Google Pinyin</p></div>
<h3>一 下载主程序</h3>
<p>首先进入官网下载官方提供的 Linux 版 tar 压缩包：<a href="http://www.sublimetext.com/" target="_blank">http://www.sublimetext.com/</a></p>
<p><span></span></p>
<pre>tar -xvf sublime*.tar.bz2 # 解压 tar 压缩包
cd sublime*
sudo mkdir /opt/sublime_text/
sudo cp -rf * /opt/sublime_text/ # 拷贝到系统程序目录</pre>
<p>实际上此时就已经可以执行其中的 sublime.py 运行了，但是这种情况下会导致 ibus 和 fctix 等中文输入框架无法被激活，另外在 OpenSUSE 下还可以导致菜单栏不正常显示的 bug ，因此需要打个补丁。</p>
<h3>二 输入法补丁和菜单项</h3>
<p>首先下载稍后需要用到的输入法修复补丁和菜单图标：<a href="http://pan.baidu.com/s/1bnvMRDH" target="_blank">http://pan.baidu.com/s/1bnvMRDH</a></p>
<p>注：此链接已失效，请常见 <a href="http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;t=7006&amp;start=10#p41343" target="_blank">http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;t=7006&amp;start=10#p41343</a></p>
<p>然后要记得安装好编译环境，如果已经完成了请忽略此步：</p>
<pre>sudo zypper in build-essential # 其他发行版同理</pre>
<p>然后编译输入法补丁并拷贝到 Sublime Text 目录：</p>
<pre>gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC # 编译 libsublime-imfix.so
sudo cp libsublime-imfix.so /opt/sublime_text/ # 拷贝至安装目录</pre>
<p>最后为了方便使用在菜单中添加 Sublime Text 的菜单项：</p>
<pre>sudo cp sublime_text.desktop /usr/share/applications/ # 拷贝编辑好的 .desktop 菜单项到系统目录
sudo chmod 777 /usr/share/applications/sublime_text.desktop # 修改权限以使其可识别</pre>
<h3>三 完成</h3>
<p>至此 Sublime Text 就可以正常使用了。剩下的各种配置和安装插件就请自行查阅资料了，不过相信只要安装好包管理器菊苣们就知道该做啥了。在 ST2 中使用 Ctrl + ~ 启动控制台敲入以下命令回车即可：</p>
<pre>import urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( ' ','%20' )).read()); print( 'Please restart Sublime Text to finish installation')</pre>
<p>至于 Sublime Text 3 则是：</p>
<pre>import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())</pre>
<p>最后是吐槽。</p>
<p>之前在查询输入法问题解决办法时找到了官方论坛上的这个反馈贴：<a href="http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;t=7006&amp;start=0" target="_blank">Input method support</a> 后来果不其然的在 Hangouts 中提到这个问题时 <a href="https://www.csslayer.info/wordpress/" target="_blank">csslayer</a> 马上开始抱怨 「我都把问题和解决的源码扔上去了这作者还高贵冷艳 <a href="https://www.csslayer.info/wordpress/fcitx-dev/wrong-and-wrong/" target="_blank">再加上这破玩意是闭源的老子连替他擦屁股的方法都没有</a> 」…… 当然其中的 <a href="http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;t=7006&amp;start=10" target="_blank">某一楼</a> 还可以看到之前使用的输入法补丁的作者 Cjacker 提供的源码。</p>
<p>而我想表达的是，总觉得作者用的一定是 Mac ……</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/linux-sublime/">OpenSUSE (Linux) 下安装 Sublime Text</a></p>]]></content>
        
        <summary type="html">
            
            Sublime Text 作为某人御用的编辑器已经到了没有 ST 就不想写代码的地步了 …… 当然因为是 Python 编写， ST 在 Linux 下的安装使用实际上非常简单，唯一需要注意的是输入法 bug 的修复。 Sublime Text 3 with OpenSUSE 
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="fctix"/>
        
        <category term="IDE"/>
        
        <category term="KDE"/>
        
        <category term="Linux"/>
        
        <category term="OpenSUSE"/>
        
        <category term="Sublime"/>
        
        <category term="编辑器"/>
        
    </entry>
    
    <entry>
        <title>战中考前的碎碎念</title>
        <link href="http://blog.dimpurr.com/freetalk-3/"/>
        <id>http://blog.dimpurr.com/freetalk-3/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-02-16T20:27:43+08:00</published>
        <updated>2014-02-16T20:27:43+08:00</updated>
        
        <content type="html"><![CDATA[<p>今天报道完毕，明天开学。嘛，再怎么说也是初三下学期，基本不会经常上线了呢。</p>
<p>结果一个寒假补课一周、回老家两周、补作业一周，就这么好像做了很多事又什么也没做的过去了。<span>在鸟不拉屎哦不一堆鸟屎的老家看到了这辈子最璀璨的星空，还补了一堆小说，再次萌生了动笔的念头。</span><span>推进某个项目以及带领其信息架构和原型设计算是最有意思也最辛苦的工作吧，希望能够平稳走入正轨。至于前端，只不过做了一个新个人页和对 Clearison 的重设计，虽然都相当的满意。</span></p>
<p>嘛，其实是因为原定这个寒假要重新写一个简洁风格的 WordPress 主题换上，结果因为时间不够只能在 Clearison 的基础上稍作修改。尽管看起来不过是换成了透明风格和毛玻璃背景，但是在颜色和阴影方面做文章的工作量实际上也相当不小。先不提好像每次在某群里提一个关乎 JavaScript 的问题不久后我的代码就会成为全群性的事件，这次的改版样式表也感谢修改过程中 <a href="http://best33.com/" target="_blank">@三三</a> 的意见了 ……</p>
<p>嗯。对于接下来<del>没有电脑</del>的几个月的愿望是，在学习上取得好成绩，做一个有趣一点的人。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/freetalk-3/">战中考前的碎碎念</a></p>]]></content>
        
        <summary type="html">
            
            今天报道完毕，明天开学。嘛，再怎么说也是初三下学期，基本不会经常上线了呢。 结果一个寒假补课一周、回老家两周、补作业一周，就这么好像做了很多事又什么也没做的过去了。在鸟不拉屎哦不一堆鸟屎的老家看到了这辈子最璀璨的星空，还补了一堆小说，再次萌生了动笔的念头。推进某个项目以及带领其
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="(null)"/>
        
        <category term="LYRICS"/>
        
        <category term="寒假"/>
        
        <category term="开学"/>
        
        <category term="模版"/>
        
        <category term="设计"/>
        
    </entry>
    
    <entry>
        <title>KDE 上安装 Elementary Luna 窗口风格</title>
        <link href="http://blog.dimpurr.com/kde-elementary/"/>
        <id>http://blog.dimpurr.com/kde-elementary/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-02-11T16:47:49+08:00</published>
        <updated>2014-02-11T16:47:49+08:00</updated>
        
        <content type="html"><![CDATA[<p>这段时间一直在 OpenSUSE 下各种折腾，当然这次明智的选择了 KDE 作为桌面环境。说实话上手相当的辛苦但是也相当的有趣。KDE 没有辜负其极其强大和可自定义的名声，但是和我一直以来的印象一样即使是在曾经号称最美 Linux 的 OpenSUSE 下也恍若上个世纪的默认视觉风格实在有点让人不满。另外一段时间后的使用后更加坚信 KDE 只有程序员没有设计师了，各种强大的一塌糊涂也滥用的一塌糊涂的界面和功能简直无法吐槽。不过无论如何，对于 SUSE 和 KDE 包括其社区自己还是非常的感冒，就是不知道会不会在 Yast2 和 Zypper 安定下来了。</p>
<p>前面说到过默认的 Oxygen 风格至少我是不怎么能接受，于是在调教界面设置时无意间就注意到了熟悉的 Elementary 样式。于是最终效果是这样的：</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/02/shot6.png"><img src="http://img1.dimpurr.com/dimblog/2014/02/shot6-600x371.png" /></a><p>KDE4 with Elementary Theme on OpenSUSE</p></div>
<p><span></span></p>
<p>QtCurve 是一款具有极其强大自定义功能的主题，几乎可以通过配置模拟出各种样式，当然也可以被调教的非常丑。不过重点在于我们这个 Elementary 风格的界面样式也是通过这个主题进行配置的，因此我们要首先进行安装：</p>
<pre>sudo zypper in qtcurve-kde4 // OpenSUSE
sudo apt-get install qtcurve // Debian / Kubuntu</pre>
<p>然后下载 Elementary 风格包：<a href="http://kde-look.org/CONTENT/content-files/162259-ELunaPack-forKDE.zip" target="_blank"><strong>http://kde-look.org/CONTENT/content-files/162259-ELunaPack-forKDE.zip</strong></a></p>
<p>下载后解压，直接 ./install.sh 执行脚本即可。如果是 OpenSUSE 需要手动编辑其中的所有 /.kde/ 为 /.kde4/ 方可安装到正确的路径。安装完成后前往系统设置，执行以下设置：</p>
<ol>
<li>应用程序外观 &gt; 风格 &gt; 部件样式 &gt; QtCure</li>
<li>应用程序外观 &gt; 风格 &gt; 部件样式 &gt; 配置 … &gt; 预设 &gt; ElementaryLuna2.1</li>
<li>应用程序外观 &gt; 颜色 &gt; 方案 &gt; ElementaryLuna</li>
<li>工作空间外观 &gt; 窗口装饰 &gt; ElementaryLuna</li>
</ol>
<p>这样就算完成了窗口样式的设置了。至于图标集推荐使用 <a href="https://www.dropbox.com/s/nu8o3npcqczp3po/KFaenza%20Oxygen.tar.gz?n=224777243" target="_blank">KFaenza Oxygen</a> ，是我之前在 eOS 下使用的图标集与 Oxygen 默认图标的拼合版本。下载完成之后，进入应用程序外观 &gt; 图标 &gt; 安装主题文件选择下载的压缩文件即可</p>
<p>虽然不能在显示效果上完全媲美 eOS 本尊，但是相对来说还是顺眼多了。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/kde-elementary/">KDE 上安装 Elementary Luna 窗口风格</a></p>]]></content>
        
        <summary type="html">
            
            这段时间一直在 OpenSUSE 下各种折腾，当然这次明智的选择了 KDE 作为桌面环境。说实话上手相当的辛苦但是也相当的有趣。KDE 没有辜负其极其强大和可自定义的名声，但是和我一直以来的印象一样即使是在曾经号称最美 Linux 的 OpenSUSE 下也恍若上个世纪的默认视
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Elementary"/>
        
        <category term="KDE"/>
        
        <category term="Linux"/>
        
        <category term="OpenSUSE"/>
        
        <category term="美化"/>
        
    </entry>
    
    <entry>
        <title>Modern Sci-Fi Personal Page</title>
        <link href="http://blog.dimpurr.com/modern-page/"/>
        <id>http://blog.dimpurr.com/modern-page/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-01-23T14:16:07+08:00</published>
        <updated>2014-01-23T14:16:07+08:00</updated>
        
        <content type="html"><![CDATA[<p>唔 …… 大概可以说是预谋很久了，至少是在公布 dp-card 即上一个个人页之前，就准备好要写一个新的主页了。要说直接原因，或许是因为被 <a href="http://www.joyneop.com/" target="_blank">JN</a> 吐槽了很多次请换一个，抑或是一时急躁提前公布了之前的个人页无法再用下去了？至少还是在寒假的第二天开工，花了两个下午把这个新的页面完成了。<a href="http://im.dimpurr.com/" target="_blank">围观→</a></p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/01/20140122221511.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/01/20140122221511-600x320.jpg" /></a><p>dp-modern</p></div>
<p>其实很早就有过好几个版本的设想了，但是脑子里浮现出来的基本上是 iOS7 风的单页长视差。大气一点的原则自不必说，之前的个人页自己烦恼了挺久的隐蔽的博客入口的问题也得好好解决。不过等到某天骑着单车准备补课的时候，脑子里却冒出来一个与之前完全迥异的思路。然后等到做完数学试卷后，某人就开始在本子上涂画了起来。</p>
<p><span></span></p>
<p>于是这个被 <a href="http://imnerd.org/" target="_blank">公子</a> 当成了明信片的 Windows Design 风横向卷动的草稿就出现了。没错，整个构思就开始于 Start 右上角的用户名区域和一个由斜方块构成的背景。灵感来源实际上是当初刚见到 Windows 8 尚热衷于折腾 Metro 应用时的一款介绍 Win8 技巧的应用其中交错的菱形 Tile 设计，刚试图搜索了记忆中的几个关键字却没有相同的应用，只剩下曾经上过官方 UI 指南作为示例一个线索。</p>
<p>总之这样的黑白配色也是没有提前预料到只是动手码页面时顺手做出的，在自然而然的给黑色加上了白线作为纹理后，也接受了 JN 评价的「Sci-Fi 风格」。尽管实际上大部分并没有去遵守巨硬的交互，但是包括头像区、按下后的缩放、后面链接 hover 时的边框，都是毫无疑问的 Windows UI 元素。最后的效果可以说是自己相当的满意，只不过条件是你在性能良好的机器上用着 Webkit 访问。</p>
<p>——没错，作为硬伤，浏览器兼容性和性能都差的有点可怕。通过监听鼠标事件实现的横向滚动在 Gecko 下并不存在这个属性，于是因为某人觉得除了首页必须提供提示之外其他页面无法容纳翻页剪头导致狐娘光荣的享受了必须手动拖动滚动条的待遇。因为初期只针对小屏幕进行了布局于是在大屏幕上偷懒使用了响应式配合 html { zoom } 进行了等比缩放，结果放大逻辑被吐槽了很久和根本不支持放大——别和我说 transform scale ——的狐娘被 Webkit Hack 后排除在外，感受到了大屏幕下无力的背景和内容比例。</p>
<pre>@media screen and (-webkit-min-device-pixel-ratio:0) { /* Webkit 专属样式 */ }</pre>
<p>不过说起布局，最开始甚至丧心病狂到用 vw 单位和 calc() 就差动用 gird 布局实现横向多页自适应的某人，最后还是在公子的启发下用百分比辛苦的完成了。除此之外还有用到的技巧是研究 Zespia 菊苣博客中 blockquote 样式后学到的纯 CSS 配合渐变实现的条纹，虽然事实证明大面积利用这个技术极其影响性能并且在某些电脑上会被渲染的极其恐怖之后某人只能择日换成位图了。</p>
<pre>background-color: #010203;
background-image: linear-gradient(to right, rgba(255, 255, 255, 0.25), rgba(0, 0, 0, 0) 1px);
/* 1px 的实色和透明作为间距 */
background-size: 4px 100%;
/* 利用背景尺寸控制重复 */</pre>
<p>当然还有一个用到了 Webkit Hack 的就是 -webkit-filter: brightness(0); 下白色图片转为纯黑的神奇逻辑，成功实现了链接处四个大磁贴某人懒得转换位图图标为 icon font 的图片反色 transition 。至于其他浏览器就只有和文字反色不协调的瞬间切换图片的待遇了，嘛人懒没办法 …… 至于 -webkit-scrollbar 之类的 Webkit 特权就不再多言，至少我不想去手动模拟一个滚动条了。什么，低版本浏览器？没人权。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/01/20140122221553.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/01/20140122221553-600x633.jpg" /></a><p>利用响应式配合 zoom 实现的大屏幕纵向窗口放大移动视图</p></div>
<p>还有值得一提的话，白色背景图是未经提前说明的的盗自 <a href="http://blog.ysmood.org/" target="_blank">YS</a> 的博客然后经 PS 调整了对比度和亮度，关于的文章准备单独写篇目前只是占位而且还没从随手复制的 NOIP 纪念文换成 Fly Out。在姬加提前发 PO 后思萌菊苣的反馈非常感谢，嘛<span>虽然 <a href="http://yufan.me/" target="_blank">雨帆</a> 菊苣在群里扬言说要扒皮，不过我也只能说纯静态的页面我也懒得去做什么保护或者混淆了吧。对了</span><span>作品区说是施工中但是其实不知道这个疲于奔命的寒假什么时候才能搞定，那么，就这些了。</span></p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/modern-page/">Modern Sci-Fi Personal Page</a></p>]]></content>
        
        <summary type="html">
            
            唔 …… 大概可以说是预谋很久了，至少是在公布 dp-card 即上一个个人页之前，就准备好要写一个新的主页了。要说直接原因，或许是因为被 JN 吐槽了很多次请换一个，抑或是一时急躁提前公布了之前的个人页无法再用下去了？至少还是在寒假的第二天开工，花了两个下午把这个新的页面完成
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS3"/>
        
        <category term="HTML5"/>
        
        <category term="Webkit"/>
        
        <category term="个人页"/>
        
    </entry>
    
    <entry>
        <title>一个 Div 可以做到的 ……</title>
        <link href="http://blog.dimpurr.com/one-div-css3-cd/"/>
        <id>http://blog.dimpurr.com/one-div-css3-cd/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-01-12T19:14:24+08:00</published>
        <updated>2014-01-12T19:14:24+08:00</updated>
        
        <content type="html"><![CDATA[<p>起因是 <a href="http://feelbug.tumblr.com/" target="_blank">Cry</a> 姐在群里提到了 box-shaodow 的 Spread Distanc 属性，于是在测试时钉子就想到做了这样一个模拟了一张 CD 的页面。整个页面只用了一个 div 元素，全部效果完全通过 CSS 实现。<a href="http://lab.dimpurr.com/One-Div-CSS3-CD/" target="_blank">查看效果→</a></p>
<div><a href="http://img1.dimpurr.com/dimblog/2014/01/20140106180551.jpg"><img src="http://img1.dimpurr.com/dimblog/2014/01/20140106180551-600x317.jpg" /></a><p>One-Div-CSS3-CD</p></div>
<p>DOM 如下：</p>
<pre>&lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;</pre>
<p>光盘整体通过多 box-shadow 和控制阴影距离以及模糊实现，为了保证透明后配色能看调了半天。上下的文字都通过伪元素添加，其中上方的标题用到了 text-shadow 模拟立体效果。四个小点是利用了 border-image 在 Webkit 下诡异的默认渲染和 linear-gradient 的错误打开方式模拟，在别的内核下貌似没有效果。</p>
<p><span></span></p>
<p>下方的换行尝试用 Unicode 换行符失败，最后在 Cry 姐建议下用 white-space: pre; 加空格模拟成功，最后在 <a href="https://plus.google.com/u/0/117654615200385722003" target="_blank">+Kerwin Che</a> 的 <a href="https://plus.google.com/113009935346267402225/posts/gbPUjNiaS4k" target="_blank">建议下</a> 发现只要在 pre 模式下就可以使用 /A 换行了 …… 尝试把 div 元素本身的内容利用起来，但是发现无法完成文字弯曲围绕在光盘内盘的效果只好作罢。暂时就想到了这些玩法，如果还有不破坏美观继续给页面添加元素的纯 CSS 方法敬请告知~</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/one-div-css3-cd/">一个 Div 可以做到的 ……</a></p>]]></content>
        
        <summary type="html">
            
            起因是 Cry 姐在群里提到了 box-shaodow 的 Spread Distanc 属性，于是在测试时钉子就想到做了这样一个模拟了一张 CD 的页面。整个页面只用了一个 div 元素，全部效果完全通过 CSS 实现。查看效果→ One-Div-CSS3-CD DOM 如下
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CD"/>
        
        <category term="CSS3"/>
        
        <category term="HTML5"/>
        
        <category term="Lab"/>
        
        <category term="错误打开方式"/>
        
    </entry>
    
    <entry>
        <title>某钉子 2013 年的浏览器 A-Z</title>
        <link href="http://blog.dimpurr.com/a-z-2013/"/>
        <id>http://blog.dimpurr.com/a-z-2013/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2014-01-12T18:50:52+08:00</published>
        <updated>2014-01-12T18:50:52+08:00</updated>
        
        <content type="html"><![CDATA[<p>嗯 …… 纪念意义上。有几个字母确实是经常用到。嘛，不知道明年会是怎样的呢？</p>
<p>这段时间一直因为期末考忙碌的要死，当然也作死爬上来了不少次，只是，噩梦般的寒假似乎一点也不值得期待呢 …… 华丽丽上午下午晚上三个补习班，与此同时剩下的时间都必须让项目赶上进度，实在是不敢再挖坑了摔 ……</p>
<p><span></span></p>
<ul>
<li>alipay.com</li>
<li>blog.dimpurr.com</li>
<li>colourco.de</li>
<li>dimpurr.com</li>
<li>exhentai.org</li>
<li>feedly.com</li>
<li>github.com</li>
<li>www.hostker.com</li>
<li>img1.dimpurr.com</li>
<li>jd.com</li>
<li>drive.google.com/keep</li>
<li>locvps.com</li>
<li>nyan.cat</li>
<li>moe4sale.in</li>
<li>otakism.org</li>
<li>plus.google.com</li>
<li>qzone.qq.com</li>
<li>readthefuckingmanual.net</li>
<li>shejidaren.com</li>
<li>translate.google.cn</li>
<li>user.qzone.qq.com/896828728</li>
<li>vps.dimpurr.com</li>
<li>wordpress.org</li>
<li>xloger.com</li>
<li>youku.com</li>
<li>zhihu.com</li>
</ul>
<p>以上。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/a-z-2013/">某钉子 2013 年的浏览器 A-Z</a></p>]]></content>
        
        <summary type="html">
            
            嗯 …… 纪念意义上。有几个字母确实是经常用到。嘛，不知道明年会是怎样的呢？ 这段时间一直因为期末考忙碌的要死，当然也作死爬上来了不少次，只是，噩梦般的寒假似乎一点也不值得期待呢 …… 华丽丽上午下午晚上三个补习班，与此同时剩下的时间都必须让项目赶上进度，实在是不敢再挖坑了摔 
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="A-Z"/>
        
        <category term="Chrome"/>
        
        <category term="导航"/>
        
        <category term="年度"/>
        
        <category term="日常"/>
        
        <category term="浏览器"/>
        
        <category term="网站"/>
        
        <category term="链接"/>
        
    </entry>
    
    <entry>
        <title>dp-card – 钉子的个人页一代</title>
        <link href="http://blog.dimpurr.com/dp-card/"/>
        <id>http://blog.dimpurr.com/dp-card/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-12-27T21:15:55+08:00</published>
        <updated>2013-12-27T21:15:55+08:00</updated>
        
        <content type="html"><![CDATA[<p>这是一个 HTML5 + CSS3 的个人名片页，附带响应式移动版，兼容 IE9 及以上浏览器。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/20131227195958.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/12/20131227195958-600x334.jpg" /></a><p>dp-card</p></div>
<p>最近有不少同学表示了对钉子目前个人页的喜爱，<del>虽然个人觉得并不咋滴，</del> 正好准备过段时间重新设计新版的个人页，于是好好修正了一下放出来了。出于无聊重新修改了各种语义化标记，把脚本也重做了，并且通过了 W3C 验证，感谢 <a href="http://www.joyneop.com/">@JoyNeop</a> 菊苣的挑刺 …… 纯 HTML5 页面，需要请自行修改相关内容。有问题可以回复，可能不接受新的功能需求。</p>
<h3><span></span>获取源码：</h3>
<ul>
<li><a href="https://github.com/dimpurr/DimPage" target="_blank">Github</a></li>
<li><a href="https://github.com/dimpurr/DimPage/releases/tag/dc-1.1" target="_blank">Github Release</a> v1.1</li>
</ul>
<h3>更新历史：</h3>
<ul>
<li>13-07-03：第一版本完成</li>
<li>13-10-28：万圣节样式更新</li>
<li>13-12-07：添加微数据，谷歌结构化数据检测通过。</li>
<li>13-12-26：HTML结构重写，脚本和细节样式修改，W3C验证通过</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/dp-card/">dp-card – 钉子的个人页一代</a></p>]]></content>
        
        <summary type="html">
            
            这是一个 HTML5 + CSS3 的个人名片页，附带响应式移动版，兼容 IE9 及以上浏览器。 dp-card 最近有不少同学表示了对钉子目前个人页的喜爱，虽然个人觉得并不咋滴， 正好准备过段时间重新设计新版的个人页，于是好好修正了一下放出来了。出于无聊重新修改了各种语义化标
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS3"/>
        
        <category term="HTML5"/>
        
        <category term="个人页"/>
        
        <category term="介绍"/>
        
        <category term="前端"/>
        
    </entry>
    
    <entry>
        <title>圣诞节的碎碎念</title>
        <link href="http://blog.dimpurr.com/christmas-freetalk/"/>
        <id>http://blog.dimpurr.com/christmas-freetalk/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-12-25T15:25:59+08:00</published>
        <updated>2013-12-25T15:25:59+08:00</updated>
        
        <content type="html"><![CDATA[<p>感觉在圣诞还继续保持沉默的话存在感就要跌到冰点了 …… 看着被菊苣博客们的圣诞贺文刷屏的 Pocket 果然自己也还是来一个例行扯淡吧，不过一直以来保持着相对有篇幅的更新，总觉得忽然间出现一篇闲话有点突兀呢。</p>
<p>话说昨晚用 Pixiv 站 order_by_popular 的 GET Bug 把人气前五页的小忍图全部收了 同时发现了一个绝赞的 R-18 作者 ，淡但是最后还是没有找到适合的圣诞图只好作罢。于是个人页现在居然还保持着万圣节特典的样式，不过找到了几个不错的素材果然还是抽时间 ReDesign 一下吧。</p>
<p>平安夜晚上大概一点也不平安，最后三三表示「你们阳光一点行不行啊」 …… 一晚上作业也没有好好写，心情烦躁最后还是打开了电脑。整个晚上除了收到了母上的一个蛋糕之外也没有什么过节的气氛，要说 Some Special 顶多算是晚上又认识了几只菊苣 ……</p>
<p>今天早上某同学大发善心请全班每人三颗阿尔卑斯 然后被同桌妹纸抢走了一颗 ，钉子也去买了袋薯片和百力滋给小组瓜分，结果事实证明寄放在某吃货妹纸那是十分错误的选择。除此之外和还有圣诞节相关的话大概就是在钉子的示范效应下同桌三人花了一节英语课 (……) 各出了一张意义不明的圣诞贺图，<a href="https://plus.google.com/u/0/113009935346267402225/posts/HCBHnadLuqc" target="_blank">请参见姬加→</a></p>
<p>大概这个圣诞也就是这么简单的过了，不过马上学校又要有元旦晚会。这次天来对自己的表现有点失望，不过希望能够再继续加油吧。… Finally, merry Christmas.</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/christmas-freetalk/">圣诞节的碎碎念</a></p>]]></content>
        
        <summary type="html">
            
            感觉在圣诞还继续保持沉默的话存在感就要跌到冰点了 …… 看着被菊苣博客们的圣诞贺文刷屏的 Pocket 果然自己也还是来一个例行扯淡吧，不过一直以来保持着相对有篇幅的更新，总觉得忽然间出现一篇闲话有点突兀呢。 话说昨晚用 Pixiv 站 order_by_popular 的 G
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="圣诞"/>
        
        <category term="惠高"/>
        
        <category term="生活"/>
        
        <category term="绘画"/>
        
        <category term="节日"/>
        
        <category term="青春"/>
        
    </entry>
    
    <entry>
        <title>Fly Out.</title>
        <link href="http://blog.dimpurr.com/fly-out/"/>
        <id>http://blog.dimpurr.com/fly-out/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-12-23T23:34:50+08:00</published>
        <updated>2013-12-23T23:34:50+08:00</updated>
        
        <content type="html"><![CDATA[<p>大概也不过是 2013 年 6 月 20 日，也就是正好半年前， Dimpurr 这个奇怪的拼写被赋予了含义。自此之后又过了无数个白天和夜晚，直到某天大概仅仅是觉得有必要再为自己写一篇相对详细的自述了，亦或是忽然间有些无聊，总而言之，就有了这篇间杂了回忆和痴想的意识流文章的存在。</p>
<p><span></span></p>
<p>——童年总是不会缺少满满的中二，每天和密友激烈思辨名为科幻小说实为无下限臆想的故事，也因此让无数个只用了数页的本子含冤而逝。直到三年级的时候钉子遇到了那位将改变钉子一生的人，从此之后每天写写画画涂涂改改打打闹闹的朦胧而又五彩缤纷的日常带着些许稚气拉开序幕。现在回想起来当时的钉子是个十足的矛盾体，在学习上是个十足的好学生但是纪律方面几乎无恶不作。就算放着惬意而无法无天的日常作死不谈，无论是班级大陆间奇葩设定辈出的国家混战还是致力于驱除三大老师聚齐带来的厄运的宗教抑或又是每年必有的神级绘师负责的年终特典，那群创造力过剩的死党们总是能发明新鲜的玩意儿。真的是，曾经觉得什么都能做到的岁月。</p>
<p>当然估计现在应该感谢学校的电脑封锁了4399等一系列网站，因为母亲是教师所以常年霸占办公室电脑的某钉子感到极其不满，不知何时已经能把优化系统和浏览 System32 作为娱乐时，就已经彻底走向了一条不归路。曾经的大数字刚推出软件管家还是业界良心，曾经的疼讯TT还是微创新MyIE的绝赞多标签浏览器，曾经的谷攻中国研究院还在为发展中国市场而努力，曾经S60V3的诺记N95还是世界一流的机皇……嘛扯远了总之在某人对把所有输入法挨个安装试用一遍然后被母上痛骂一顿这样的玩法感到腻味之后终于开始在本子上写写画画起来。然后从乱画到照抄再到加上功能设计，从软件到硬件再到企业形象，线框到视觉再到平面广告，至今钉子还保留着成为一名交互设计师的梦想。</p>
<p>——因此现在还是可以看着那满柜子的本子回忆自己幼稚的笔触，除了数码的两摞，依次还有记录着不忍直视的天坑和透视错误的汽车造型以及一本被用来抄了两年书和写了两年检讨的所谓生日礼物的本子。当然从技术的维度来说此时的钉子只是个喜欢用会声会影的模板和 3DS Max 的粒子系统小打小闹的渣渣，虽然某人自己坚持认为要不是为了找免费域名和空间浪费了整个五年级大概还会更有些进步。只是作为电脑方面的特长也没有被眼尖的老师们浪费，于是在主动给班级建立了博客之后制作班报剪辑纪念视频这种任务也毫无疑问的落到了身上。因此说当时在摆弄 Publish 的钉子心里确实是以为自己以后会从事出版或者平媒方面的行业，直到有一天知道了交互这个词的涵义。</p>
<p>也不知道是该说小宇宙爆发还是怎么的，五年级还考出过不及格的某人意外的体验到了年级第一的滋味然后成为了藏龙卧虎的市重点实验班里的一只大熊猫。只是初一初二时学习压力还不是什么值得一谈的问题，倒是在小学毕业的暑假中成功用 IIS6 + Fast-Cgi 配合花生壳在自家电脑上搭起了一个 Dedecms ，随后开始琢磨起了建站方面的事情的钉子最后还是耐不住性子放弃了当一名站长的想法。与此同时书柜里属于用户体验的空间终于已经慢慢逼近了量子力学的时候，也代表了成为科学家这个每个孩子都曾有过的单纯梦想在钉子意味上的结束。</p>
<p>——今年在YY上过的那个元旦互道「新年快乐」的声音仍然犹在耳边，然而转眼间一切的事情就已物是人非。年初第一次完全手写 HTML 的个人页仍然保存在服务器的某个目录里，暑假末承诺的 Clearision 也成为了钉子的第一个也是最受好评的作品。国庆假期拿到那两百元的时候或许还是有些踹踹不安，但是第二单就冒到了2K的时候也稍微长了点谈价方面的记性。仅仅是六个月的时间，为了躲避三次元的目光而生造出来的这个形象开始变得有存在感，无论是人气略微上涨的博客还是受到些许好评的作品居然也能以自己的方式，去影响他人了。</p>
<p>作为一名据说是稀有血统的 INTJ 梦想家 ，钉子却并不喜欢改变世界，宁可让自己轻松一点去过没那么风光但也平静幸福的生活。理想中的自己大概会是位主持创业团队和用户界面的设计师，业余不时写一些尚能入目的文字，虽说绘画因为父母的反对最终成为了手残但仍抱有一线希望，若能成为编曲广受好评的V家名P则是更好。小的时候幻想自己的公司统治着全世界的终端，每个人起床都会看到自己的 LOGO 。只是随着成长也已经没有再做白日梦的余地，只能化为所谓不断督促自己前行的动力。</p>
<p>——中考的压力并不是什么令人愉悦的事情，但是大概为了自己的梦想只能直面这个挑战。稍微瞥了一眼自己为自己定下的计划表，想起来自己曾经抱怨备考 NOIP 那段时间是人生中第一次拼命，没想到马上又有了再次体验的机会。大概直到明年八月考完某场至关重要的考试超越某个曾经仰望的人站在某个万众瞩目的讲台之后，钉子才能如愿以偿的给自己再放一个长假吧。尽管完全无法保证也无从得知这些目标能不能实现，但是如果永远不去做那么只会徒增后悔吧。大概这就是成长，只能不断的这样安慰自己，然后继续每一个作死的非日常。</p>
<p>虽说本来只是想给自己写篇简单的自我介绍，结果似乎还是没有避免成为一篇自说自话的中二文的命运。说起来因为时间原因周记也没有再写下去，那么在此延续一下一直以来的小小传统以表祭奠吧。文字环境依旧 Power Write 加 Google Keep 完成，历时大概两个晚上，标题来自至今为止循环次数最多但仍然最喜欢的专辑「Re:Dial」。时针仍然在随着石英的震荡缓缓向前，未来还不可预见而需要用双手去缔造。就算抛开其他的不谈，至少为了让自己以后不会为了此刻的举动后悔，那么就尽最大努力去前进吧。</p>
<p>千里之行，始於足下。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/fly-out/">Fly Out.</a></p>]]></content>
        
        <summary type="html">
            
            大概也不过是 2013 年 6 月 20 日，也就是正好半年前， Dimpurr 这个奇怪的拼写被赋予了含义。自此之后又过了无数个白天和夜晚，直到某天大概仅仅是觉得有必要再为自己写一篇相对详细的自述了，亦或是忽然间有些无聊，总而言之，就有了这篇间杂了回忆和痴想的意识流文章的存在
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="ADC"/>
        
        <category term="中考"/>
        
        <category term="出版"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
        <category term="回忆"/>
        
        <category term="平媒"/>
        
        <category term="成长"/>
        
        <category term="期末考"/>
        
        <category term="青春"/>
        
    </entry>
    
    <entry>
        <title>StartPress – 空 WordPress 主题脚手架</title>
        <link href="http://blog.dimpurr.com/startpress/"/>
        <id>http://blog.dimpurr.com/startpress/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-12-11T23:13:04+08:00</published>
        <updated>2013-12-11T23:13:04+08:00</updated>
        
        <content type="html"><![CDATA[<p>这是一个 HTML5 的空 WordPress 主题，可以基于此快速开始新主题的创作。内置了基本的输出结构和函数，没有任何多余样式标签。目前处于早期测试版本还较不稳定，欢迎试用和反馈。<a href="https://github.com/dimpurr/StartPress" target="_blank">Github 项目地址→</a></p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/20131211225917.png"><img src="http://img1.dimpurr.com/dimblog/2013/12/20131211225917-600x450.png" /></a><p>StartPress</p></div>
<p>因为连续制作了几个主题之后遇到了例如首页 meta 标签等的复用问题，于是就花了一晚上在几个主题的基础上修改合并成了这个空主题，并加上了注释。这只是一个单纯的空白主题，并且内置了一些常用函数，并不是一个框架，也没有复杂的功能。代码格式和文件结构有一定的个人风格，也欢迎诸位来添砖加瓦。预计将会在今后增加关于后台设置的框架。</p>
<p><span></span></p>
<p>一切以 Github 的最新版本和 README 为准。</p>
<h3>获取</h3>
<ul>
<li><a href="https://github.com/dimpurr/StartPress" target="_blank">Github</a></li>
</ul>
<h3>特点</h3>
<ul>
<li>完善的注释说明</li>
<li>仅进行基本文章输出，没有多余的标签、容器和 ID \ Class</li>
<li>文章输出默认剥离到 <em>content.php</em> ，无内置 <em>single.php</em> 和 <em>page.php</em></li>
<li>内置了导航栏、侧边栏、语言包的注册函数</li>
<li>内置了评论、页码、检查更新、使用统计等常用函数</li>
<li>仅内置了 Reset 重置样式表和一个 <em>#page</em> 页面容器，无多余样式</li>
</ul>
<h3><a href="https://github.com/dimpurr/StartPress#%E6%B3%A8%E6%84%8F" name="%E6%B3%A8%E6%84%8F"></a>注意</h3>
<ul>
<li>请将 <em>,’dpt’</em> 使用编辑器查找替换为<em> ,’主题的文本域’ </em>，当然也可以直接使用 <em>dpt</em></li>
<li>若需使用检查更新，请将 <em>func/info.json</em> 上传到服务器并填写正确的版本号和安装包地址，更新时只需更新<em> info.json </em>和安装包</li>
<li>若需使用使用统计，请将 <em>func/theme_tj.php</em> 上传到服务器并设置数据库和密码</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/startpress/">StartPress – 空 WordPress 主题脚手架</a></p>]]></content>
        
        <summary type="html">
            
            这是一个 HTML5 的空 WordPress 主题，可以基于此快速开始新主题的创作。内置了基本的输出结构和函数，没有任何多余样式标签。目前处于早期测试版本还较不稳定，欢迎试用和反馈。Github 项目地址→ StartPress 因为连续制作了几个主题之后遇到了例如首页 me
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="HTML5"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
        <category term="模版"/>
        
    </entry>
    
    <entry>
        <title>カラフルなのダイヤルパッド</title>
        <link href="http://blog.dimpurr.com/030-buy/"/>
        <id>http://blog.dimpurr.com/030-buy/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-12-08T10:21:29+08:00</published>
        <updated>2013-12-08T10:21:29+08:00</updated>
        
        <content type="html"><![CDATA[<p>大概当时的钉子，还处在非常好的状态。期中考做好历史新低的准备，结果是历史新高；只接过两百元的第一单，然后就接到了一千五的第二单……于是某人果断决定出血一回，稍微慰劳一下自己劳累的心灵——</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131207_214959.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131207_214959-600x450.jpg" /></a><p>钉子の无脑购物行为 案发现场底片</p></div>
<p><span></span></p>
<p>当然预谋已久的，而且估计也就会入那么一两次的，钉子首先开始了 Vocaloid 专辑的挑选。经过在萌购上不断挑选和虾米上不断试听，某人终于确定了一个候选列表：</p>
<ul>
<li>supercell (通常盤) [CD+DVD]</li>
<li>花楽里漫葉集 feat.初音ミク(DVD付) [CD+DVD]</li>
<li>EXIT TUNES PRESENTS Vocalostar feat.初音ミク [CD-ROM]</li>
<li>EXIT TUNES PRESENTS Vocalogenesis(ボカロジェネシス)feat. 初音ミク(ジャケットイラストレーター 三輪士郎) [CD-ROM]</li>
<li>EXIT TUNES PRESENTS Vocaloconnection (ボカロコネクション) feat.初音ミク (ジャケットイラストレーター:左) (数量限定オリジナルマウスパッド&amp;ストラップ付)</li>
<li>EXIT TUNES PRESENTS Vocalonation(ボカロネイション) feat.初音ミク（ジャケットイラストレーター　左） 【数量限定オリジナルストラップ付き】 [CD-ROM]</li>
<li>EXIT TUNES PRESENTS Vocaloanthems(ボカロアンセムズ) feat.初音ミク(ジャケットイラストレーター redjuice) 【数量限定オリジナルストラップ付き】 [CD-ROM]</li>
<li>EXIT TUNES PRESENTS Vocalogemini(ボカロジェミナイ) feat.鏡音リン、鏡音レン（ジャケットイラスト：2D）【数量限定ラバーストラップ＆マウスパッド付】</li>
<li>EXIT TUNES PRESENTS Vocalonexus (ボカロネクサス) feat.初音ミク(ジャケットイラストレーター 左) 【数量限定オリジナルストラップ付き】 [CD-ROM]</li>
</ul>
<p>…… 嗯，价格总和非常可观。经过和母上大人诚恳感人，情深意切，哭天喊地的协商交涉，某人终于成功把预算从两张提到了三张。又是一番割肉之后，成功下单：</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/20131207235307.png"><img src="http://img1.dimpurr.com/dimblog/2013/12/20131207235307-600x208.png" /></a><p>萌购订单</p></div>
<p>正好是阴雨连绵的时节，两个包裹都是在愉快的冒雨赶到小区传达室拿的。第一次拿到 Re:Dial 期间限定版时还对「萌购封印」什么的饶有兴趣，拆第二箱时也已经轻车熟路了。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131127_203703.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131127_203703-600x450.jpg" /></a><p>Livetune – Re:Dial</p></div>
<p>大概是钉子刚入宅的时候，无意间在B站首页看到了 Re:Dial 的 1080P PV ，从此才控上了V家。作为钉子从320K到FLAC到ISO，在各种码字、码页面、码程序、跑步、写作业、睡觉的场景下洗脑循环无数次的专辑，无论如何也从没有听厌过。虽然本着省钱原则希望收几张资源不多的专辑，但是最后还是因为期间限定DVD再次入了CD。</p>
<p>拿到手之后只能说，装帧真心非常漂亮，材质也十分良心。唯一的遗憾是 Cover 上那张巨大的横图本以为会是海报，结果实际上只是纸底板而已……当然马上塞进家里的DVD用创维酷开观赏了自带的四个PV，只是最后因为不堪忍受附送的劣质音响决定用电脑导出再看。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131130_213320.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131130_213320-600x450.jpg" /></a><p>EXIT TUNES PRESENTS Vocalostar &amp; Vocaloanthem</p></div>
<p>相对之下 EXIT TUNES PRESENTS 的两张专辑就显得十分普通了，倒是 Vocaloanthems 附送了个卡片和钥匙扣（虽然又重而且图案泛黄……）。当然最重要的还是歌，既然装帧本身观赏价值不搞，要做的自然是推进家里的可移动 DVD-RW 开始烧录了呐。</p>
<p>……中略，总之经过九九八十一难，钉子&amp;螺丝&amp;囧叔的赔钱计划实行小组终于成功靠着坚韧不拔的毅力，卡住不松的定力，还有赚钱吃饭的动力拿到了 ￥1500 大洋。分到 ￥750 的钉子当然准备用自己得来的这笔巨款升级一下身边的设备，首当其冲就是手机堪比地摊MP3的劣质输出了。</p>
<p>说到这个不得不提到一个悲伤的故事。之所以会接这一单，实际上是因为钉子对 RMB 意外只需 1K2 的小圆脸纪念 WalkMan 垂涎已久。然后在拿到钱的前天晚上，嗯，不过是前天晚上而已，就连愿意帮忙代购的 +Nanachi Pan 菊苣都联系好了的钉子，惊讶的发现限量版售完了……</p>
<p>放弃治疗的钉子一通心里斗争和比价选购，在 1K9 的 WalkMan F886 ，1K3 的 Meizu MX2 ， 1K4 的 Nexus 4 ， 499 的 Colorfly C3 之间选择了 Nexus 4 。然后，发现四太子也没货了……最后看在可接受的价格范围，最后选择了性价比不错，音质好评，外观先进的七彩虹 Pocket Hifi C3 。于是——</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131201_113654.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/12/IMG_20131201_113654-600x450.jpg" /></a><p>Colorfly Pocket HiFi C3</p></div>
<p>一切看起来都是那么完美，直到开始实际使用时，钉子开始后悔之前狠心没有听取一直很信任的亚马逊评论。 以下摘自某人的 Z.CN 评论：</p>
<blockquote><p>抱歉二货亚马逊女战士们还没审核通过看不到那评论懒得再写一遍过几天再补上吧总之大致意思就是音质什么的确实不错音轨层次很清晰就是设计太TM的难用了谁想出来的触摸设计啊换个歌都不能盲操而且重启不记忆播放进度不知道是不是固件原因另外开关机都啵的一声据官方说是为音质做出的牺牲牺牲你妹啊</p></blockquote>
<p>当然在是否退货间迟疑了很久，最后还是因为几乎完全没有同价位的音质主打产品而放弃了。于是一旦接受了这些设定，其实这 MP3 还是蛮高端大气上档次悦耳动听感人心的 ……</p>
<p>于是这就是钉子的无脑烧钱纪念文一篇，因为在极其复杂的环境下完成质量有点不忍直视。总而言之著文以表纪念，以上。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/030-buy/">カラフルなのダイヤルパッド</a></p>]]></content>
        
        <summary type="html">
            
            大概当时的钉子，还处在非常好的状态。期中考做好历史新低的准备，结果是历史新高；只接过两百元的第一单，然后就接到了一千五的第二单……于是某人果断决定出血一回，稍微慰劳一下自己劳累的心灵—— 钉子の无脑购物行为 案发现场底片  当然预谋已久的，而且估计也就会入那么一两次的，钉子首先
            
        </summary>
        
        <category term="次元爱"/>
        
        <category term="ACG"/>
        
        <category term="CD"/>
        
        <category term="MP3"/>
        
        <category term="Vocaloid"/>
        
        <category term="专辑"/>
        
        <category term="亚马逊"/>
        
        <category term="初音"/>
        
        <category term="无损"/>
        
        <category term="萌购"/>
        
        <category term="购物"/>
        
        <category term="音乐"/>
        
    </entry>
    
    <entry>
        <title>页面布局孰优孰劣：基于REM的EMs弹性布局——可用性的胜利</title>
        <link href="http://blog.dimpurr.com/ems-layout/"/>
        <id>http://blog.dimpurr.com/ems-layout/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-12-06T21:12:22+08:00</published>
        <updated>2013-12-06T21:12:22+08:00</updated>
        
        <content type="html"><![CDATA[<p>页面布局的方式总是随着技术的更新和创意的涌现不断的更新换代。从最开始的 Fixed 固定布局，到因为宽屏设备和移动互联网的普及产生的响应式和自适应，再到「Mobile First」的设计理念，前端们在可用性方面做的努力越来越多。</p>
<p>REM 是一个在 CSS3 中被提出的新单位，相对 EM 变为了针对根元素 &lt;html&gt; 的 font-size 计算，使得便利性大为提升的弹性布局再次被提上话题。在介绍具体实现之前，不妨先说说为何要选择 EMs 进行布局。</p>
<p>脱离了表格布局的蛮荒时代后，越来越多的基本布局方式被应用在了实践中，当然也不乏多种配合。以下就是几个常用技术的对比。<i>（响应式和自适应这两个名词经常被错误使用，例如 <a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html">自适应网页设计（Responsive Web Design）</a> 这篇文章</i></p>
<ul>
<li><b>固定 Fixed</b><br />
使用 px 和 pt 这样的绝对单位进行固定布局。在无论什么设备上保持固定的尺寸，在不适合的分辨率下可能导致大面积空白或横向滚动条。最经典，也是被证明极其不友好、维护困难的方法。</li>
<li><b>流动 Fluid</b><br />
使用 % 百分比进行相对布局。可以根据可视区域 (viewport) 和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合 max-width 等属性控制尺寸流动范围以免过大或者过小影响阅读。某些情况下可能导致错误的伸缩或者布局被破坏。</li>
<li><b>弹性 Elastic</b><br />
使用 em 或 rem 单位进行相对布局。避免了根据 px 布局在高分辨率下几乎无法辨认的缺点，又相对 % 百分比更加灵活，同时可以支持浏览器的字体大小调整和缩放等的正常显示。需要一段时间适应而且不易从其他布局转换过来，但几乎是目前最好的布局方式。</li>
<li><b>伸缩 Flexbox</b><br />
使用 CSS3 Flex 系列属性进行相对布局。对于富媒体和复杂排版的支持非常强大，但是还未普及并且兼容性较差。</li>
<li><b>响应式 Responsive</b><br />
使用 <a href="http://blog.dimpurr.com/css-media/">@media 媒体查询</a> 给不同尺寸和介质的设备切换不同的样式。在优秀的响应范围设计下可以给适配范围内的设备最好的体验，但是在同一个设备下实际还是固定的布局，并且因为浏览器的支持原因对介质的检测还不实用。</li>
<li><b>自适应 Adaptive</b><br />
通常使用 <a href="http://blog.dimpurr.com/css-media/">@media 媒体查询</a> 和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是利用响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术综合统称。自适应几乎已经成为优秀页面布局的标准。</li>
</ul>
<p><span></span></p>
<p>弹性布局在一众相对布局中毫无疑问拥有极大的优势。除了以上提到的几点之外，以下几点也是非常有用的特性：</p>
<ul>
<li><b>优秀的兼容性</b><br />
不同于 FlexBox 等初生标准，浏览器对于 em 的支持非常的好，同时对于 rem 的支持也比预料中稍佳。如果使用 LESS 或者 SASS 等 CSS 预处理器，还可以做对于低版本浏览器 (IE8-) 的 px 降级处理。<a href="http://caniuse.com/rem">CanIUse 的兼容表</a></li>
<li><b>哇！我看不到像素点</b><br />
使用绝对尺寸单位进行布局的最大缺点，就是在动辄1080P的手机屏幕上将小到难以阅读，同时过高的分辨率也会使媒体查询无法发挥应有的功效。但是如果使用 em 字体大小进行布局，就可以方便的利用系统默认字号设定了。</li>
<li><b>对于浏览器用户字体大小设置的支持</b><br />
对于视力障碍和残障人士，可以在浏览器的设置中更改字体的大小，但不同浏览器迥异的缩放模式经常使得使用固定尺寸单位的网站布局崩溃，而这种时候 EMs 单位可以保证完全一致自然的效果。</li>
<li><b>对于页面缩放的响应式支持</b><br />
在平常阅读中也常有缩放页面的需要，弹性布局可以在缩放中正确的激活响应式。反观使用绝对单位判断的响应式，可能在部分浏览器中当缩放的实际显示空间不够时仍然使用为大可视区域设计的样式，容易导致布局崩溃。不过在现代浏览器中已经会激活对应的查询。</li>
<li><b>保持一致的换行</b><br />
完全使用 EMs 单位进行布局的话，缩放过程中文字和图片不会产生流动，可以完美的保持布局的美观和稳定。</li>
</ul>
<p>尽管如此，随之而来的还有一些美中不足的小问题。如果还有发现其他弊端，也欢迎 <a href="http://blog.dimpurr.com/ems-layout/#comments">在此回复</a> 。</p>
<ul>
<li><b>如何惹恼 Work Flow 上的其他人</b><br />
在完整的工作流程中，各种原型、视觉、切图很难全部使用 em 作为计量单位，只能在前端实现的时候转换。而且默认的 1em:16px 计算也较为不便，后面会提到一个巧妙的解决方法。</li>
<li><b>麻烦的父级元素 font-size 继承</b><br />
如果使用 em 作为尺寸单位，因为 em 相对父元素 font-size 值进行计算的特性，如果中间有对元素的字体大小进行更改，子元素的全部布局就会出错。这点现在可以很方便的通过相对于根元素的 rem 单位计量来避免。</li>
<li><b>不该放大的图片</b><br />
假如为图片使用了 em 设定尺寸，在响应不同设备的字体时就会按比例增大而导致模糊。但是如果使用常规的 px 设定尺寸，又会失去文字排版均一的好处。考虑到平常的设计中文字流动并没有影响，可以稍微牺牲可用性而用 px 设定图片尺寸。</li>
<li><strong>养成坏习惯容易，好习惯难</strong><br />
从 ems 单位切换到 px 或者 pt 只需要简单的单位转换，而从绝对单位向弹性布局转换绝对不是一个好的体验。因此在项目开始时就应该确定好弹性布局的基础，否则后期迁移并不容易。</li>
</ul>
<p>那么如何开始一个弹性布局的页面呢？不不不，除了使用 em 作为单位表示尺寸之外，还有一些可以用到的技巧：</p>
<ul>
<li><strong>为根元素设置 font-size: 100%</strong><br />
在 IE 上的文字缩放选项并不符合常规情况下的预期，即在特大和特小的情况下缩放不是平滑的，很容易导致文字被缩放到难以阅读的程度。此时就可以为 &lt;html&gt; 元素指定 100% 的字体大小，以即时响应用户的缩放。</li>
<li><strong>为文档元素设置 font-size: 62.5%</strong><br />
先前已经提到过，尽管所有浏览器都一致的保持着 16px 的默认字号，但是 1:16 的比例明显十分不方便计算。将字号设为 10px 会使 Ems 布局前功尽弃，此时通过设置为 16px 的 62.5% 就可以很方便的利用十进制进行计算了。当然如果你选择使用的是 rem 为单位，需要牺牲低版本 IE 的兼容性将 &lt;html&gt; 的 font-size 设为 62.5% 。</li>
<li><strong>为媒体查询使用 ems</strong><br />
对于前面提到的对 Retina 高清分辨率屏幕的支持，使用 em 为单位的媒体查询就是一个有用的技巧。当每行能容纳的文本少于某个值时进行响应而不是宽度为某个像素进行响应，将会大大改善响应式设计的使用体验。</li>
<li><strong>为 rem 使用预处理器</strong><br />
随着 rem 的推出，弹性布局最大的麻烦之一得到解决。但是尽管 em 的支持已很有历史， rem 却仅支持最新的几个浏览器版本，在低版本浏览器上的显示效果将会是灾难级的。提前使用 SASS 等 CSS 预处理器为低版本浏览器准备好一个 px 为单位的降级很有必要，这里不再详述，可自行查找相关资料。</li>
</ul>
<p>基本上只要明确了以上几点，就可以按平常的方法继续进行网页的布局。不过正因为弹性布局是一个为阅读体验而生的技术，在这方面稍加注意，还可以更好的发挥弹性布局的优势。</p>
<ul>
<li><strong>让行高保持节奏</strong><br />
这是一个提高阅读体验的绝妙方法 —— 让所有元素的行高始终保持为一个值的倍数，想想网页是平铺在一个有行线的笔记本上，让每个元素都完美的占据多格的中间而不压线。请注意，没有阅读体验的弹性布局一文不值。</li>
<li><strong>提供不同文字大小的样式</strong><br />
很多站点都会为了照顾不同用户提供大中小的样式表，在弹性布局下的实现更加容易。如果用户不懂得更改浏览器的显示设定，仅需要提供 body 元素 font-size 不同的几个样式表，即可马上对整个网页进行缩放。</li>
<li><strong>不必关注像素，而是比例</strong><br />
尽管为了配合视觉设计我们需要在实际过程中进行 px 到 em 的转换，但是因为缩放的存在，实际需要聚焦的核心不是尺寸本身而是整体布局的比例。只要确定正常视图下布局处在一个合理的大小和位置，剩下的交给 ems 就好了。</li>
<li><strong>脱离样式表可用</strong><br />
这是和弹性布局无关的一条可用性建议。永远为网页保持合理的 DOM 结构，不为了样式服务颠倒顺序，让网页即使脱离样式表也十分完美。如此一来就算是在屏幕阅读器、字符浏览器等极端环境下，仍然可以保持最大化的体验。</li>
</ul>
<p>尽管在中国并不十分流行，弹性布局仍然是一个极其优秀和体验良好的布局方式。互联网的发展促进了信息的传播，然而推广网页设计的无障碍化仍然需要很多的努力。在日新月异的网格、瀑布流等布局出现的今天，弹性布局依旧不失为追求简洁和阅读享受的网页设计师的一具利器。</p>
<p>最后吐槽一下，经过长时间的搜集资料和准备，花了两天晚上且中间间隔两周才把这篇文章写了出来。感觉依旧完全是在罗列要点，没有多少文采和趣味可言，不知何时写技术文章的文笔才能好一点呢……</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/ems-layout/">页面布局孰优孰劣：基于REM的EMs弹性布局——可用性的胜利</a></p>]]></content>
        
        <summary type="html">
            
            页面布局的方式总是随着技术的更新和创意的涌现不断的更新换代。从最开始的 Fixed 固定布局，到因为宽屏设备和移动互联网的普及产生的响应式和自适应，再到「Mobile First」的设计理念，前端们在可用性方面做的努力越来越多。 REM 是一个在 CSS3 中被提出的新单位，相
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS"/>
        
        <category term="HTML5"/>
        
        <category term="前端"/>
        
        <category term="响应式"/>
        
        <category term="布局"/>
        
        <category term="弹性布局"/>
        
        <category term="流动布局"/>
        
        <category term="自适应"/>
        
    </entry>
    
    <entry>
        <title>为 WordPress 主题添加文章形式支持和注册自定义类型</title>
        <link href="http://blog.dimpurr.com/wp-postformats/"/>
        <id>http://blog.dimpurr.com/wp-postformats/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-11-24T22:39:41+08:00</published>
        <updated>2013-11-24T22:39:41+08:00</updated>
        
        <content type="html"><![CDATA[<p>WordPress 3.1 之后，推出了一个模仿 Tumblr 的「文章形式」功能，可以让博客中除了默认的文章之外展现出更多的特殊样式。不同的文章形式，可以支持在输出时进行判断处理，以及列出存档等等……很多细心的主题里面都会加上对一些文章形式的支持，如果在面临特殊需求时，希望能够自定义专门的编辑器或者分类目录，那么还可以去注册一个自定义的文章类型。</p>
<h3>一 内置形式</h3>
<p>WordPress 已经内置对几种常用的文章形式的支持，如果可以满足需要，那么就不需要再重复造轮子了，只需要添加主题对已有形式的支持就好了。内置形式列表如下：</p>
<ul>
<li>standard – 标准，也就是默认的文章形式</li>
<li>aisde – 日志，实质上就是个不显示标题的标准文章</li>
<li>link – 链接，类似 Tumblr 的链接分享</li>
<li>quote – 引语，展示为引用的一段文字</li>
<li>status – 状态，简而言之就像是一条 Tweet</li>
<li>image – 图像，发布单张图片</li>
<li>gallery – 相册，也就是扩充的图像功能</li>
<li>audio – 音频，……需要说吗</li>
<li>video – 视频，……同上</li>
<li>chat – 聊天，以专门格式显示聊天记录</li>
</ul>
<p>如果想添加对以上形式的支持，只需要在 functions.php 里添加对应的项目即可，然后在输出文章的时候使用函数判断切换不同的样式：</p>
<p><span></span></p>
<pre>// 添加对文章样式的支持，在数组中增加以上列表的类型别名即可
add_theme_support( 'post-formats', array( 'status', 'chat' ) );

// 在输出文章时，增加一个判断语句来使用不同的输出格式
// has_post_format() 函数返回判断是否是该形式的布尔值
if ( has_post_format( 'chat' )) { echo 'orzFly 22:27:28: 我勒个去我说好像在哪儿听说过三三。。'; }
// get_post_format() 函数返回文章形式的别名
if ( get_post_format() == 'status' ) { echo '不愉快です。'; }
// 还可以利用 post_class() 函数给每个形式输出专有类的功能，在HTML结构差异不大无需更改的情况下使用
&lt;div id=&quot;post-&lt;?php the_ID(); ?&gt;&quot; &lt;?php post_class(); ?&gt;&gt;</pre>
<h3>二 注册自定义类型</h3>
<p>如果以上自带的函数无法满足贪得无厌的你的需求，除了自定义栏目以外，还可以来定制一个属于自己的文章类型。示例如下：</p>
<pre>function custom_format() {
// 文章形式设置
	$args = array(
		'public'	=&gt; true,
		'label'		=&gt; '时间轴'
	);
// 注册文章形式函数，需要别名和设置数组两个参数
	register_post_type( 'timeline', $args );
}
// 添加注册动作
add_action( 'init', 'custom_format' );</pre>
<p>至于设置的内容，这个就多了。常用的设置属性如下，是否开头的项值都是 true 或者 false：</p>
<ul>
<li>label – 标签，也就是文章形式的显示名称</li>
<li>labels – 实际上是重命名编辑器对于该文章形式显示的界面提示文字内容，例如菜单名称或者文章保存之后的提示信息。需要传送一个数组，贴心的你一定会挨个自定义一遍，是吧……包括的数组值 id 如下：
<ul>
<li>name</li>
<li>singular_name</li>
<li>menu_name</li>
<li>all_items</li>
<li>add_new</li>
<li>add_new_item</li>
<li>edit_item</li>
<li>new_item</li>
<li>view_item</li>
<li>search_items</li>
<li>not_found</li>
<li>not_found_in_trash</li>
<li>parent_item_colon</li>
</ul>
</li>
<li>description – 对文章类型的描述</li>
<li>public – 是否默认公开，或者只在后台显示</li>
<li>exclude_from_search – 是否从搜索中排除</li>
<li>publicly_queryable – 是否可以使用 parse_request() 在前端公开查询</li>
<li>show_ui – 是否在后台显示默认的管理界面</li>
<li>show_in_nav_menus – 是否显示在菜单管理的添加提示里</li>
<li>show_in_menu – 是否在开启 show_ui 的情况下在管理菜单中显示</li>
<li>show_in_admin_bar – 是否在 Admin Bar 的新文章菜单中显示，默认同上值</li>
<li>menu_position – 在管理菜单中显示的位置，使用数字指定。放上几个常用的值参考：
<ul>
<li>5 &gt; n – 整个菜单的顶部</li>
<li>10 &gt; n &gt; 5 – 在文章和媒体菜单之间</li>
<li>n &gt; 25 – 在评论菜单之后</li>
<li>n &gt; 60 – 在第一个分隔符后</li>
<li>100 &gt; n &gt; 80 – 在设置菜单之后</li>
<li>n &gt; 100 – 在第二个分隔符后</li>
</ul>
</li>
<li>menu_icon – 菜单的图标，不指定使用一个齿轮的默认图标</li>
<li>capability_type – 编辑模式，可以指定如下值：
<ul>
<li>post – 文章，默认的文章编辑器</li>
<li>page – 页面</li>
<li>attachment – 附件</li>
<li>mediapage – 媒体页面</li>
</ul>
</li>
<li>capabilities – 最强大也是最复杂编辑器设置。传入的值是一个数组，一般来说就用到其中的七个数组，也可以用到扩展的更多项，对其设置可以完全自定义其编辑页面：
<ul>
<li>edit_post, read_post, delete_post – 编辑，读取，删除操作</li>
<li>edit_posts – 文章编辑器</li>
<li>edit_others_posts – 编辑非用户所有的文章时的编辑器</li>
<li>publish_posts – 文章公共项目的管理</li>
<li>read_private_posts – 可以被读取的私有项目</li>
<li>非核心的扩展项目不再叙述。</li>
<li>一个示例如下，注意一些值上面需要在末尾添加「s」，具体的定义已经是非常高级的应用，这里也不叙述了：
<pre>[cap] =&gt; stdClass Object (
	[edit_post]		 =&gt; &quot;edit_{$capability_type}&quot;
	[read_post]		 =&gt; &quot;read_{$capability_type}&quot;
	[delete_post]		 =&gt; &quot;delete_{$capability_type}&quot;
	[edit_posts]		 =&gt; &quot;edit_{$capability_type}s&quot;
	[edit_others_posts]	 =&gt; &quot;edit_others_{$capability_type}s&quot;
	[publish_posts]		 =&gt; &quot;publish_{$capability_type}s&quot;
	[read_private_posts]	 =&gt; &quot;read_private_{$capability_type}s&quot;
        [delete_posts]           =&gt; &quot;delete_{$capability_type}s&quot;
        [delete_published_posts] =&gt; &quot;delete_published_{$capability_type}s&quot;
        [edit_private_posts]     =&gt; &quot;edit_private_{$capability_type}s&quot;
)</pre>
</li>
</ul>
</li>
<li>map_meta_cap – 是否使用内置的 meta 映射</li>
<li>hierarchical – 是否支持排序，类似于页面的排序值功能。因为需要将所有条目取出进行计算顺序，假如应用了排序文章太多可能导致性能问题</li>
<li>supports – 最常用的支持设置，可以定义支持编辑器的哪些项目。值如下：
<ul>
<li>title – 标题</li>
<li>editor – 富文本编辑器</li>
<li>author – 选择作者</li>
<li>thumbnail – 特色图像，也就是缩略图</li>
<li>excerpt – 摘要</li>
<li>trackbacks – Trackback 引用支持</li>
<li>custom-fields – 自定义栏目</li>
<li>comments – 评论</li>
<li>revisions – 修订记录</li>
<li>page-attributes – 页面层级 类似页面编辑中的父页面</li>
<li>post-formats – 文章形式选择</li>
</ul>
</li>
<li>register_meta_box_cb – 是否建立 meta box 的回调函数</li>
<li>taxonomies – 文章形式的分类法，需要和 register_taxonomy() 函数配合使用</li>
<li>has_archive – 是否拥有该分类目录的存档页面</li>
<li>permalink_epmask – 是否重新端点的位掩码，抱歉我没看懂这个……</li>
<li>rewrite – 地址重写设置，需要传入数组。值如下：
<ul>
<li>slug – 重写中的目录别名，效果大概是 /post-slug/1 这样</li>
<li>with_front – 是否在链接前遵循其他的前缀，还是直接在根域名重写</li>
<li>feeds – 是否在文章 feed 流中显示</li>
<li>pages – 是否提供分页</li>
</ul>
</li>
<li>query_var – 自定义查询值，比如文章查询值是 /?p=[POST_ID] ，可以给文章类型自定义一个查询别名或者 false 沿用默认</li>
<li>can_export – 是否支持导出功能</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/wp-postformats/">为 WordPress 主题添加文章形式支持和注册自定义类型</a></p>]]></content>
        
        <summary type="html">
            
            WordPress 3.1 之后，推出了一个模仿 Tumblr 的「文章形式」功能，可以让博客中除了默认的文章之外展现出更多的特殊样式。不同的文章形式，可以支持在输出时进行判断处理，以及列出存档等等……很多细心的主题里面都会加上对一些文章形式的支持，如果在面临特殊需求时，希望能
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="PHP"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
        <category term="模版"/>
        
    </entry>
    
    <entry>
        <title>Nothing is Impossible.</title>
        <link href="http://blog.dimpurr.com/no-impossible/"/>
        <id>http://blog.dimpurr.com/no-impossible/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-11-17T13:35:06+08:00</published>
        <updated>2013-11-17T13:35:06+08:00</updated>
        
        <content type="html"><![CDATA[<p>第一次起稿的时候这个标题大概是用来做NOIP初赛的庆功文；第二次再打开编辑器时，似乎又变成了期中考和NOIP复赛的凭吊文。至于现在呢，不过是在一段紧张的时间的休止符处，亦或者接踵而至的压力的序章中，一个小小的驻足回望罢了。</p>
<p>说到这里也大概往回翻了翻博客的文章，整个十月仅有的两次更新实在让人汗颜。当然某种意义上的销声匿迹也不是本意，关于无比忙碌的这段时间，一切的源头大概还得从初一时说起。</p>
<p>我们的电脑老师据说身患小儿麻痹，走起路来一瘸一拐。按语文老师的说法，如果不是行动不方便，按电脑老师的才华是不会待在这个小地方的。尽管直到最后一节电脑课某钉子也没感觉到老师的才华在哪里，其它方面不好评价，不过至少不应该连复制粘贴的快捷键都不知道或者 Galaxy S3 都不会用吧。</p>
<p>顺便插一个小插曲，说起来前几天整理文件的时候无意翻出了初一时和同学用脚本扫出来的学校网站后台密码，一时兴起敲进去惊讶的发现依然能用，当初恶搞留下的贴吧Ad都没有被发现。临走前还在模板库发现了不知哪位学长留下的CSOL的模板，不过说实话默认模版惨绝人寰的现代浏览器兼容性真是不禁让人想随便写个HTML5模板送给学校呢。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/11/2013-09-06-23-24-54.png"><img src="http://img1.dimpurr.com/dimblog/2013/11/2013-09-06-23-24-54-600x433.png" /></a><p>还想过作死的清除数据，不过目测要被查水表。</p></div>
<p>嘛，回到正题。大概初一下学期时的一节电脑课老师宣布拥有「奥脑课」这种很明显是用脚趾头想出来的逼格直接降到负数的名字后的第一节课，人数毫无疑问是爆满的。不过在老师冷冷的打开 Pascal 蓝的发紫土得掉渣的IDE后，想来玩电脑的同学也领教了其厉害。不出几节课之后人数就变得寥寥无几，剩下十来个同学依旧坚挺。</p>
<p><span></span></p>
<p>刚开始的时候同学们还总是认真听的——不知道是懒得花钱还是怎样，学校这套号称宁波多媒体的教学系统锁定界面只需 Win + D 就可轻易退出。于是不出几节课之后老师的讲解就没有人在听，各种把监控进程淦掉然后联机CS或者MC。当然偶尔老师还是会来点突击测验清洗掉滥竽充数的人，不过因为战五渣的监考能力来蹭电脑玩的人从未感到过压力。</p>
<p>于是各种心不在焉的日常持续到初二，去试水初赛的同学们毫无疑问全军覆没，钉子也差几分没拿到复赛资格。就连初三开学了还一直优哉游哉的某人，终于在考试的前一周坐不住了。 NOIP 省级一等奖华附优先录取，这对于某学渣来说简直是震撼性消息。双十这一天，持续作死的一个月开始了。</p>
<p>说起来也好笑，因为一直没认真听课某人对于这门语言的掌握仅限于各种语言通用的表达式和循环。暑假时也曾想了解下相关的补习班，却收到了老师「要学这个只能去广州那些地方」这样的答复。结果那时凭借座位优势，钉子作大死花了三天时间恶补 Pascal 教程和计算机科学导论，半听半看的应付着课程以免拉下太多，然后就这样上了战场。</p>
<p>第二次来自然就轻车熟路多了，很容易的就找到了等在惠州市教育局前面的同学们。很快就结束了考试，同时因为国庆假期所致这个周末只有一天，就这样某钉子没有休息的开始了下一周。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/11/13-1.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/11/13-1-600x450.jpg" /></a><p>整个考试过程非常随意，外加整个惠州参考人数目测只有六十左右，中间还有无监考老师的真空时段。</p></div>
<p><span>周一就知道了结果，实际上是老师直接跑到教室来和钉子和另一位同学说了结果。「我第一个就看到你的卷子(……)，改了一下，惠州市第一名。」随后响起的就是同学的惊叹声，伴随着略微的惊喜和不安。</span></p>
<p>回到家马上对了一下答案，在自以为擅长的互联网协议上不小心丢了几分，最作死的计算题也错了一道，最后的读程序也挂了一块。顺便看了看贴吧里报出来的分数，动辄95+的分数也马上就让原本的小小高兴烟消云散：没错，只是因为惠州太小了而已。</p>
<p>随后很快又来了一个打击，华附只是给奥赛得奖者开放了仅考四科的招生考试，手上有华杯赛等级的钉子早已达到了资格，而免考保送正好上届是最后一届了。知道这个消息后很是失落，士气也萎了一大半。</p>
<p>按照时间顺序这里应该讲的，倒应该先是期中考。钉子最不希望的事情终究还是发生了：考完期中考后过一天，就是 NOIP 复赛。结果因为准备 NOIP ，完全没有背完政治和历史的某人再次硬上了考场。虽然母上早已表示可以理解，但是实在还是不希望考砸被老师们放弃。初三的压力果然是最好的动力，平日里努力了的理科都感觉良好，只是基本上靠感觉瞎扯的文科十分堪忧。</p>
<p>考完期中考后的那个周六早上九点，惠高进入复赛的三位同学在汽车站集中了。随后一路上看书复习还有看骗分导论直到大巴抵达了天河客运站，打的到八中门口解决了快餐之后也差不多到了要开始的的时间。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/11/13-11-8-1.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/11/13-11-8-1-600x450.jpg" /></a><p>于是很快找到了位于图书阅览室的考场，然后就是等待开始了。</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/11/13-11-9-1.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/11/13-11-9-1-600x450.jpg" /></a><p>之前预先练习了 NOI Linux 的操作，但是从外面看进去却是一排排的蓝天白云。事实把双系统的可能性也排除了，实际上根本就是在 Windows 下进行</p></div>
<p>一低头看见胸前钥匙上挂着的 Kingston ，钉子又不自觉的萌生了作大死的想法，把各种 Sublime Text 和 QQ Pinyin 还有 NetCut 等拷了进去。事实上最后也发挥了作用，嘛，节省了几秒吧……没做多久等待，输入了大意为实现中国梦的解压密码后拿到试题，就开始了解答。</p>
<p>应该说是运气好，第一道题关键的拆分字符串和倒序输出正好在前一天晚上的练习中做过。但是其中的一个 REPEAT UNTIL 被钉子当成递归，好死不死的调试了整整半个小时。最后还是没有发挥好，最后一道题根本都没有开始做，然后就那么睡着时间结束退场了。</p>
<p>和同学还有两位陪同老师在校门口吃着饭，顿时觉得还是很开心的。尽管没有考好还是很遗憾少了一个可以拿的出台面的资本，但是和同学们因为学校不批车(……)奔波来到广州再回去这种感觉还是很有意思。最后也放弃了面基的想法，两个小时的路程大概九点回到了惠州。</p>
<p>虽然说是那么说，终于结束了一长段时间的压力、期中考和NOIP的遗憾等等扑面而来，钉子选择了把自己关到书房里熬夜补番到撑不住。然后又是作大死的放松了两天，向来高效率的学校也马上贴出了成绩单。</p>
<p>初看时还有点不敢相信，因为原本是已经做好了迎接初二以来最差的心理准备，结果反而是最好的一次年级排名。对比了其他人才突然反应过来，这次实验班终于用了和普通班一样难度的试卷，于是实验班排名集体上浮……除了记错的体育分，理科确实有了就可观的进步，更逆天的是完全没背只刚看了一中午的历史居然完美秒杀了平均分。</p>
<p>嘛流水账终于到了最后就来深化一下主题吧，所以说大概什么事情努力了就能做的比想象中更好，就算没有成功也不必感到后悔，因为已经尽了自己所能。回想起来辛苦的日子其实也很幸福，现实的压力下也还是有开心的小小日常。仅以此文，纪念提不起劲的钉子人生中第一次学会努力吧。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/no-impossible/">Nothing is Impossible.</a></p>]]></content>
        
        <summary type="html">
            
            第一次起稿的时候这个标题大概是用来做NOIP初赛的庆功文；第二次再打开编辑器时，似乎又变成了期中考和NOIP复赛的凭吊文。至于现在呢，不过是在一段紧张的时间的休止符处，亦或者接踵而至的压力的序章中，一个小小的驻足回望罢了。 说到这里也大概往回翻了翻博客的文章，整个十月仅有的两次
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="OI"/>
        
        <category term="Pascal"/>
        
        <category term="广州"/>
        
        <category term="惠高"/>
        
        <category term="期中考"/>
        
        <category term="编程"/>
        
        <category term="考试"/>
        
    </entry>
    
    <entry>
        <title>如何专业自然不做作地卖萌？</title>
        <link href="http://blog.dimpurr.com/saimoe-pro/"/>
        <id>http://blog.dimpurr.com/saimoe-pro/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-11-05T18:44:45+08:00</published>
        <updated>2013-11-05T18:44:45+08:00</updated>
        
        <content type="html"><![CDATA[<p><em>此回答由某钉子原答于知乎：<a href="http://zhihu.com/question/21948448/answer/19822916" target="_blank">如何专业自然不做作地卖萌？</a> 被知乎官方微博推荐于：<a href="http://weibo.com/1904769205/AhiANxGa5" target="_blank">知乎的微博</a></em></p>
<p>嘛，作为某只卖萌苦手，自然也为如何卖萌苦恼过，也羡慕过十分受大家喜爱的前辈，也不爽过一些矫揉造作的人XD 既然这样，在此就斗胆总结一下自己的思路，希望大家不吝指正的说。</p>
<h3>卖萌の功效</h3>
<blockquote><p>卖萌是网络用语。原本是ACG界词汇“萌”的引申词汇，即“刻意显示自身的萌”，后来在网络上意义又有所延伸。</p>
<p>——题主好谢谢您的百科 <a href="http://zh.moegirl.org/%E5%8D%96%E8%90%8C" target="_blank">卖萌 – 萌娘百科<i></i></a></p>
</blockquote>
<p>所谓「萌」，最直观的理解自然就是可爱，当然也可以延伸为让人喜爱的事物，或者表达热衷于某物什么的……那么按照题目的思路来说，如果在网络交流之中卖萌，PO主多半是想达到以下效果：</p>
<ol>
<li>人家才没有卖萌呢 &gt; &lt;（自我宣传，形象建设）</li>
<li>不要打架，卖萌好处都有啥，谁说对了就包养他~（活跃气氛）</li>
<li>泻药，看来今天早饭是吃不成了 QAQ （勾引读者兴趣，引出下文w）</li>
</ol>
<p>虽然这么说似乎是说要诸位做作，不过如果都搞不清自己为什么卖萌，大家也是萌不起来的喔。</p>
<p><span></span></p>
<h3>什么样的人，怎样的萌</h3>
<p>都说产品要精准定位直击用户需求软肋，卖萌也是一样。屏幕对面的是怎样的人，和他们的关系如何，这些事情都是要影响自己如何遣词造句的。对方能接受怎样程度的「卖萌」，什么类型的「卖萌」，没有把握好度可是会很糟糕的呢。</p>
<p>场合也是很重要的，在大家都不开心的时候来个卖萌或许可以让紧张的空气稍微变得放松一些，如果在严肃讨论的时候来个糟糕的傲娇就是使人尴尬了呐。在公司的年会上卖萌（B站除外），那是妥妥卷铺走人的节奏www</p>
<p>再然后，就要坚持自己的属性了。是软软呼呼的呆萌还是傲娇女王的反差萌，嘴欠大咧的贱萌还是电波自大的中二萌，然后尽情的各种Play吧~</p>
<h3>萌点是用语句堆砌出来的</h3>
<p>在网络交流中，表达情感的载体变成了一行行文字和一张张图片。正确的卖萌姿势，就是要调教好IM和SNS中的信息流呐。从上面的两个方面，稍微总结下应该注意的地方吧：</p>
<h4>称呼和人称代词</h4>
<ol>
<li>为了方便交流，一个昵称是必不可少的。不过呢，太俗的让人觉得土气而且重复率高，太复杂的又难打也难认，还有各种娇爹爹的叠词让人不忍直视XD 总而言之，符合自己个性的、好听的、好认的、好记的，就是好的称呼了啦。</li>
<li>自称中「我」当然是通用的啦，不过适当用些「人家」这样的称呼，或者也可以根据实际情况用诸如「吾」「咱」，可以大幅度提升萌度喔。当然每个自称都有其表达的个性在内，如果用的过分或者不恰当就是形象崩坏的状况了……</li>
<li>至于对于对方的称呼，原则很简单：「讨好对方」就可以了。这个就需要了解对方的性格啦，可以从以下几类着手：卖萌性人称代词「亲」「汝」「民那」「诸位」；关系性称呼「达令」「欧尼酱」；形容词性称呼「笨蛋」「BAKA」；称呼昵称或戏称……</li>
</ol>
<p>补充点真实的故事w</p>
<ol>
<li>自己的称呼钉子，是取好ID后看到前面 Dim 的发音立刻想到的，自面市后客户反响良好，没有看到ID后想不起的哟。</li>
<li>在 QQ 上认识两位称呼是小狼的朋友，今天手抖把两个人拉进了同一个群，然后就没有然后了 ……</li>
<li>还有位称呼叫淼淼的朋友，第一次见的时候动用了某度输入法的触摸提示生僻字拼音才知道怎么读（别笑人家没文化啦 打滚 QAQ</li>
<li>某钉子在写文章尤其长篇大论的时候都不太喜欢用第一人称，总有种在说教的感觉 …… 因此喜欢用「某人」「某钉子」「钉子」这样的第三人称或者干脆回避。当然还是有程度的问题，身边有朋友因为完全用第三人称指代自己被指责中二了喔。</li>
</ol>
<h4>语气助词，颜文字和表情</h4>
<ol>
<li>说到这个，就不禁要想起这个回答： <a href="http://zhihu.com/question/20779802/answer/16410932">什么是「日本腔」的中文？</a> 作为萌的发源国，每次看到 2CH 的吐槽都不禁要惊叹11区的卖萌能力呢……</li>
<li>除去并无直接技巧的句式来说，语气助词是非常提高好感度的一项的说。「呐」「呢」「嘛」这些词正确的使用，可以让语句变得轻松和温柔许多。（不过某人不自觉的就会用很多耶，然后只能边读边删以免看起来太奇怪 QAQ</li>
<li>「喵」「的说」都是流传度极广的语尾喵，在合适的情景下是十分萌的喵，如果像一卡牧师妹（乌贼娘）的「个说」那样坚持使用一个语尾还可以达到塑造个人标志的目的喵，当然是要考虑这个语尾在各种问句叹句之类的适用性喵。正常情况下并不需要每句话都加上语尾喵，不然就会像这段话一样怪怪的喵XD</li>
<li>当 :) 被第一次发明后，人们终于可以快速的在文字中描述感情，而且治好了多年的颈椎病；直到天才的11区少年发明了种类繁多的颜文字，大家终于不需要再把脑袋过来了。不过尽管如此，老美系的符号表情可以在更多更正式的场合使用，也是保险的做法喔。</li>
<li>使用可以键盘录入的简单的颜文字，更加方便也可以确保不会有因为特殊符号导致的显示问题 =w= 而且，这样子的颜文字大概也不缺乏表意生动形象的呢 O.O</li>
<li>( っ*’ω’*c) 复杂的颜文字尽管会带来很多麻烦，但是绝对是萌度最高的 (σ≧∀≦)σ 至于具体怎么管理颜文字这里就不详述了，如果感兴趣就动手去寻找合适的网站或软件吧 (つдC)</li>
<li>图片表情是QQ群泛滥成灾的东西呢。虽然可以很好的表达意思，甚至用长 GIF 图表达一个故事，但是切忌滥用。至于自带表情，萌度不够还容易显得土鳖喔……</li>
<li>可以长期搜集优秀的表情，认真控制其清晰度、质量和实用性。在聊天中，不知道诸位有没有像某人一样讨厌突然蹦出来的又大又模糊的表情…… 况且毫无意义的表情只是水，而恰当的跟在对话后的小表情可是效果拔群的。同样，在使用图片表情时请照顾手机端的感受哟。</li>
</ol>
<h4>头像和签名</h4>
<ol>
<li>没错，这也是卖萌的一个环节的说。如果长相萌还好说，如果把对不起观众的相片挂上去就没人能萌的起来了XD 选择可爱的，治愈的，动漫的头像，都能博取好感度，至于各种乡非技术 ……</li>
<li>签名，心情，签名档，作为个人标志之一也是一样的道理w 糟糕的格式，无聊的内容，全部都是扣分项呢。至于鸡汤和名人名言就免了，在里面吐槽一下心情和生活，或者各种小剧场，都还是不错的呐。</li>
</ol>
<h4><b>Neta</b> 梗和恰当的幽默感</h4>
<ol>
<li>恰当使用一些时梗，都是使人会心一笑，活跃气氛不错的工具。而成年的老梗，再提出来也只会被人觉得过时和无聊咯。</li>
<li>使用作品中的 Neta 也可以给自己赋予原角色的属性，达到塑造形象的目的嗯。如果从一开始就有把自己代入某个角色的意愿（就像COS一样，可能某些人无法理解吧），常常使用原作的 Neta 更是必备的呢。（吸血鬼铁拳！不懂得萌点所在的人类都吃掉吧哎 =A=</li>
<li>更多培养幽默感和吐槽技巧的话题这里同样不赘述了，不过既然是卖萌撒欢，一杆中的的吐槽功力，或S或M的调戏/被调戏能力，是同样必不可少的说。</li>
</ol>
<h3>萌由心生，始终如一</h3>
<p>坚持自己的属性也是很有必要的，就算费力的演出，在气急败坏的情况下也很容易展露原本的性格，那可是糟糕的崩坏呢。所以说如果本身性格就不萌，拙劣的演技是很容易被拆穿的。毕竟大家是因为开心而聚在一起嘛，没必要做吃力不讨好的事喔……</p>
<p>关于男女问题倒是觉得相对简单呢，因为狭义上的「萌」本身就不应该是个男生应该具有的属性吧…… 只是在愈加开放的网络上性别也变得模糊，不过如果不是真的有自己一番考量，不诚实的公开性别实在不是一个好的举措，钉子也亲眼见过由此引发的悲剧呐。</p>
<p>以上大致已经回答了题目的问题了呢，谢谢大家的支持，还会更新一些关于如何卖萌的内容，也请大家期待喔 &gt; &lt;</p>
<h3>另请参阅：</h3>
<ul>
<li>萌和卖萌的定义：<a href="http://zh.moegirl.org/%E8%90%8C" target="_blank">萌 – 萌娘百科<i></i></a><a href="http://zh.moegirl.org/%E5%8D%96%E8%90%8C" target="_blank">卖萌 – 萌娘百科</a></li>
<li>关于如何卖萌的操作篇：<a href="http://www.zhihu.com/question/19853028">如何卖萌？</a></li>
<li>关于为什么会有人将自己代入喜欢的异性角色：<a href="http://www.zhihu.com/question/21886495">为什么很多男人会用动漫萌妹子做头像？</a></li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/saimoe-pro/">如何专业自然不做作地卖萌？</a></p>]]></content>
        
        <summary type="html">
            
            此回答由某钉子原答于知乎：如何专业自然不做作地卖萌？ 被知乎官方微博推荐于：知乎的微博 嘛，作为某只卖萌苦手，自然也为如何卖萌苦恼过，也羡慕过十分受大家喜爱的前辈，也不爽过一些矫揉造作的人XD 既然这样，在此就斗胆总结一下自己的思路，希望大家不吝指正的说。 卖萌の功效 卖萌是网
            
        </summary>
        
        <category term="次元爱"/>
        
        <category term="ACG"/>
        
        <category term="二次元"/>
        
        <category term="卖萌"/>
        
        <category term="知乎"/>
        
        <category term="社交"/>
        
        <category term="萌"/>
        
        <category term="问答"/>
        
    </entry>
    
    <entry>
        <title>First Blood! 人生第一桶金 Get</title>
        <link href="http://blog.dimpurr.com/first-blood/"/>
        <id>http://blog.dimpurr.com/first-blood/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-10-27T02:33:47+08:00</published>
        <updated>2013-10-27T02:33:47+08:00</updated>
        
        <content type="html"><![CDATA[<p>钉子最近各种销声匿迹，许多文章也拖着迟迟没有码完，至于这单儿，已经是两周以前的事儿了。时间久远略微有点记忆模糊，不过为了纪念，还是在此回忆一下国庆那时的一血达成之路吧。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/10/20131006204843.png"><img src="http://img1.dimpurr.com/dimblog/2013/10/20131006204843-600x60.png" /></a><p>Alipay</p></div>
<p><a href="http://qzworld.net/">@Losses Don</a> 螺丝菊苣找到钉子时，还从未做过 Discuz! 模板更别说商业模板的某人还不太敢接。任务很简单，不需要再从头做设计，按照一个现成的 Typecho 模板风格套用上去即可。口上说着不一定做， <span>身体还是挺老实的嘛</span> 不过钉子还是马上查起了相关的教程。</p>
<blockquote><p>「唉 就是个想做站刚入行不知道水多深的家伙 我也就是帮忙忙活一下 ._. 工作量不大 不过很闹心 你做做就知道了= =」</p>
<p>——螺丝菊苣如是说</p>
</blockquote>
<p>在那之前钉子只有做过一次 WordPress 的主题，充分享受了其完善的官方文档和开发资源的福利，自然不会料到接下来的艰辛。混乱过时的各种教程，语焉不详的模板文档，首先就来了一个下马威。在无奈放弃了寻找教程之后，某人对着默认模版敲起了代码。还没开始多久，调用LOGO这一关就被间歇性失灵的新老版本两个模版目录调用语句卡住了。钉子终于开始体会到了闹心这个词的含义。</p>
<p><span></span></p>
<p>稍微熟悉了模板系统后，螺丝指挥钉子开始了大面积的K元素：顶栏K掉，快捷启动K掉，个人信息K掉，积分K掉……能从源码K的就Delete，不能K的就干脆 Display:None ，就这样又糊弄过去了大量模块，那叫一个爽。</p>
<p>慢慢扣细节的时候 Discuz! 令人无语的问题逐渐暴露出来：君不见模板中PHP逻辑直接写，标签里 style=”” 随处填，样式表 !Important 满地是，脚本內选择器巨脑残……面对如此状况某人也放弃了节操，活学活用刚看来的 CSS 权重公式，开始了 !Important 层级的斗争。</p>
<p>码完侧栏效果还算可以接受，正准备完稿的钉子这才发现设置页面的宽度漂亮的悲剧了。 Discuz! 很无辜的表示论坛和设置页的容器是同样的 Class ，最后奋战了半天才终于成功通过 . 同属选择器和 &gt; 直接继承选择器分别设置了带有侧边栏的论坛Div和满宽度的设置Div。</p>
<p>当然作为钉子一贯的尿性懒得切图所以大量使用了CSS3做特效，螺丝直接让某人 If IE 把 IE9 以下给淦了，随手拿了卜卜口菊苣的升级 Chrome 页面做跳转。最后历时两天共计十个小时左右，某人兴致勃勃的拿着一个从头到尾各种Hack糊弄的模板交工去了……</p>
<blockquote><p>「你好 您觉得论坛还有什么需要修改的地方么 之后他就知道怎么回事了」</p>
<p>——螺丝菊苣的催款秘技</p>
</blockquote>
<p>耐心的等待了一天后，支付宝的收款记录依然一如既往的沉默。爱钱心切的某人早已按耐不住，不过各种旁侧敲击之后呆萌的客户好像完全没有理解其中深意，只是不断重复着大致意义「我很忙不好意思钱不会少的」的客套话。终于在三三利用淘宝商户帐号友情支援下帮助支付宝都不会用的所谓客户完成了付款后，某钉子长吁了一口气，然后高高兴兴的日西去了……</p>
<p>最后来贴点图：</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/10/20131020223302.png"><img src="http://img1.dimpurr.com/dimblog/2013/10/20131020223302-600x291.png" /></a><p>SAMPLE Index</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/10/20131020223836.png"><img src="http://img1.dimpurr.com/dimblog/2013/10/20131020223836-600x536.png" /></a><p>SAMPLE Topic</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/first-blood/">First Blood! 人生第一桶金 Get</a></p>]]></content>
        
        <summary type="html">
            
            钉子最近各种销声匿迹，许多文章也拖着迟迟没有码完，至于这单儿，已经是两周以前的事儿了。时间久远略微有点记忆模糊，不过为了纪念，还是在此回忆一下国庆那时的一血达成之路吧。 Alipay @Losses Don 螺丝菊苣找到钉子时，还从未做过 Discuz! 模板更别说商业模板的某
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Discuz"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="商业"/>
        
        <category term="模板"/>
        
        <category term="腾讯"/>
        
        <category term="论坛"/>
        
    </entry>
    
    <entry>
        <title>你所不知的 CSS ::before 和 ::after 伪元素用法</title>
        <link href="http://blog.dimpurr.com/css-before-after/"/>
        <id>http://blog.dimpurr.com/css-before-after/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-10-18T20:14:27+08:00</published>
        <updated>2013-10-18T20:14:27+08:00</updated>
        
        <content type="html"><![CDATA[<p>CSS 有两个说不上常用的伪类 :before 和 :after，偶尔会被人用来添加些自定义格式什么的，但是它们的功用不仅于此。前几天发现了 <a href="http://tympanus.net/Development/CreativeLinkEffects/" target="_blank">Creative Link Effects</a> 这个非常有意思的介绍创意链接特效的页面，里面惊人的效果大量使用到的特性除了 transform 属性进行变形之外，就是接下来要介绍的这两个伪元素了。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/10/6c8c93717f50f6fadccb91d09f4b981e1.gif"><img src="http://img1.dimpurr.com/dimblog/2013/10/6c8c93717f50f6fadccb91d09f4b981e1.gif" /></a><p>Creative Button Styles</p></div>
<h3>一 基本语法</h3>
<p>在了解进阶的应用之前，先来了解一下语法规则。平常仅仅需要将这两个伪元素用于添加一些自定义字符时，只需使用伪类使用的单冒号写法，以保证浏览器的兼容性：</p>
<p><span></span></p>
<pre>p:before  {}</pre>
<p>不过，在 CSS3 中为了区别伪元素和伪类为伪元素使用了双冒号，因此如果使用了 display 或者 width 等属性时使得显示脱离了原本元素后，<span>建议</span><span>按照标准双写。过于老的浏览器可能会存在支持问题，不过伪元素大多是配合 CSS3 使用，就无所谓向下兼容了：</span></p>
<pre>img::after {}</pre>
<p>这两个伪类下特有的属性 content ，用于在 CSS 渲染中向元素逻辑上的头部或尾部添加内容。注意这些添加不会改变文档内容，不会出现在 DOM 中，不可复制，仅仅是在 CSS 渲染层加入。比较有用的是以下几个值：</p>
<ul>
<li><strong>[String]</strong> – 使用引号包括一段字符串，将会向元素内容中添加字符串。示例：
<pre>a:after { content: &quot;↗&quot;; }</pre>
</li>
<li><strong>attr()</strong> – 调用当前元素的属性，可以方便的比如将图片的 Alt 提示文字或者链接的 Href 地址显示出来。示例：
<pre>a:after { content:&quot;(&quot; attr(href) &quot;)&quot;; }</pre>
</li>
<li><strong>url() / <strong>uri()</strong></strong> – 用于引用媒体文件。示例：
<pre>h1::before { content: url(logo.png); }</pre>
</li>
<li><strong>counter()</strong> –  调用计数器，可以不使用列表元素实现序号功能。具体请参见 counter-increment 和 counter-reset 属性的用法。示例：
<pre>h2:before { counter-increment: chapter; content: &quot;Chapter &quot; counter(chapter) &quot;. &quot; }</pre>
</li>
</ul>
<h3>二 进阶技巧</h3>
<p>清除浮动是一个时常会遇到的问题，不少人的解决办法是添加一个空的 div 应用 clear:both; 属性。现在，无需增加没有意义的元素，仅需要以下样式即可在元素尾部自动清除浮动：</p>
<pre>.clear-fix { *overflow: hidden; *zoom: 1; }
.clear-fix:after { display: table; content: &quot;&quot;; width: 0; clear: both; }</pre>
<p>许多人喜欢给 blockquote 引用段添加巨大的引号作为背景，这种时候我们就可以用 :before 来代替 background 了，即可以给背景留下空间，还可以直接使用文字而非图片：</p>
<pre>blockquote::before {
	content: open-quote;
	position: absolute;
	z-index: -1;
	color: #DDD;
	font-size: 120px;
	font-family: serif;
	font-weight: bolder;
}</pre>
<h3>三 特效妙用</h3>
<p>除了简单的添加字符，配合 CSS 强大的定位和特效特性，完全可以达到给简单的元素另外附加最多两个容器的效果。有一点需要注意的是，如果不需要内容仅配合样式属性做出效果，内容属性也不能为空，即 content:”” 。否则，其他的样式属性一概不会生效。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/10/6cc221614774e78add77d4e7a1171f591.gif"><img src="http://img1.dimpurr.com/dimblog/2013/10/6cc221614774e78add77d4e7a1171f591.gif" /></a><p>悬浮出现方括号</p></div>
<p>鼠标移上链接，出现方括号：</p>
<pre>a {
	position: relative;
	display: inline-block;
	outline: none;
	text-decoration: none;
	color: #000;
	font-size: 32px;
	padding: 5px 10px;
}

a:hover::before, a:hover::after { position: absolute; }
a:hover::before { content: &quot;\5B&quot;; left: -20px; }
a:hover::after { content: &quot;\5D&quot;; right:  -20px; }</pre>
<p>同样，我们只需要配合 display: block 和 position: absolute ，就可以将其当成两个容器，拼合成悬浮出现双边框的特效：</p>
<pre>a {
	position: relative;
	display: inline-block;
	outline: none;
	text-decoration: none;
	color: #000;
	font-size: 32px;
	padding: 0 10px;
}

/* 大框 */
a:hover::before, a:hover::after { 
	content: &quot;&quot;;
	display: block;
	position: absolute;
	top: -15%%;
	left: -14%%;
	width: 120%;
	height: 120%;
	border-style: solid;
	border-width: 4px;
	border-color: #DDD;
 }

/* 小框 */
 a:hover::after {
 	top: 0%;
 	left: 0%;
	width: 100%;
	height: 100%;
	border-width: 2px;
 }</pre>
<p>用 :before 和 :after 伪类结合更多 CSS3 强大的特性，还可以完成非常多有意思的特效和 Hack ，这里权当抛砖引玉，诸位又能想出什么妙用呢？</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/css-before-after/">你所不知的 CSS ::before 和 ::after 伪元素用法</a></p>]]></content>
        
        <summary type="html">
            
            CSS 有两个说不上常用的伪类 :before 和 :after，偶尔会被人用来添加些自定义格式什么的，但是它们的功用不仅于此。前几天发现了 Creative Link Effects 这个非常有意思的介绍创意链接特效的页面，里面惊人的效果大量使用到的特性除了 transfor
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS"/>
        
        <category term="HTML"/>
        
        <category term="HTML5"/>
        
        <category term="代码"/>
        
        <category term="前端"/>
        
        <category term="网络"/>
        
    </entry>
    
    <entry>
        <title>袭来！强台风天兔</title>
        <link href="http://blog.dimpurr.com/typhoon-usagi/"/>
        <id>http://blog.dimpurr.com/typhoon-usagi/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-09-30T23:23:02+08:00</published>
        <updated>2013-09-30T23:23:02+08:00</updated>
        
        <content type="html"><![CDATA[<p>本来是假期的最后一晚，中秋节的最后一日；本来该内宿匆忙生回校，外宿生狂补作业；但是，随着一条震撼性的消息传来，顿时喜大普奔，举校欢腾——</p>
<blockquote><p>因强台风天兔即将登陆，惠州市全市中小学统一停课两天，请各校领导老师做好协调工作。惠州市教育局</p></blockquote>
<p>正所谓，不以停课为目的的台风都是耍流氓。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/tt-38586013.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/09/tt-38586013-600x424.jpg" /></a><p>Typhoon Usagi (Pixiv ID 38586013)</p></div>
<p>「台风要不要放假？」平常寂静无声的班级群，霎时间热闹起来。有说没校讯通而且内宿生都返校了不可能的，有说是校讯通故障已经问了老班没错的，有说惠高这尿性那么多次全市放假都不放何况要考试的，有说内宿生已经在遣返了说说为证的……最后老温在家长群里简短的一句「因台风影响停课两天」，最终宣布了中秋假期的延长。</p>
<p>已经没有再列出同学们听到如此喜讯后做出的如同吸食了鸦片般的疯狂举动的必要，简而言之诸如「正准备背历史，听到消息后马上跑去开电脑了」的动态顿时占满了空间。本来在苦苦复习的某钉子，当然也立刻趴到电脑前继续码主题。</p>
<p>第一天的早上，阳光明媚的天气还让人不禁感慨预报目测很是不准。只是从中午开始的淅淅沥沥的小雨，不知道什么时候又成了倾盆大雨，什么时候又响起了呼啸的风声。大概是某人无法忍受在这样的环境下写作业而关上窗户时，台风已经开始了。</p>
<p>作为一个算是沿海的城市，台风也不是没见过了。但是天兔的发展完全超乎了意料，天色未暗，已经没有任何的人和车辆敢在暴怒的雨水中穿行。雨点啪嗒啪嗒的敲打着玻璃，试图顶着风把窗户推开却从缝隙中吹进来的强风中领教到了气压差的威力。简而言之，某人从未见过的最大的台风，开始了。</p>
<p><span></span></p>
<blockquote><p>台风老大了 窗外鬼哭狼嚎的 沉闷的风声像台W12发动机 啪一声不知道谁家的花瓶给吹下去了 窗户完全推不开 刚一个闪电对面小区全黑了</p></blockquote>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/IMG_20130922_214604.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/09/IMG_20130922_214604-600x450.jpg" /></a><p>窗外景色</p></div>
<p>受惊的小钉子立刻在家里翻箱倒柜，结果最后只翻出来两个没电的手电筒。对于自己安全意识的淡漠追悔一翻感慨要是末日来了自己家绝对第一个便当后，终究还是逃过了停电。同时据说住在高层的小伙伴一直在享受摇摇乐，看来住的不高还真是值得庆幸。</p>
<p>在如此和谐的催眠曲下度过了一夜，第二天早上睁开眼真有种获得重生的感觉。来的快去的也快，还没到中午原来的狂风骤雨就已不见了踪影，只剩下路边倒伏树枝和满地的污秽证明曾经的灾害。小兔崽子给我们蹭来的两天假就这么结束了，虽然，事情还并没有就此结束。</p>
<p>骑着单车从小巷里拐出来时，某钉子顿时惊呆了。校门口对面的单车棚入口两侧生着棵棵大树，每次出入都犹如走在林荫大道之中。但是现在那个光秃秃的道路让人觉得那么陌生，只有来不及处理的折断的树干和幸存的一棵树滑稽地迎接着学生。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/IMG_20130924_172002.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/09/IMG_20130924_172002-600x450.jpg" /></a><p>疑似废墟の单车棚</p></div>
<p>祸不单行，据说因为倒下的树扯断了电线，月考的考场不幸变成了巨大的蒸笼。汗流浃背地答着试卷，期间还听到了留下传来疑似发电机的轰鸣，但是短暂的来了几分钟电后又偃旗息鼓。</p>
<p>最绝的是学校的食堂——本来还在担心没饭吃的各位，得知午餐免费后不禁喜大普奔。当然在看到了半生不熟的几根面条加一个卤蛋的号称午餐的物体后，是否仍有人觉得值得为早餐留下来的剩饭高兴就不得而知了。说起来快要一点钟的时候宿舍又传出了「食堂有饭吃啦」的消息，顿时整栋楼都空了。</p>
<p>至此天兔带来的影响终于告一段落，苦逼的学习生活还在继续。只是待我准备月考，台风再来可好？</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/tt-dDn6l4D.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/09/tt-dDn6l4D-634x1024.jpg" /></a><p>ID 38574698</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/typhoon-usagi/">袭来！强台风天兔</a></p>]]></content>
        
        <summary type="html">
            
            本来是假期的最后一晚，中秋节的最后一日；本来该内宿匆忙生回校，外宿生狂补作业；但是，随着一条震撼性的消息传来，顿时喜大普奔，举校欢腾—— 因强台风天兔即将登陆，惠州市全市中小学统一停课两天，请各校领导老师做好协调工作。惠州市教育局 正所谓，不以停课为目的的台风都是耍流氓。 Ty
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="Pixiv"/>
        
        <category term="假期"/>
        
        <category term="台风"/>
        
        <category term="天兔"/>
        
        <category term="学校"/>
        
        <category term="惠高"/>
        
    </entry>
    
    <entry>
        <title>使用 position: sticky 达到粘性元素区域悬浮效果</title>
        <link href="http://blog.dimpurr.com/css-sticky/"/>
        <id>http://blog.dimpurr.com/css-sticky/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-09-27T18:54:36+08:00</published>
        <updated>2013-09-27T18:54:36+08:00</updated>
        
        <content type="html"><![CDATA[<p>在一些很长的表格中，常常会使用表头悬浮的设计以方便阅读，即在表格离开窗口之前，表头会一直 fixed 悬浮在表格的最顶上。还有许多诸如评论框等元素，也采用了这种被称为 Sticky Pin 或者 粘性元素 的设计。</p>
<p>这种效果一直以来需要通过 JavaScript 实现。不过就在去年，这项结合了 Relative （在屏幕中时） 和 Fixed （移出屏幕时） 的样式效果被提案添加到了 CSS3 中。下面是一个示例：</p>
<pre>.sticky {
	position: -webkit-sticky;
	position: -moz-sticky;
	position: -ms-sticky;
	position: sticky;
	top: 15px; // 使用和 Fixed 同样的方式设定位置
}</pre>
<p>因为这个样式尚未进入标准，还必须使用私有前缀。这里介绍一下浏览器兼容更好的 JS 实现方式：</p>
<p><span></span></p>
<p>一个不错的选择是使用 <a href="http://webpop.github.io/jquery.pin/" target="_blank">jQuery Pin</a> 这个方便的 jQuery 脚本，支持简单的 Pin 元素、在容器范围内 Pin （例如 Table 内 Pin 住 Th）、在一定尺寸下禁用的功能。</p>
<p>如果要使用原生 JS 实现，可以参照下面的代码：</p>
<pre>&lt;style&gt;
.sticky {
	position: fixed;
	top: 0;
}
.header {
	width: 100%;
	background: #F6D565;
	padding: 25px 0;
}
&lt;/style&gt;

&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;

&lt;script&gt;
var header = document.querySelector('.header');
var origOffsetY = header.offsetTop;
function onScroll(e) {
	window.scrollY &gt;= origOffsetY ? header.classList.add('sticky') :
					header.classList.remove('sticky');
}
document.addEventListener('scroll', onScroll);
&lt;/script&gt;</pre>
<p><a href="http://jsbin.com/omanut/2" target="_blank">预览→</a></p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/css-sticky/">使用 position: sticky 达到粘性元素区域悬浮效果</a></p>]]></content>
        
        <summary type="html">
            
            在一些很长的表格中，常常会使用表头悬浮的设计以方便阅读，即在表格离开窗口之前，表头会一直 fixed 悬浮在表格的最顶上。还有许多诸如评论框等元素，也采用了这种被称为 Sticky Pin 或者 粘性元素 的设计。 这种效果一直以来需要通过 JavaScript 实现。不过就在
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS"/>
        
        <category term="HTML"/>
        
        <category term="HTML5"/>
        
        <category term="代码"/>
        
        <category term="前端"/>
        
        <category term="网络"/>
        
    </entry>
    
    <entry>
        <title>某釘子のWP主題 第一季</title>
        <link href="http://blog.dimpurr.com/clrs-theme/"/>
        <id>http://blog.dimpurr.com/clrs-theme/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-09-18T21:29:45+08:00</published>
        <updated>2013-09-18T21:29:45+08:00</updated>
        
        <content type="html"><![CDATA[<p>记得在开学前夕，某钉子曾无奈地望着手上的各种大坑，对着日益临近的初三昼夜叹息。于是就在那时想起了一直想给博客写个主题，于是……这里就是一篇关于某钉子的第一个 WordPress 试水作的回顾。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/20130918201229.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/20130918201229-600x214.png" /></a><p>Clearison Theme</p></div>
<p>草率的基调大概是一开始就定好的。在只剩下寥寥数天暑假而且作业没写完（活该）的情况下，主题的大致样式在英语课间的十分钟内迅速定下。刚回到家，在本地PHP环境中安上 WordPress ，然后直接在 wp-content 目录开始了代码。</p>
<p>在此之前还稍微回顾了一下自己过往作品的所谓设计风格，直到端详自己个人页的时候看到那个「交互/前端」……交互前端你妹啊！某人顿时掀桌。没错，直到今天才发现，作为自己选择的两个方向，正常开发过程中还要经过的一步视觉，某人完全没有研究……虽说当年还是以平面设计起家的，但是最后一次开PS貌似只是为了P一张同学的恶搞图片，难怪自己的页面都是所谓「简洁平面化」风格。眼前的道路霎时迷茫起来……</p>
<p>咳咳跑题了。说起来当年好不容易觉得能手写出个页面来时就已经有意要做，曾经下载的 WordPress 主题教程仍静静的呆在硬盘里，当然因为那时菜鸟级的技术没看多少就只能放弃。只是重新翻出来时发现里面引用的大量资源已经失效，于是最后还是在官方模版和官方文档之间各种参考完成的模版。</p>
<p><span></span></p>
<p>代码自然使用了某人一贯的 HTML5 + CSS3 ，不过很幸运在 IE6 上并不会导致大的错位，只是样式相对难看不少。在此再次向 CSS3 致以崇高的敬意，让某渣渣得以接近没有使用 js ，完全不需要做视觉……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/IE6.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/09/IE6-600x450.jpg" /></a><p>Clearison with IE6</p></div>
<p>从 AZone 遗留下来的没救的CSS风格被评论说「这应该是代码压缩器的风格」……可是总感觉这样写比规范模式还方便阅读怎么破。况且因为抱着自用模版的想法各种代码都预先写死，还有不少 CSS Hack 是完全忽视可移植性的直接测量像素。就是在这种心不在焉极其遗憾的心态还有螺丝菊苣的不断吐槽下，某钉子把代码完成了。</p>
<p>成功的把主题挂到博客上第二天，初三也开始了。意识到自己还能够勉强摸到电脑之后，某钉子又诞生了要将这个主题发布出去的想法。于是又在数个晚上给主题完善了移动版响应式、后台设置和语言包支持等等之后，以「熟悉使用方法」这样的理由挂在 Github 的项目 Release 了 v1.0 版本。</p>
<p>其中要吐槽的几点，某人在用安卓原生浏览器测试响应式网页时发现网页宽度固定在 max-width 而不能自适应。经过一番查找，被现代浏览器惯坏的某人终于知道了 viewport 这个 meta 的作用……另外后台也因为赶进度无心调试后端，使用方法各种不人性化。在最后某人还试图要提交到 WordPress 的官方主题库，最后看到各种复杂的审核直接放弃……</p>
<p>最后回头看看，大概是因为各种草率和赶进度，实在不甚让人满意。特别是评论框让人觉得略有败笔，其幕后是某钉子对于调试自适应的回避……不过无论如何，这个主题的诞生，宣告了初三的开始，也宣告了某人终于有了可以拿的出台面的勉强算是作品的东西。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/clrs-theme/">某釘子のWP主題 第一季</a></p>]]></content>
        
        <summary type="html">
            
            记得在开学前夕，某钉子曾无奈地望着手上的各种大坑，对着日益临近的初三昼夜叹息。于是就在那时想起了一直想给博客写个主题，于是……这里就是一篇关于某钉子的第一个 WordPress 试水作的回顾。 Clearison Theme 草率的基调大概是一开始就定好的。在只剩下寥寥数天暑假
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Clearision"/>
        
        <category term="CSS3"/>
        
        <category term="HTML5"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
    </entry>
    
    <entry>
        <title>Clearision V2.7 – 简洁清新自适应单栏 WordPress 主题</title>
        <link href="http://blog.dimpurr.com/clearision/"/>
        <id>http://blog.dimpurr.com/clearision/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-09-18T21:00:50+08:00</published>
        <updated>2013-09-18T21:00:50+08:00</updated>
        
        <content type="html"><![CDATA[<p>这是一个 HTML5 的 WordPress 自适应单栏灰色素雅/透明清新双风格主题，风格简洁清新阅读体验良好，适合注重文字的个人博客。附带移动版响应式页面，支持中英文。感谢  <a href="http://qzworld.net/">@Losses Don</a> 螺丝关于阅读体验的建议。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/20131128154938.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/20131128154938-600x337.png" /></a><p>Clearision V2 灰色素雅风格</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/screenshot2.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/screenshot2-600x379.png" /></a><p>Clearision V2.5 透明清新风格</p></div>
<p>V2.7 主要更新内容：</p>
<ul>
<li>新增引语和状态文章格式支持</li>
<li>新增香港、台湾繁体语言包</li>
<li>修正样式和更新上的已知问题</li>
</ul>
<p>欢迎在此页提出相关问题和建议！</p>
<p><span></span></p>
<h3>功能特点</h3>
<ul>
<li>自适应宽屏和响应式移动版</li>
<li>透明清新风格和自定义背景</li>
<li>LOGO 和友情链接</li>
<li>社交链接图标，快捷入口和伸缩搜索栏</li>
<li>增强的可选访客 UA 展示</li>
<li>部分功能的后台开关</li>
<li>萌/中/英语言支持</li>
<li>HTML5 语义标签和 CSS3 特效，兼容到 IE8 及以上</li>
</ul>
<h3>主题演示</h3>
<ul>
<li><a href="http://work.dimpurr.com/demo/wp/clearision/" target="_blank">灰色素雅</a></li>
<li><a href="http://work.dimpurr.com/demo/wp/clearision/?opacity=1" target="_blank">透明清新</a></li>
</ul>
<h3>获取主题</h3>
<ul>
<li><a href="http://pan.baidu.com/s/1b6XWi" target="_blank">百度网盘</a> (V2.5 正式版)</li>
<li><a href="https://github.com/dimpurr/Clearision/releases/tag/v2.5" target="_blank">Github</a> (V2.5 正式版)</li>
<li><a href="http://work.dimpurr.com/theme/clearision/update/clearision.zip" target="_blank">测试版更新源</a> (随时更新最新测试版本，可能不稳定)</li>
</ul>
<h3>使用说明</h3>
<ul>
<li>直接在后台主题安装上传 Zip 文件即可使用，也可以手动解压至 wp-content/theme 目录</li>
<li>中文语言包使用了普通的语言风格，如果想使用类似本博客的吐槽风格，请删除或重命名主题目录下的 lang/zh_CN.mo</li>
<li>&lt;pre&gt; 为多行代码， &lt;code&gt; 为行内代码</li>
<li>正式版功能更加稳定，希望使用最新版可以下载正式版后在后台更新到最新测试版或者从测试版更新源下载</li>
<li>文章点击数会在安装 wp-postview 插件后自动显示</li>
<li>如果自动更新中包括了中文语言包的更新可能导致语言包被恢复</li>
<li>若有任何问题或希望什么新特性请在此页面回复，会尽力帮忙</li>
<li>推荐使用 WordPress 子主题进行修改，这样还可以继续享受更新，详细可搜索相关教程</li>
<li>未内置 SEO 等与主题无关功能，请善用插件，谢谢。没有预留广告位 …… 谢谢。</li>
<li>READ MORE 是 WordPress 内置功能，可在编辑器上方插入</li>
<li>无法开启透明清新风格可尝试将 header.php 第 10 行的 <code>&lt;?=get_template_directory_uri(); ?&gt;</code> 改为 <code>&lt;?php echo get_template_directory_uri(); ?&gt;</code></li>
<li>可自行加入透明清新版多说评论主题 <a href="https://github.com/dimpurr/ClearisionX/blob/master/duoshuo.style.css" target="_blank">https://github.com/dimpurr/ClearisionX/blob/master/duoshuo.style.css</a></li>
</ul>
<h3>更新历史</h3>
<ul>
<li>V0.1 自用版本</li>
<li>V0.2 移动端响应式和自适应</li>
<li>V0.3 后台设置完成</li>
<li>V0.4 友情链接和修复</li>
<li>V0.5 语言包支持和英化</li>
<li>V1.0 正式版发布</li>
<li>V1.1 评论表单增强</li>
<li>V1.2 内置访客UA显示</li>
<li>V1.3 移动端、文章和图片优化</li>
<li>V1.4 功能修复和代码完善</li>
<li>V1.5 自动检测更新</li>
<li>V1.6 评论增强和尾部修复</li>
<li>V1.7 控制台修复和文章标签区修改</li>
<li>V1.8 增加社交图标和后台按钮</li>
<li>V1.9 社交图标自适应</li>
<li>V1.10 文章作者显示</li>
<li>V1.11 RSS 检测支持</li>
<li>V1.12 文章输出分离</li>
<li>V1.13 小工具样式适配完成</li>
<li>V1.14 代码点击可编辑</li>
<li>V1.15 后台状态判断和增强</li>
<li>V2.0 截图和语言更新</li>
<li>V2.1 UA插件更新</li>
<li>V2.2 TrackBack 支持和修复</li>
<li>V2.3 代码块、选中等细节样式更新</li>
<li>V2.4 留言板页面模版</li>
<li>V2.5 全新透明清新样式</li>
<li>V2.6 引语、状态文章格式支持和繁体语言包</li>
<li>V2.7 响应式、版本检查修正和部分更新</li>
</ul>
<h3>截图预览</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/20131128154938.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/20131128154938-600x337.png" /></a><p>Clearision 首屏</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/20131128154858.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/20131128154858-600x337.png" /></a><p>Clearision 底部 友情链接 小工具</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/20131128155239.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/20131128155239-600x337.png" /></a><p>Clearision 评论 UA 操作 回复表单 （管理员/访客效果叠加）</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/Screenshot_2013-11-28-15-54-21.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/Screenshot_2013-11-28-15-54-21.png" /></a><p>Clearision 响应式移动版</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/clearision/">Clearision V2.7 – 简洁清新自适应单栏 WordPress 主题</a></p>]]></content>
        
        <summary type="html">
            
            这是一个 HTML5 的 WordPress 自适应单栏灰色素雅/透明清新双风格主题，风格简洁清新阅读体验良好，适合注重文字的个人博客。附带移动版响应式页面，支持中英文。感谢  @Losses Don 螺丝关于阅读体验的建议。 Clearision V2 灰色素雅风格 Clea
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Clearision"/>
        
        <category term="WordPress"/>
        
        <category term="主题"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
    </entry>
    
    <entry>
        <title>Ubuntu (Linux) 下安装 Minecraft 我的世界</title>
        <link href="http://blog.dimpurr.com/linux-minecraft/"/>
        <id>http://blog.dimpurr.com/linux-minecraft/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-09-01T21:13:45+08:00</published>
        <updated>2013-09-01T21:13:45+08:00</updated>
        
        <content type="html"><![CDATA[<p>要在 Linux 下安装 Minecraft 其实挺简单的，就是 Java 和 LWJGL 的配置略微麻烦。先上一张效果图……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/2013-09-01-12-16-17.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/2013-09-01-12-16-17-600x337.png" /></a><p>Minecraft in Elementary OS</p></div>
<h3> 一 配置环境</h3>
<p>Minecraft 需要显卡驱动对 OpenGL 的支持还有 Java 环境的支持。</p>
<p>如果已经有了 Java 环境可以跳过这一段。Ubuntu 本身也内置了 Open-Java 环境，无需安装。</p>
<p>假如没有预装，可以从包管理器安装：</p>
<p><span></span></p>
<pre>sudo apt-get install openjdk-6-jdk</pre>
<p>一般来说 Open-Java 就可以应付平常的需求，是其他发行版或者要支持开发环境的话也可以安装 Sun-Java 。</p>
<h4>1.1 Ubuntu 源</h4>
<p>Ubuntu 下可以用 Partner 源方便的安装：</p>
<pre>sudo add-apt-repository &quot;deb http://archive.canonical.com/ubuntu maverick partner&quot; # 添加源
sudo apt-get update # 更新列表
sudo apt-get install sun-java6-jre sun-java6-plugin # 安装JRE
sudo apt-get install sun-java6-jdk sun-java6-plugin # 安装JDK</pre>
<h4>1.2 RPM包和手动安装</h4>
<p>如果不是 Ubuntu ，那么可以去官方网址下载：</p>
<p>Java <a href="http://www.java.com/zh_CN/">http://www.java.com/zh_CN/</a></p>
<p>JDK <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<p>如果是 RPM 系发行版下载各自 .rpm 文件安装即可，否则下载 .tar 文件，然后 CD 进两个文件所在的下载目录，例如：</p>
<pre>cd ~/下载 # 进入下载目录
touch install_java.sh # 创建安装脚本</pre>
<p>用文本编辑器打开这个脚本，在里面写入：</p>
<pre>PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
sudo mkdir -p /usr/local/java
sudo rm -r /usr/local/java/*
sudo tar zxvf ./jdk*.tar.gz -C /usr/local/java
sudo tar zxvf ./jre*.tar.gz -C /usr/local/java
sudo mv /usr/local/java/jdk* /usr/local/java/jdk
sudo mv /usr/local/java/jre* /usr/local/java/jre
sudo echo -e &quot;n#javanJAVA_HOME=/usr/local/java/jdknJRE_HOME=/usr/local/java/jrenPATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$JRE_HOME/binnexport JAVA_HOMEnexport JRE_HOMEnexport PATH&quot; &gt;&gt; /etc/profile
sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/local/java/jre/bin/java&quot; 1
sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/local/java/jdk/bin/javac&quot; 1
sudo update-alternatives --install &quot;/usr/bin/javaws&quot; &quot;javaws&quot; &quot;/usr/local/java/jre/bin/javaws&quot; 1
sudo update-alternatives --set java /usr/local/java/jre/bin/java
sudo update-alternatives --set javac /usr/local/java/jdk/bin/javac
sudo update-alternatives --set javaws /usr/local/java/jre/bin/javaws</pre>
<p>保存并关闭之后，赋予运行权限并运行：</p>
<pre>chmod a+x install_java.sh # 赋予运行权限
sudo ./install_java.sh # 运行该脚本</pre>
<h4>1.3 配置 Java</h4>
<p>在安装完成后输入：</p>
<pre>java -version # 查看版本号</pre>
<p>如果显示出了 Java 版本号那就已经安装成功。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/09/2013-09-01-17-40-49.png"><img src="http://img1.dimpurr.com/dimblog/2013/09/2013-09-01-17-40-49-600x425.png" /></a><p>安装成功，检查版本号</p></div>
<pre>sudo update-alternatives --config java # 设置默认 Java</pre>
<p>选择将 sun-java6 为默认 Java 即可。</p>
<h3>二 安装游戏</h3>
<p>配置好 Java 环境后就可以去找游戏和启动器了。</p>
<h4>2.1 懒人包</h4>
<p>如果不想折腾，可以使用 <a href="http://hackyixia.duapp.com/" target="_blank">TNT</a> 同学打包好的 1.5.1 懒人包，其中包括：</p>
<p>下载：<a href="http://pan.baidu.com/share/link?shareid=471256&amp;uk=2855000475">http://pan.baidu.com/share/link?shareid=471256&amp;uk=2855000475</a></p>
<p>原文：<a href="http://hackyixia.blog.163.com/blog/static/21241519620134259234230/">http://hackyixia.blog.163.com/blog/static/21241519620134259234230/</a></p>
<p>运行其中的 install_minecraft.sh 脚本即可完成安装，然后就可以直接开始玩了，无需再参见下文。更多详情和配置参见原文。</p>
<h4>2.2 下载游戏和启动器</h4>
<p>正版在 Minecraft 官网下载游戏和启动器并按说明配置即可开始玩。不过 Win 下的盗版启动器一般不支持 Linux ，所以需要 Linux 版本或者是 Jar 版本的启动器。这里以 Linux 下常用的盗版启动器 MinecraftSP 为例，首先下载 MinecraftSP.jar ：</p>
<p>原版： <a href="http://pan.baidu.com/share/link?shareid=4180057767&amp;uk=1828826502">http://pan.baidu.com/share/link?shareid=4180057767&amp;uk=1828826502</a></p>
<p>汉化： <a href="http://www.mcbbs.net/thread-45417-1-1.html">http://www.mcbbs.net/thread-45417-1-1.html</a></p>
<p>使用以下命令可以打开启动器：</p>
<pre>java -jar home/dimpurr/MinecraftSP.jar # 将后面的路径替换为你的SP启动器路径</pre>
<p>运行后会自动下载最新版本的 .minecraft 主程序和 LWJGL 插件，但是推荐手动下载安装，否则容易出错。</p>
<p>游戏在这里不再多讲，因为都是 Jar 格式也可以通用 Windows 下的 .minecraft 文件。关于各种正版盗版游戏主程序请直接参见其他的文章，下载完成后将 .minecraft 文件夹放在用户的主目录即可。另外，因为 . 开头的文件夹在 Linux 下会默认隐藏，记得开启显示隐藏文件， Ubuntu 下可以使用快捷键 Ctrl + H 。</p>
<h4>2.3 配置 LWJGL</h4>
<p>这是一个 Minecraft 运行所需要的 Java API库。如果首次进入游戏黑屏，一般都是缺少这个库或者没有生效导致。首先去官网下载：</p>
<p>官网： <a href="http://lwjgl.org/download.php">http://lwjgl.org/download.php</a></p>
<p>解压后，在终端里 CD 进解压后的目录，并将其拷进 .minecraft 目录：</p>
<pre>cd /home/dimpurr/下载/lwjgl-2.9.0 # 更换为你的 LWJGL 路径
cp -f ./jar/jinput.jar ./jar/lwjgl.jar ./jar/lwjgl_util.jar ~/.minecraft/bin/ # 拷贝组件
rm ~/.minecraft/bin/natives/* # 删除旧版组件
cp -f ./native/linux/* ~/.minecraft/bin/natives/ # 拷贝组件</pre>
<p>然后就可以用前面启动启动器的命令开始游戏了。</p>
<h3>三 其他问题</h3>
<p>可以设置命令别名，方便以后在终端直接启动游戏。使用编辑器打开主目录下的 .bashrc 文件，并在文件的最后按情况加上：</p>
<pre>alias mc='java -jar home/dimpurr/MinecraftSP.jar'  # 盗版启动器，记得更换路径为你的启动器路径
alias mc='java -Xmx1024M -Xms512M -cp minecraft.jar net.minecraft.LauncherFrame' # 仅限官方启动器</pre>
<p>然后重启终端，下次就可以使用 mc 命令直接启动 Minecraft 。</p>
<p>最后吐槽一下 Notch 业界良心，离线登录的漏洞那么多年都不封，我们才不用担心没有盗版玩……</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/linux-minecraft/">Ubuntu (Linux) 下安装 Minecraft 我的世界</a></p>]]></content>
        
        <summary type="html">
            
            要在 Linux 下安装 Minecraft 其实挺简单的，就是 Java 和 LWJGL 的配置略微麻烦。先上一张效果图…… Minecraft in Elementary OS  一 配置环境 Minecraft 需要显卡驱动对 OpenGL 的支持还有 Java 环境的支
            
        </summary>
        
        <category term="次元爱"/>
        
        <category term="Linux"/>
        
        <category term="Minecraft"/>
        
        <category term="Ubuntu"/>
        
        <category term="游戏"/>
        
    </entry>
    
    <entry>
        <title>快和我签订契约，成为马猴烧酒吧</title>
        <link href="http://blog.dimpurr.com/magical-madoka/"/>
        <id>http://blog.dimpurr.com/magical-madoka/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-08-30T02:22:00+08:00</published>
        <updated>2013-08-30T02:22:00+08:00</updated>
        
        <content type="html"><![CDATA[<p>十分危险地保持着 1% 的电量，估摸着已经如此这般一个半小时了的爪机还是昂扬的挺立着(?)。电量统计缓存看来又欠调教了呢，但是为此非要进一次 Recovery 真是讨厌呢。</p>
<p>这么说起来暑假马上就要结束了，然后就可以尽情地享受在充实的青春中奋力攻略中考酱的滋味呢。再怎么不舍也不是会睡前默默祈祷其实假期还有一个月的年龄了，只是无意间戳开空间看到各种狂补作业才松了一口气的发现自己只剩下四篇作文的完成度已经算不错。</p>
<p>花了一天半补完了『魔法少女小圆』，刚看完时倒是不能说很大感触，但是没想到一旦静下来其中的画面总是挥之不去，也有了爬起来写这篇文章的契机。看来也真心不愧算是经典，何止是二周目，起码也要入手 Blue-Ray 才行啊。</p>
<p>好的那么以下就是PO主例行的残念的自说自话，还请不要戳进。</p>
<p><span></span></p>
<p>作为伪宅一只，因为名字一直以为不过是小樱、奈叶一般的正统魔法少女番一直不甚感冒。从最爱的新房昭之的履历中看到小圆脸真是吃了一惊，最后因为知乎日报上的点评果断决定补番。无论如何还是透露出了新房独特的风格，目测因为预算原因各种背景也细腻的无以复加。教室取材自监狱等各种亮点还忍不住笑了出来，就这么在和谐是的剧情和治愈(?)的OP配合下被骗了三集。然后学姐掉头，ED一换，正片开始。</p>
<p>新房口味超现实的魔女场面，不出意外霸气的战斗画面，给力的BGM和十分带感的致郁向ED都是加分点。沙耶加和杏子的便当，EP10抖出包袱后再回头看OP的歌词，还有「治愈」的结局，泪点低的某人果断泪目了。「爱的战士」老虚果然名不虚传，总的来说是一场超过预期的魔法少女版『浮士德』演绎。</p>
<p>观后感结束，回到例行的周记部分。自上一次记录之后倒没发生什么事情，或者说又有挺多事情。也有十分现充的四处旅游陪亲戚的一段时期，也有父母上班宅在家里补番飙泪的一段时期，也有在各种代码间痛并快乐着的一段时期，总之是一段与暑假这种美好的字眼相称的日常。</p>
<p>也有时会烦恼起关于博客的事情，或者说究竟是要写些什么呢？但是最后还是会想「嘛，果然还是记录下给自己看的话语，发表下给大家看的文章罢了」(废话)。稍微翻了下最早的博客，忽然有点怀念起曾经觉得不会有读者，事无巨细的记录下各种心情的时候了，每次写完总是浑身轻松。而且一旦换成日记还是其他的形式，又会完全的失去动力。毕竟某个一直管不住嘴的人总是想把所有的话一股脑倒出去，可惜也不是所有话都可以随便说的呢。</p>
<p>期待是种非常可怕的东西，至少对于某既懒惰又不负责的人来说。虽然可以恶劣的找借口搪塞过去，但是这种背叛的感觉也实在不令人喜欢。享受被人所需要和关注，但是在责任面前却喜欢临阵脱逃的某人，想想都很遗憾啊。</p>
<p>有时会觉得，人生的一切说不定只不过是运气使然吧。每个人生来灵魂都是纯洁无垢的，依靠着偶然的天分和环境慢慢成长，然后再逐渐因为成长中遇到不同的事情，环环相扣，再影响自己做出的判断。并不是说要否定改变命运之类的说法，只是一个人会不会努力难道不是因为性格使然么，而性格不就是无数的偶然塑造的么。</p>
<p>假如李白没遇到磨绣花针的老太太，他会做一辈子的浪荡公子么？或者要搬出说一旦有其他的契机李白必然也会发奋，而有些人可能就算见到也不会有感触之类的说法，那么这种 Flag 不只是个特例，而在遇到这个 Flag 时会不会 Happy End 不正是由之前各种 Flag 种下的人格决定的么。诶？你说铁杵磨成针的故事是伪造的？这种不在讨论范围内啦。</p>
<p>抬头一看状态栏上的 1% 还在用代表警告的鲜红色证明着自己的存在感，同时也瞄到了2:22这个代表您老该睡了的时间戳。明天，还要继续提不起劲哟。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/magical-madoka/">快和我签订契约，成为马猴烧酒吧</a></p>]]></content>
        
        <summary type="html">
            
            十分危险地保持着 1% 的电量，估摸着已经如此这般一个半小时了的爪机还是昂扬的挺立着(?)。电量统计缓存看来又欠调教了呢，但是为此非要进一次 Recovery 真是讨厌呢。 这么说起来暑假马上就要结束了，然后就可以尽情地享受在充实的青春中奋力攻略中考酱的滋味呢。再怎么不舍也不是
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="ACG"/>
        
        <category term="中考"/>
        
        <category term="人生观"/>
        
        <category term="博客"/>
        
        <category term="暑假"/>
        
        <category term="魔法少女小圆"/>
        
    </entry>
    
    <entry>
        <title>开学前的碎碎念</title>
        <link href="http://blog.dimpurr.com/freetalk-1/"/>
        <id>http://blog.dimpurr.com/freetalk-1/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-08-25T19:50:49+08:00</published>
        <updated>2013-08-25T19:50:49+08:00</updated>
        
        <content type="html"><![CDATA[<p>九月一号就开学了。暑假过的真快啊……</p>
<p>总的来说，这个暑假还是过的很棒的。无论如何，学到了很多……</p>
<p>明天又要上补习班，不过也算给开学预热一下吧。</p>
<p>开学后就是初三了。无论如何都必须打起精神来应付的重要时刻呢，继续提不起干劲的话可是要坏事呢。</p>
<p>这几天都在给博客码主题。第一次写 WordPress 主题呢……真忙起来，确实是没时间再顾及各种SNS什么呢（趴</p>
<p>嘛，至少在攻略中考酱之前，做出一个像样的作品吧。</p>
<p><del>话说，一直以来的附件服务器，竟然被墙了呢……</del></p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/freetalk-1/">开学前的碎碎念</a></p>]]></content>
        
        <summary type="html">
            
            九月一号就开学了。暑假过的真快啊…… 总的来说，这个暑假还是过的很棒的。无论如何，学到了很多…… 明天又要上补习班，不过也算给开学预热一下吧。 开学后就是初三了。无论如何都必须打起精神来应付的重要时刻呢，继续提不起干劲的话可是要坏事呢。 这几天都在给博客码主题。第一次写 Wor
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="CSS"/>
        
        <category term="WordPress"/>
        
        <category term="前端"/>
        
        <category term="博客"/>
        
        <category term="开学"/>
        
        <category term="暑假"/>
        
        <category term="模版"/>
        
        <category term="设计"/>
        
    </entry>
    
    <entry>
        <title>Elementary OS Luna 第一天</title>
        <link href="http://blog.dimpurr.com/elementary-first/"/>
        <id>http://blog.dimpurr.com/elementary-first/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-08-18T23:34:11+08:00</published>
        <updated>2013-08-18T23:34:11+08:00</updated>
        
        <content type="html"><![CDATA[<p>最开始知道 Elementary OS 是 <a href="http://ra.gg/@f8q11" target="_blank">@Mummy醬</a> 在评论里提到的：</p>
<blockquote><p>愛麗絲卡 2013-7-18 21:00: 可以試試別的桌面環境的說，咱是elementary os的飯。</p></blockquote>
<p>当初看了一下觉得和 Gnome 差不多 (当时把 Gnome 当成了 KDE …)，所以没有引起多大注意。昨天正好没事干，就刻录了下 OpenSUSE 准备试试。等待之中在 V2EX 晃悠时，又看到了有人提到 Elementary OS 。于是就顺便搜索了一下，结果大感兴趣，直接把刚刻好的 OpenSUSE 覆盖掉了……</p>
<p>很快进入了安装界面，当然先点了试用。不得不说真的是惊艳到了，默认的桌面环境确实非常漂亮，略有 Mac 风格但也不只是模仿，既细腻又简洁，不愧是设计师主导的发行版。于是 Elementary 的脑残粉又多了一个……之后因为除了界面风格之外定制 Ubuntu 的部分不算多，安装也轻车熟路，断网安装一下子就搞定了。时某人依然是试用然后边玩边安装，不过因为 Live CD 没有 sudo 权限 GoAgent 配置失败了……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/00124.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/00124-600x337.png" /></a><p>边安装边玩中~</p></div>
<p>很快设置好引导进了系统，然后配置好了GoAgent、 Wine、 Ubuntu Tweak 等之前研究过了的东西。输入法 SunPinyin 暂时凑合，下次试试传说中的 Rime 小狼毫。播放器还是习惯的 SMPlayer ，浏览器换成了 Chromium 。之前攒下的经验用完后，又开始了折腾。某渣渣首先尝试了一下著名的新立得包管理器，最后表示软件中心 + 手动 apt-get 也挺方便了……</p>
<p><span></span></p>
<p>音乐播放器应该是我每次开机都要打开的软件了，当然得慎重选择。自带的播放器和 Ubuntu 默认的 Rhythmbox 还有 Amarok 等都挨个尝试了一下，但是致命伤都是无法读取 CUE 文件。这对于一个无损控来说怎么能忍受，最后用了 Audacious ，还找到了一个不错的桌面歌词软件<a href="https://code.google.com/p/osd-lyrics/" target="_blank"> OSD Lyrics</a> 。</p>
<p>虽然说要学 Vim ，但是目前最心仪的编辑器还是 Sublime Text 。懒得找破解版，毕竟ST业界良心不注册也没任何影响，去官网下载下来发现是 Python 的，双击运行。因为以前用的版本是打包好了常用插件的绿色版，这次只能手动汉化，然后对着之前的绿色版的插件列表用包管理器一个个安装……</p>
<p>即时通讯目前只用到 Hangouts 和 QQ ，在尝试了螺丝推荐的 Pidgin 之后表示没比自带的 Empathy 好用多少还更难看，也不需要那么强大的功能，于是就继续沿用自带。QQ 三三倒是推荐了一个 Chromium 插件叫 DualX 的，看起来挺好用，结果腾讯频繁更换协议作者放弃更新了……反正很少用 QQ ，需要时 WebQQ 凑合一下就是了。</p>
<p>常用软件配置完成之后某人又尝试组建了 LAMP 服务器，过程无比顺利就不说了。只是最后做动态域名解析和端口映射想让外网访问时发现坑爹的电信封了80端口不说，我的IP也不是专属IP，无解……最后只能放弃，就算搭了个本机测试环境了。动态域名解析用的是 <a href="http://www.anrip.com/post/872" target="_blank">一个基于 Dnspod API 的纯 Shell 脚本</a> ，用 crontab 命令定时更新，就不详谈了。</p>
<p>在这一切结束之后，我忽然发现我在 Windows 下做的一切事情，在 Liunx 下都能一样的做到，甚至更好、更简单。不仅如此，我顿时觉得 Liunx 在我面前不再是一个复杂高端的系统了，而是一个比 Windows 更好用、开放、强大、更少流氓软件的系统。我用 Liunx 的理由现在不再是为了好玩而体验，而是因为确实更适合我，目测，今后我就是一名 Liunx 用户了……</p>
<p>2013-12-11：小小更新一下， Mummy 酱推荐的这个网站挺不错的，建议关注一下<a href="http://www.elementaryupdate.com/" target="_blank">：Elementary Update</a> 还有目前使用的主题：<a href="http://matheusligabue.deviantart.com/art/Fresh-for-Pantheon-407116554" target="_blank">Fresh for Pantheon by MatheusLigabue on deviantART</a></p>
<p>最后贴点截图：</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/2013-08-18-232447.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/2013-08-18-232447-600x337.png" /></a><p>桌面效果 + 歌词</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/2013-08-18-232417.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/2013-08-18-232417-600x337.png" /></a><p>Chromium + Sublime Text 2 + Empathy</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/2013-08-18-2320071.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/2013-08-18-2320071-600x337.png" /></a><p>GAE + Adacious + 工作区切换</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/elementary-first/">Elementary OS Luna 第一天</a></p>]]></content>
        
        <summary type="html">
            
            最开始知道 Elementary OS 是 @Mummy醬 在评论里提到的： 愛麗絲卡 2013-7-18 21:00: 可以試試別的桌面環境的說，咱是elementary os的飯。 当初看了一下觉得和 Gnome 差不多 (当时把 Gnome 当成了 KDE …)，所以没有
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="Elementary OS"/>
        
        <category term="LAMP"/>
        
        <category term="Liunx"/>
        
        <category term="Python"/>
        
        <category term="Sublime"/>
        
        <category term="Ubuntu"/>
        
    </entry>
    
    <entry>
        <title>Ex绅士 探险指南</title>
        <link href="http://blog.dimpurr.com/ex-hentai/"/>
        <id>http://blog.dimpurr.com/ex-hentai/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-08-15T14:01:31+08:00</published>
        <updated>2013-08-15T14:01:31+08:00</updated>
        
        <content type="html"><![CDATA[<p>从前有一只野生的小绅士，每天默默的从毛站和琉璃上面扒各种本子。直到有一天，它发现了一个崭新的宝库——ExHentai 。以下涉及工口绅士内容，如感到不适请右上角红X。</p>
<p>千万不要戳进↓</p>
<p><span></span></p>
<h3>Client 篇</h3>
<p>为广大绅士传教方便，特在此罗列常用客户端，请叫我红领巾。</p>
<h4>Android</h4>
<ul>
<li><strong>绅士道</strong>
<ul>
<li>界面略差，功能最强，内置本子按图搜索、AV 里番种子资源功能</li>
<li><a href="http://yun.baidu.com/s/1c0B1P88" target="_blank">http://yun.baidu.com/s/1c0B1P88</a></li>
</ul>
</li>
<li><strong>Eh-Viewer</strong>
<ul>
<li>Material Design 界面，十分炫酷</li>
<li><a href="http://www.ehviewer.com/" target="_blank">http://www.ehviewer.com/</a></li>
<li><a href="http://www.ehviewer.com/download" target="_blank">http://www.ehviewer.com/download</a></li>
</ul>
</li>
<li><strong>E-Hentai Reader</strong>
<ul>
<li><a href="https://zespia.tw" target="_blank">Zespia</a> 菊苣的 EhReader ，Holo UI 界面，阅读体验十分好，强烈推荐</li>
<li><a href="http://zespia.tw/blog/2014/04/19/ehreader-android/" target="_blank">http://zespia.tw/blog/2014/04/19/ehreader-android/</a></li>
<li><a href="https://github.com/tommy351/ehreader-android/releases" target="_blank">https://github.com/tommy351/ehreader-android/releases</a></li>
</ul>
</li>
<li><strong>MangaProxyEx</strong>
<ul>
<li>已停止更新</li>
<li><a href="http://bbs.saraba1st.com/2b/thread-915985-1-1.html" target="_blank">http://bbs.saraba1st.com/2b/thread-915985-1-1.html</a></li>
<li><a href="https://bitbucket.org/vertusd/mangaproxyex/downloads" target="_blank">https://bitbucket.org/vertusd/mangaproxyex/downloads</a></li>
</ul>
</li>
<li><a href="LOFI.e-hentai.org" target="_blank"><strong>LOFI.e-hentai.org</strong></a>
<ul>
<li>据说是官方的手机版网页</li>
</ul>
</li>
</ul>
<h4>iOS</h4>
<ul>
<li><strong>Dai-Hentai</strong>
<ul>
<li>支持基本的下载和缓存</li>
<li><a href="https://github.com/DaidoujiChen/Dai-Hentai" target="_blank">https://github.com/DaidoujiChen/Dai-Hentai</a></li>
</ul>
</li>
</ul>
<h4>其他</h4>
<ul>
<li><strong>This Panda</strong>
<ul>
<li>一个在线免翻阅读器，支持打包下载</li>
<li><a href="http://www.thispanda.com/">http://www.thispanda.com/</a><strong> </strong></li>
</ul>
</li>
<li><strong>E-Hentai 批量扒图器</strong>
<ul>
<li>Windows 客户端，基于 .NET ，不建议过度使用</li>
<li><a href="http://summerlight.name/?p=12">http://summerlight.name/?p=12</a></li>
</ul>
</li>
</ul>
<h3>Cookie 篇</h3>
<p>对于大部分人来说， E-Hentai 表站 <a href="http://e-hentai.org/">http://e-hentai.org/</a> 和表站相册 <a href="http://g.e-hentai.org/">http://g.e-hentai.org/</a> 就可以满足需求。但是如果涉及到萝莉、正太等欧美敏感内容，都会被隐藏进里站 Ex-Hentai 。在表站发布的本子如果被贴了 Lolicon 之类的tag，也会被自动拖进里站。因此，诸位萝莉控正太控肉○器控等各种奇葩口味的亲们就需要里站来满足~</p>
<p>如果直接访问 <a href="http://exhentai.org/">http://exhentai.org/</a> ，大部分人都只会看见那只经典的国宝，如图↓</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/sadpanda.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/08/sadpanda.jpg" /></a><p>打开方式错误</p></div>
<p>首先，公布一下默认正确的打开方式：</p>
<ol>
<li>准备一个 Chrome Firefox 之流的现代浏览器， IE 就算了，什么，想扒本子，还懒得装个浏览器？</li>
<li>如果已经看见过熊猫了，务必在设置里用 Cookie管理器 删除 exhentai.org 下的所有 Cookie ，特别是一个叫 yay 的。如果不会，直接清空 Cookie 也行……</li>
<li>打开论坛的注册页面 <a href="http://forums.e-hentai.org/index.php?act=Reg&amp;CODE=00">http://forums.e-hentai.org/index.php?act=Reg&amp;CODE=00</a> 注册一个账户，然后再清除 e-hentai.org 下的所有 Cookie ，同上。</li>
<li>在 e-hentai.org 登录好帐号。</li>
<li>打开 ExHentai 吧，美丽新世界的大门在向你招手~</li>
</ol>
<p>网上流传的各色教程版本都是这样的。但是撸主尝试之后，却依然只看见作死的熊猫。在尝试翻墙(其实不需要)、回帖升到初级用户组、更换浏览器、更换系统等各色办法之后……</p>
<p>首先说下原理。为了和谐， ExHentai 会扫描你的 Cookie 记录，如果扫描到了 EHentai 的账户有登录才可以进入，这就是为什么需要高级浏览器。然后，假如不幸看到了熊猫，就会给你写个名为 yay 的记录，如果这条 Cookie 留着就怎么也看不到了，所以看到国宝后一定要删掉这条记录再试。</p>
<p>但是呢，明明 EHentai 在 Cookie管理器 里呆的好好的，为什么还是打不开呢？这时机智的撸主灵机一动，给 Chrome 下载了一个 Cookie 编辑器，把 EHentai 下的 Cookie 全部原样拷到 ExHentai 下，然后域改为 exhentai.org 。还有 forum.e-hentai.org 的 Cookie 也死马当活马医改成了 exhentai.org ……再次打开 ExHentai ，目标达成！</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130815133032.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130815133032-600x327.png" /></a><p>手动拷贝 Cookie</p></div>
<p>附上 Chrome 为例的详细步骤：</p>
<ol>
<li>下载一个名为 <a href="https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg">Edit This Cookie</a> 的插件，然后在 E-Hentai 的页面上右键 &gt; 编辑 Cookies ，进入 Cookies 编辑页面</li>
<li>点击 导出 Cookies ，随后会提示 “Cookie 已复制到剪贴板” 。</li>
<li>在 ExHentai 上右键 &gt; 编辑 Cookies ，点击 删除全部 ，然后点 导入 Cookies</li>
<li>粘贴后得到一段 JSON 格式的代码，将其中所有的 e-hentai.org 字符替换为 exhentai.org ，然后 提交更改</li>
<li>刷新页面，完成~</li>
</ol>
<p>撸主当然毫不犹豫在搜索框输入 Loli 回车，展示成果↓</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130815133734.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130815133734-600x414.png" /></a><p>兄弟，开撸吧！</p></div>
<p>说完正题，再来介绍一些其他小把戏。</p>
<p>如果有人用尽各种方法还是不能进入，或者说想要批量下载，可以试一下国人用 AngelaJS 写的小脚本 <a href="http://www.thispanda.com/">http://www.thispanda.com/</a><strong> </strong>，输入 EHentai 帐号之后就会进入搜索界面，输入关键词点 Fire! 就可以了，空关键词就是进入总的列表。这个好处是有下载，阅读模式也比较舒服，缺点是必须翻墙，而且比较慢。</p>
<p>还有人写了一个 EHentai 的批量扒图器： <a href="http://summerlight.name/?p=12">http://summerlight.name/?p=12</a> ，不过也受到很大争议，因为使用这种下载器容易给服务器增加负担，当初的萌妹就因此被爆。所以说，能用积分下载尽量直接下载，能右键尽量右键，不然请求数太多，天朝IP被封了就那啥了。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/ex-hentai/">Ex绅士 探险指南</a></p>]]></content>
        
        <summary type="html">
            
            从前有一只野生的小绅士，每天默默的从毛站和琉璃上面扒各种本子。直到有一天，它发现了一个崭新的宝库——ExHentai 。以下涉及工口绅士内容，如感到不适请右上角红X。 千万不要戳进↓  Client 篇 为广大绅士传教方便，特在此罗列常用客户端，请叫我红领巾。 Android 
            
        </summary>
        
        <category term="次元爱"/>
        
        <category term="ACG"/>
        
        <category term="Hentai"/>
        
        <category term="Loli"/>
        
        <category term="同人志"/>
        
        <category term="工口"/>
        
    </entry>
    
    <entry>
        <title>钉子的 .tel 域名历险记</title>
        <link href="http://blog.dimpurr.com/tel-domain/"/>
        <id>http://blog.dimpurr.com/tel-domain/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-08-14T15:19:25+08:00</published>
        <updated>2013-08-14T15:19:25+08:00</updated>
        
        <content type="html"><![CDATA[<p>那时的某人手头刚好有了点小钱，心里又痒痒的想起了之前搭站的计划。心动不如行动，闲极无聊的某人立刻用 <a href="https://www.name.com/names" target="_blank">Name.com的域名扫描器</a> 检视各种珍惜域名被遗漏的生僻后缀。在因为各种新出域名的昂贵价格几经绝望之后，忽然， Otaku.tel 这个域名后面 $9.99 的超低价格让某人发现了希望的曙光。</p>
<p>不幸的是 GoDaddy 并不支持 .tel 域名的购买，而 Name.com 无法使用支付宝支付。心急火燎的某人想起了<a href="http://best33.com/51.moe" target="_blank">三三曾经提到过</a>的专门做新后缀的国内域名商十一名，果然发现每年76大洋即可拿到。便宜哪有不捡的道理，火速注册并支付提交了订单，在惴惴不安的等待中度过了一个夜晚。</p>
<p>第二天，登上后台的某人惊喜的在已购买服务内看到了域名的管理后台。首先应该做的当然是把DNS解析绑定到 Dnspod ，所以让我们……什么？居然没法保存？？？就说吧！宁可找人代付也要在 Name.com 这样的大站买吧，你小子就猴急吧，说过了国内域名商不能信吧……内心无数草泥马滚滚而过之后，无奈的某人戳开了客服QQ (国内就这好处，比工单快多了) ，然后得到了令人发指的答复……</p>
<blockquote><p>.tel 域名是没有DNS的，TEL域名是电子名片式域名，全是使用注册局官方统一的页面进行设置，具体的说明教程在你注册后系统有发邮件到您的注册邮箱，也包括官方帐号</p>
<p>——via 客服大叔</p>
</blockquote>
<p>嘛，那么一查邮箱，真有封邮件，还附了个PDF。在无比头大的翻阅了一遍09年出的没有技术含量内容超级白痴但是语言生涩难懂的 <a href="https://live.tel-hosting.net/vfs/pdf/telguide_zh.pdf" target="_blank">『.tel 使用指南』(点击下载)</a> 之后，某人掀桌了：<strong>这特么不就是一个又难用又难看的收费版顶级米 About.me 嘛！！！</strong> 无法绑定服务器，无法存放网页，一切 A 和 NS 记录都被屏蔽，只支持 TXT 和 MX 记录……要你何用！</p>
<p>为了不让76大洋去的那么无辜，某人硬着头皮开始了这个奇葩服务的体验……以下吐槽 ↓</p>
<p><span></span></p>
<p>真好，一进来就有一个贴心的欢迎向导。让我们慢慢填……</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130808140318.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130808140318-600x407.jpg" /></a><p>温馨的向导</p></div>
<p>都说越精密的器械越容易出错，从这bug率来说 .tel 果然是本世纪的尖端科技。头像无法添加、 Google 地图无法加载这些都不足为题，问题是不上传头像居然无法下一步……在翻墙和更换浏览器未果之后，看来还是修行不够的某人不得不选择直接跳过了向导。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130808140331.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130808140331-600x407.jpg" /></a><p>Bug 百出的第二步</p></div>
<p>虽然已经在看帮助手册时做了点心理准备，但是还是被后台的专业程度震惊了……什么？亲你想添加个网址？权限、文件夹、组、值都给我乖乖填好！不愧是天顶星科技！</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130808140337.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130808140337-600x407.jpg" /></a><p>精密无比的后台界面</p></div>
<p>资料填完后，让我们进入高端洋气上档次的「设计」标签。看，这些生动的模版设计，是不是让亲不禁想起了上个世纪网页设计的先驱们的卓越风格，还有经典富有时间沉淀的技术理念？</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130808140608.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130808140608-600x352.png" /></a><p>琳琅满目的炫丽模版</p></div>
<p>被各种槽点弄得精疲力尽之后，某人终于得到了一个乡土气味浓厚的个人主页。有了这样的主页，腰不酸了，背不疼了，走在路上都倍儿有精神，腰杆子也挺得直了！</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/08/20130808140631.png"><img src="http://img1.dimpurr.com/dimblog/2013/08/20130808140631-600x352.png" /></a><p>最终成果</p></div>
<p>……最后的最后，还有一个不幸中的万幸： .tel 支持MX记录。为了压榨这个坑爹货的最大价值，某人屁颠屁颠的跑去注册了一个 <a href="https://domains.live.com/" target="_blank">Live的域名邮箱服务</a> ，并且在后台设置完毕。扔个注册链接，欢迎有需要的亲戳进：<a href="https://domains.live.com/members/signup.aspx?domain=otaku.tel" target="_blank">@Otaku.tel 邮箱注册→</a></p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/tel-domain/">钉子的 .tel 域名历险记</a></p>]]></content>
        
        <summary type="html">
            
            那时的某人手头刚好有了点小钱，心里又痒痒的想起了之前搭站的计划。心动不如行动，闲极无聊的某人立刻用 Name.com的域名扫描器 检视各种珍惜域名被遗漏的生僻后缀。在因为各种新出域名的昂贵价格几经绝望之后，忽然， Otaku.tel 这个域名后面 $9.99 的超低价格让某人发
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="吐槽"/>
        
        <category term="域名"/>
        
        <category term="网络"/>
        
    </entry>
    
    <entry>
        <title>图文回顾 Windows Vista (Longhron) 五年开发历程 (更新五)</title>
        <link href="http://blog.dimpurr.com/vista-history/"/>
        <id>http://blog.dimpurr.com/vista-history/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-29T19:13:43+08:00</published>
        <updated>2013-07-29T19:13:43+08:00</updated>
        
        <content type="html"><![CDATA[<p>Windows Vista 创造了Win家族中的两个最：开发时间最长，用户评价最差。作为一个费时费力、跳票连连又最终失败的系统，Vista 最终丝毫没能撼动老哥 XP 的地位，默默地成为了下一个成功的老弟 Win7 的基石。但是在开发代号为 Longhorn 的无数个泄露版本中，依稀可以看见微软对于各种新特性和交互的尝试，以及对Win家族未来方向的寻找。</p>
<h3>一 摸索道路</h3>
<p>加拿大温哥华以北大概125公里的太平洋海岸山脉中，有一个一年四季白雪皑皑的名为惠斯勒 (Whistler) 的度假胜地。无数游客为惠斯勒山滑雪场举世闻名的高山滑雪和山地自行车慕名而来，同样因为其“北美第一滑雪胜地”的美誉成为了2010世界冬奥会的主赛场。而惠斯勒镇另一个举世闻名的滑雪场地黑梳山 (Blackcomb) 终年积雪，山路陡峭，是只有高手才敢挑战的圣地。</p>
<div><a href="http://skiingbc.com/New_Photos/Evolution%20Whistler%20Ski%20In%20Ski%20Out/Whistler%20Creekside%20Ski%20In%20Ski%20Out%20EvolutionWinter2-0006.jpg"><img src="http://skiingbc.com/New_Photos/Evolution%20Whistler%20Ski%20In%20Ski%20Out/Whistler%20Creekside%20Ski%20In%20Ski%20Out%20EvolutionWinter2-0006.jpg" /></a><p>Whistler, BC Canada</p></div>
<p>世纪交接时的 Microsoft 凭借着 95 和 XP 的震撼发布登上了颠峰时期。代号为 Whistler 的 XP 发布后，微软宣布了下一个代号为 Blackcomb 的新系统计划，也就是后来的 Windows 7 。不过在两座山脉间，有一个滑雪客们时常歇脚的酒吧 Longhorn ，这就是 Vista 的开发代号。正忙于销售和推广大热的 XP 的微软，对于这个过渡性的产品并未过多提起。</p>
<p><span></span></p>
<p>2001 年 7 月 XP 发布前夕的微软年度大会， 现任微软副总裁史蒂夫·古杰海默 (Steven Guggenheimer) 作为当时 MSN 事业部的主任展示了未来的 MSN 服务原型。演示使用的操作系统引起了大家的注意，它类似于 XP ，但部分界面有所变化。但是最后证据表明，这只是作为 .NET 计划的一部分于系统深度集成的 MSN 8 原型。</p>
<div><a href="http://www.techradar.me/wp-content/uploads/2013/01/MSN-Shell.gif"><img src="http://www.techradar.me/wp-content/uploads/2013/01/MSN-Shell.gif" /></a><p>MSN .NET 原型</p></div>
<p>2002 年 4 月，流出了第一个 Longhorn 的视频，拥有一个全新设计的任务窗格。5 月份，再次流出了一个拥有3D设计的界面。无数早期或实际或奇葩的概念图和第三方概念视频的流出，体现了人们对下一代系统的期待。</p>
<div><a href="http://www.techcn.com.cn/uploads/201005/1272849308t7eIKcMi.jpg"><img src="http://www.techcn.com.cn/uploads/201005/1272849308t7eIKcMi.jpg" /></a><p>Longhorn 早期概念视频</p></div>
<p>就在4月，刚刚开始的 Longhorn 就首次延期，宣布 2004 年之前将不会发布。不久后的 WinHEC 2002 硬件技术研讨大会后，微软忽然宣布 Longhorn 将会包含新的托管接口、图形结构、网络技术以及存储架构。这意味这 Longhorn 从一个过渡性的优化版本，转变成了又一个重要的里程碑版本。</p>
<p>7月份，比尔盖茨登上了财富杂志封面。在 <a href="http://blogchina.blogchina.com/464.html" target="_blank">《近距离看盖茨》</a> 一文中，他将 Longhorn 称为一次“全面检修”，重新思考操作系统的人机互动模式。当时的微软推出了 .NET计划 等一系列富有创意但最终流产的项目，李开复在自传《世界因你而不同》中提到， 在项目起初盖茨为 Longhorn 拟定了三大目标：</p>
<ol>
<li>改用 C# 撰写所有软件，在牺牲稳定性和运行速度的情况下加快开发速度以抗衡 Liunx 等开源系统。</li>
<li>开发 WinFS ，将所有文件存储成数据库，增加虚拟文件夹等新特性。</li>
<li>加入 .NET 计划的核心之一 Avalon ，使得浏览器应用获得和本地相同的体验。</li>
</ol>
<h3>二 增增补补</h3>
<p>最初期的开发进程因为微软的保持缄默，人们对其的了解仅限于BT站点和新闻组流出的泄漏版本。Build 版本仍然停留在 XP 的 3xxx 的几个泄露版本只是对 XP 的改进和更新。</p>
<p>在 3663 和 3670 两个版本 (M2) 中，相对 XP 只增加了一个名为 Plex 的新主题和更明显的设备管理器入口。当年 10 月 26 日，第一个泄漏版本 Build 3683 (M3) 出现在网络上，版本信息为 Longhorn XP Professional 。一个著名的特性之一侧边栏首次出现，还可以把开始菜单移到侧边栏上，从而让任务栏消失。早期的 WinFS 和 Avalon 服务出现，但是仅仅展示出了一小部分特性，对于测试者而言不过是个浪费内存和CPU的系统进程而已。</p>
<div><a href="http://topicstock-origin.pantip.com/wahkor/topicstock/2010/01/X8744966/X8744966-1.jpg"><img src="http://topicstock-origin.pantip.com/wahkor/topicstock/2010/01/X8744966/X8744966-1.jpg" /></a><p>我的硬件、图标视图、侧边栏和任务栏最右侧的折叠按钮</p></div>
<div><a href="http://topicstock-origin.pantip.com/wahkor/topicstock/2010/01/X8744966/X8744966-2.jpg"><img src="http://topicstock-origin.pantip.com/wahkor/topicstock/2010/01/X8744966/X8744966-2.jpg" /></a><p>Plex 新主题、使用 Avalon API 的个性化设置</p></div>
<div><a href="http://topicstock-origin.pantip.com/wahkor/topicstock/2010/01/X8744966/X8744966-3.jpg"><img src="http://topicstock-origin.pantip.com/wahkor/topicstock/2010/01/X8744966/X8744966-3.jpg" /></a><p>整体效果</p></div>
<p>随后的 3706 和 3718 相继添加了 IE 6.05 和一些透明、动画效果，首次出现了磁盘容量条，同时新增的 DWM桌面窗口管理器 改变了传统的只计算窗口不被遮挡部分的显示渲染的模式，变为渲染完每个窗口的幕后位图再进行拼合，最后成为 Aero 的透明效果和 Flip 3D (Win + Tab) 效果的一部分。</p>
<h3>三 前期开发</h3>
<p>2003 年 2 月 28 日，经过了几个月的沉寂后 Build 4008 (M4) 泄漏。Plex 主题经过修改后成为被设为默认，侧边栏被重新设计和简化，资源管理器开始基于 .NET 构造。最重要的两个变化之一是桌面背景奠定了最终版本的光芒四射的风格，以及完全重新设计、速度加快三倍的交互式安装向导。</p>
<div><a href="http://en.academic.ru/pictures/enwiki/87/Windows_Longhorn_Build_4008.png"><img src="http://en.academic.ru/pictures/enwiki/87/Windows_Longhorn_Build_4008.png" /></a><p>资源管理器、文件预览、改进的搜索</p></div>
<div><a href="http://www.geocities.ws/longhornalpha/lh4008/lh_screenshots/4008setup4.JPG"><img src="http://www.geocities.ws/longhornalpha/lh4008/lh_screenshots/4008setup4.JPG" /></a><p>新的安装向导</p></div>
<p>4 月 28 日， Build 4015 (M5) 被泄露。家长控制、库等开发中的新特性被加入，侧边栏可以移到屏幕底部，同时新增了下载管理器、虚拟文件夹等最终被弃用的功能。但这个版本的资源管理器和侧边栏存在严重的内存泄露问题，必须用第三方工具解决。不久后泄露了基于 Windows Server 2003 RC1 的首个服务器版本 Build 4028 ，稍后的 4029 增加了鼠标悬停预览图片视频、图片批量处理等功能，但内存泄露问题仍未完全解决。</p>
<div><a href="http://chris123nt.com/guides/4029/LH4029Guide_files/ie.JPG"><img src="http://chris123nt.com/guides/4029/LH4029Guide_files/ie.JPG" /></a><p>Plex 主题中的 IE 6.05</p></div>
<div><a href="http://www.activewin.com/articles/2007/images/Longhorn%204015.jpg"><img src="http://www.activewin.com/articles/2007/images/Longhorn%204015.jpg" /></a><p>位于底部的侧边栏</p></div>
<p>不久后，Build 4033 (M6) 和 4039 相继泄漏。 4039 是最后一个使用 Plex 主题的版本，并首次添加了经典的 Aero Glass 效果。</p>
<div><a href="http://www.betaarchive.co.uk/imageupload/1217326418.or.44758.PNG"><img src="http://www.betaarchive.co.uk/imageupload/1217326418.or.44758.PNG" /></a><p>Aero Glass 效果</p></div>
<p>Build 4042 启用了一个叫 Slate 的新主题，原蓝色的界面风格改为偏黑色。2003年的 PDC专业开发者大会 上微软使用了 Build 4051 作为演示版本，其中对开始菜单和IE进行不少改进，同时第一次去掉了开始菜单上的 Start 字样。随后的 4066 服务器测试版第一次出现了全新的 Jade 主题。</p>
<p>2004年的五月， Windows 硬件工程师研讨会 如期举行。会上，微软展示了最新的 Build 4074 (M7) ，使用了完善的 Jade 主题界面，更换了与最终版本相仿的图标，同时发布了全新的 Segoe UI 系统字体。不久后，微软宣布将在 Longhorn 中应用 下一代安全计算基础 (NGSCB) 架构，但因为其华而不实遭到极大反对，最后仅有其中的 Bit Locker 功能保留下来。不久后的 4083 和 4093 极其缺乏稳定性，而且几次移除又重新添加侧边栏和 WinFS 等组件， Vista 开发的内部混乱已经积累到一个临界值。</p>
<div><a href="http://winsupersite.com/site-files/winsupersite.com/files/archive/winsupersite.com/content/content/127732/showcase/4074_ui_05.gif"><img src="http://winsupersite.com/site-files/winsupersite.com/files/archive/winsupersite.com/content/content/127732/showcase/4074_ui_05.gif" /></a><p>资源管理器和图片预览</p></div>
<div><a href="http://www.thevista.ru/files/images/articles/ANOTHER/longhornreloaded.jpg"><img src="http://www.thevista.ru/files/images/articles/ANOTHER/longhornreloaded.jpg" /></a><p>启用 Aero Glass 的 Jade 效果</p></div>
<h3>四 推倒重来</h3>
<p>Longhorn 正是微软的一场“大跃进”。每个团队都给自己定下了完全没法完成的宏伟蓝图，各种语言学家心理学家对工程师们胡乱指挥，不同的团队之间剑拔弩张毫无配合，这个团队的主任一走，另一个团队的项目就取而代之。开发到中期，各种本来计划在 Blackcomb 上的特性被随意的添加，预定的发布日期不断推迟。</p>
<p>终于在 2004 年秋天的一个星期六， Longhorn 的项目负责人吉姆·阿尔钦 (Jim Allchin) 把所有的副总裁召集起来，宣布道：“我们确定无法按预期完成这项产品， Longhorn 已经彻底玩完。我想问问你们，如果从头做起，希望两年能做完，你们认为可以做到什么地步？”话音刚落，全场寂静。一阵七嘴八舌之后，大家总结出了最可行的对策：不用 C#、取消 WinFS、删改 Avalon 。一开始的三大目标就这样被完全否决。不久后，负责了 Windows NT 项目17年之久的NT之父吉姆辞职引退。在 7 月的财年分析会议，直接负责 Windows 的副总裁威尔·普尔 (Will Poole) 只字不提 Longhorn 。</p>
<p>在终于解决了从冲击波病毒开始暴漏出来的大量 XP 安全漏洞之后， 2004 年 8 月，因为当时的开发重心集中于 Windows Server 2003 ，新的并不基于 XP 的 Longhorn 开始重写，两年来的工作就这样付之一炬。因为系统组件对与 WinFS 等组件依赖严重，而且代码质量不高，大量软件都必须推倒重来，使得进度非常缓慢。</p>
<p>一直到了 2005 年 5 月 的 WinHEC 召开，微软终于释出了重写后的第一个开发者预览版 Build 5048 ，但是整体来说 UI 极其丑陋和单调， 内置了 Aero 但是效果不佳，开始菜单增加了搜索条和所有程序面板，丑陋的侧边栏不再默认出现。一个比较重要的特性是和最终版接近的窗口控制按钮。这个版本和XP的差距不大，被称为是一种倒退。随后的 Build 5060 添加了新的登陆界面。</p>
<div><a href="http://www.liewcf.com/blog/wp-images/windows-longhorn-review.JPG"><img src="http://www.liewcf.com/blog/wp-images/windows-longhorn-review.JPG" /></a><p>Build 5048 (DP) 开发者预览版的界面效果</p></div>
<p>2005 年 7 月 初，微软给 Longhorn 定下了源于拉丁文 Vedere (展望) 之意的 Vista 这个名字，吉姆·阿尔钦说，Vista 为这个新系统的功能勾勒了一幅美丽的图景，能够最大限度的激发人们的想象力，点燃用户的激情。</p>
<p>7 月 27 日， Vista Beta 1 (Build 5112) 在 MSDN 和 TechNet 释出。其中引入了新的图形界面，新的高清图标、虚拟文件夹、资源管理器等元素都被添加进来，包括家长控制、 .NET 3.0 等功能开始进行开发。之后，微软开始定期发放社区技术预览版。 Build 5219 作为第一个公开的旗舰版被放出，侧边栏和桌面小工具重新出现，并且内置了全新的媒体中心。随后的 Build 5231 和 Build 5259 增加了 WMP 11 和一些内置软件的更新。</p>
<p>(未完待续)</p>
<p>(妈蛋PO主快写不下去了……感觉越是写到后面，越是变成没有意思的罗列更新和截图，求破)</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/vista-history/">图文回顾 Windows Vista (Longhron) 五年开发历程 (更新五)</a></p>]]></content>
        
        <summary type="html">
            
            Windows Vista 创造了Win家族中的两个最：开发时间最长，用户评价最差。作为一个费时费力、跳票连连又最终失败的系统，Vista 最终丝毫没能撼动老哥 XP 的地位，默默地成为了下一个成功的老弟 Win7 的基石。但是在开发代号为 Longhorn 的无数个泄露版本中
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="Microsoft"/>
        
        <category term="UI"/>
        
        <category term="Vista"/>
        
        <category term="Windows"/>
        
        <category term="交互"/>
        
        <category term="历史"/>
        
    </entry>
    
    <entry>
        <title>时间真是不够用，先让我多睡会觉</title>
        <link href="http://blog.dimpurr.com/time-sleep/"/>
        <id>http://blog.dimpurr.com/time-sleep/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-26T02:47:03+08:00</published>
        <updated>2013-07-26T02:47:03+08:00</updated>
        
        <content type="html"><![CDATA[<p>内心一直有一种奇怪的信念在支撑，导致自己一错再错。那就是，生活向的博文，一定要深夜写……</p>
<p>目测这篇文章已经拖了不止两周，一直以来想把暑假至今发生的事情记录一下，但是因为种种不可抗力一再拖延。无数个深夜在偷玩手机失败的无奈和刷姬加忘记时间的悔恨中度过，直到有一天担心再不写真的就坑了，终于动起了笔。忽然要写反而有点不知道从何开始，或许是已经太久了渐渐开始淡忘暑假刚开始的事情。为了回忆自己的经历倒着翻阅自己的时间线居然也是件挺辛苦的事情，真想总结一下的时候却发现自己好像并不像想象中的做了那么多事。不过有一点可以明确，这又将是一篇诸位可以跳过的撸主自说自话的扯淡文。</p>
<p>呐在开头继承PO主一贯的尿性，先谈一下目前的码字环境。记得曾经说过百度云ROM27以下的自带记事本手感真是舒服到不行，但是在尝试提取失败之后不得不寻找替代品。之前就早已对各种笔记应用失望透顶，只好试图寻找类似简书那样的专注码字的编辑器。在百度手机助手搜寻出大量劣质应用后转战 Google Play ，忽然不禁要感慨原来菜市场的质量就是比天朝应用高一个档次。只是无奈许多编辑器各有中意的特点却没有一个完美，最后选择了一款名为 Power Writer 的英文应用，尽管Logo不甚好看也没有自定义的柔和彩色背景，但是其简洁的功能和界面以及必要的字数统计等功能一样不少以及正合我意的行距段距，使得我终于稍微满意。</p>
<p><span></span></p>
<p>顶着死忠粉丝的压力， Google Reader 还是没有逃过被关闭的命运。其实我一直以来也没怎么用过GR，而且对于稍微显得土气的页面排版不甚感冒。只是自己 Chrome 书签栏里关注博客文件夹的条目很明显已经数百，一个个查看辛苦不说，对于常年爪机党来说简直就是折磨。于是经过寻觅，除去新发布的 AOL 和 Digg ，选择了看起来最靠谱的一家 Feedly ，然后兴致勃勃的花了两个下午把书签栏里有RSS的站点全部添加进去。完工后，赫然近三百条各种业界新闻科技评论菊苣大触的博客站点成功订阅。嘛，其实用哪家服务不算重要，爪机客户端才是重中之重。据说最美的 PRESS 功能真心不足，官方的 Feedly 又Bug多多。最后选择了功能强大但是界面略差的 gReader ，但是更坑爹的是过了几天后变得需要翻墙才能更新，但是在找到更好的替代品之前也只能如此了。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/20130726114752.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/20130726114752-600x401.png" /></a><p>Feedly Index</p></div>
<p>暑假伊始，获得了母上大人的恩准钉子决定进行一次大购书。托父上礼品卡的福，我毫不犹豫的购买了编程，硬件，计算机原理方面的大量经典书籍。因为主业是设计，实际上在编程方面很多领域准备浅尝即止，因此把这一批的书看完除了几门主要语言不准备继续深入了。当然这批书本身数量极多，又不乏参考书砖头书，再考虑到学习紧张的缘故，目测中考之前能看完就不错了……另外，没有买设计方面的书的遗憾，在前几天的小额度购书中也补偿了。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/13-7-9-1.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/07/13-7-9-1-600x450.jpg" /></a><p>又一次购书</p></div>
<p>Azone 应该是那种蓄谋已久也靠着机缘巧合最终有幸得以从虚构稿到实际构想再到开发思想的构思，从设计稿上的信息中心遨云栈，再到和E姐讨论之后在实现与设计中挣扎的初稿以及 Axure 练手用的类 Twitter 第一版原型，然后是三三说挺感兴趣愿意负责后端以启动开发，最后我回到拿手的交互和前端用 Fireworks 构建了略微谷歌风格的第三版原型和上手编写前端。应该说从头到尾是计划打折和技术进步的过程，至少学第一次自己尝试了原型到交互到视觉的完整流程，以及学习了 Git 等团队协作和版本管理的工具。最后因为许许多多的API限制和技术原因缩水成仅仅体验增强的微博聚合服务，但是还是希望能成为自己拿的上履历的第一个正式作品。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/Scan0001.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/Scan0001-600x464.png" /></a><p>遨云栈原稿</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/20130610213535.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/07/20130610213535-600x373.jpg" /></a><p>AZone 原型一代</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/Index.fw_.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/Index.fw_-600x450.png" /></a><p>AZone 原型三代</p></div>
<p>追新番也算是目前参与的一个开源项目，尽管目前的状态还是打酱油。还有正在策划中的技术宅吐槽博客和预谋已久的社区，以及自己手上各种想做的小页面和产品。当然无论是什么项目，特别是与他人合作的项目，无非是想和真正的菊苣共事，籍此或许能够学习成长。在姬加等社交网络混迹，认识各种相同兴趣的人，膜拜各种菊苣大触，也是一样的目的。</p>
<p>自己一直处于快速的变化中。回头去看UMunk的最后更新，其实也只是四五月份的事情，远的不说，就是一月前自己刚入姬加的发言，现在看来也幼稚可笑。更不用说回顾之前的博客那些仅仅是年初的文章，却不禁感慨思维回路完全都不一样。可能是因为自己的朝三暮四喜新厌旧，也可能是因为最近真的发生了很多事，或者自己正出于高速的成长期，每一天的自己都变得不同，更成熟也更陌生。</p>
<p>至少自己的生活方式没有变，为了自己所爱的事物努力并乐在其中，一遍抱怨时间不够用一遍赖床睡懒觉，痛并快乐着。这样的生活，真的很幸福。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/time-sleep/">时间真是不够用，先让我多睡会觉</a></p>]]></content>
        
        <summary type="html">
            
            内心一直有一种奇怪的信念在支撑，导致自己一错再错。那就是，生活向的博文，一定要深夜写…… 目测这篇文章已经拖了不止两周，一直以来想把暑假至今发生的事情记录一下，但是因为种种不可抗力一再拖延。无数个深夜在偷玩手机失败的无奈和刷姬加忘记时间的悔恨中度过，直到有一天担心再不写真的就坑
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="AZone"/>
        
        <category term="Google"/>
        
        <category term="RSS"/>
        
        <category term="书籍"/>
        
        <category term="暑假"/>
        
        <category term="追新番"/>
        
        <category term="项目"/>
        
    </entry>
    
    <entry>
        <title>Win 下配置 Sublime Text 的 SASS 插件</title>
        <link href="http://blog.dimpurr.com/sublime-sass/"/>
        <id>http://blog.dimpurr.com/sublime-sass/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-25T20:21:16+08:00</published>
        <updated>2013-07-25T20:21:16+08:00</updated>
        
        <content type="html"><![CDATA[<p>SASS是一门著名的CSS预处理器语言，而 Sublime Text 则堪称界面最优雅的编辑器之一。为ST配置了SASS的插件之后，便可以在ST中很方便的支持SASS的语法高亮以及一键编译。</p>
<p>CSS预处理器即在CSS语法里加入编程中的变量、循环、调用等结构，再将其编译成普通的CSS文件。目前主流的预处理器有实时编译的 LESS 和预编译的 SASS ，在语法部分也有一些区别，个人认为SASS更加强大一些。关于SASS的更多详细介绍在此不再赘述，若想了解请参见 <a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank">SASS用法指南</a> 。</p>
<p>SASS需要Ruby环境的支持，因此首先要下载并安装对应版本的 <a href="http://rubyinstaller.org/downloads/" target="_blank">Ruby Installer for Windows</a> 。然后在开始菜单中启动 Start Command Prompt with Ruby ，在弹出的命令行界面中输入：</p>
<pre>gem install sass</pre>
<p>随后会开始SASS的安装。如果提示 HTTP 302，可能是GEM被墙的问题，请在 Internet 选项 中挂上代理重试。</p>
<p><span></span></p>
<p>安装完成后启动 Sublime Text ，如果已经安装了 Package Control 插件请忽略这一步，否则使用 工具 &gt; 命令面板 或者快捷键 Ctrl + Shift + P 调出 Console ，在控制台中输入：</p>
<pre>import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())</pre>
<p>这样就成功安装了插件管理器，如果失败，也可以直接下载 <a href="http://sublime.wbond.net/Package%20Control.sublime-package" target="_blank">Package Control</a> 将下载后的Package Control.sublime-package 放到 Sublime Text 根目录下的 Installed Packages 文件夹中。</p>
<p>再次打开控制台，选择 Package Contrl: Install Package ，依次搜索并回车安装 Sass 和 SASS Build 两个插件。</p>
<p>安装成功后，.scss文件就可以正常使用代码高亮国。如果文件名后缀是.css，也可以在控制台中搜索SASS选择 Set Syntax: SASS 以切换模式。可以使用 工具 &gt; 编译 或者快捷键 Ctrl + B 编译文件，会自动在当前目录生成一个同名的编译后的CSS文件。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/sublime-sass/">Win 下配置 Sublime Text 的 SASS 插件</a></p>]]></content>
        
        <summary type="html">
            
            SASS是一门著名的CSS预处理器语言，而 Sublime Text 则堪称界面最优雅的编辑器之一。为ST配置了SASS的插件之后，便可以在ST中很方便的支持SASS的语法高亮以及一键编译。 CSS预处理器即在CSS语法里加入编程中的变量、循环、调用等结构，再将其编译成普通的C
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS"/>
        
        <category term="IDE"/>
        
        <category term="SASS"/>
        
        <category term="Sublime"/>
        
        <category term="代码"/>
        
    </entry>
    
    <entry>
        <title>Windows Phone UI 交互设计指南速览</title>
        <link href="http://blog.dimpurr.com/wp-guide/"/>
        <id>http://blog.dimpurr.com/wp-guide/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-19T19:28:22+08:00</published>
        <updated>2013-07-19T19:28:22+08:00</updated>
        
        <content type="html"><![CDATA[<p>灵感来自于瑞士平面设计风格的 Modern UI 开始于Xbox时代，在微软的革新浪潮中成为了 Windows 家族跨平台的标志性设计语言。无论看官如何议论纷纷，鲍尔默算是铁了心要把所有产品拍扁了。</p>
<p>因为项目需要，在此对 Windows Phone 8 的设计指南稍作整理。这份指南只包括了WP有别于其他系统独特的设计模式和规范指南，其他更加具体的实现请参见各种UI书籍和官方指南页面。可以使用这份速览快速了解WP的交互并上手设计，但不能作为完全的参考资料使用。</p>
<p>开篇之前先对当下的WP的开发者环境略作介绍。WP已经超越黑莓就位三大手机系统中的老三，但是这个第三和第二实在差距巨大。WP对于权限把关严格，包括文件目录和系统权限的控制程度仅稍次于iOS。Windows Phone Store 中可能是因为和Xbox和Win8平台的紧密结合，最畅销的应用分类是游戏，其次是工具。国内WP的市场份额较低，优秀应用缺乏，开发者普遍处于观望，大众应用勉强够用，主要顾客群体是较为喜欢新鲜潮流的青年群体。</p>
<p>Windows Phone 的UI极其新潮同时框架严格，在保证了不会有像Andriod一样大量低质量的应用程序存在的情况下同时限制了特色元素的发挥。同时，完全强调以排版为中心的全扁平化风格和 动态Title 为代表的大量动画和手势应用也是特色。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC622542.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC622542.png" /></a><p>Windows Phone 应用标准界面</p></div>
<p>一个典型的WP应用由状态栏、应用主题和应用栏组成。默认情况下，状态栏将始终显示时间，其他状态图标将在用户点击后出现8秒再滑出隐藏。应用栏相当于Andriod的 Action Bar，包括最多四个对当前视图进行操作的圆形按钮和展开菜单的省略号（美其名曰连续点可视指示器）。</p>
<p><span></span></p>
<h3>一 结构和导航</h3>
<h4>Panorama 面板式应用程序中心控件(全景体验)</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC627791.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC627791-600x408.png" /></a><p>标准的 Panorama 控件效果</p></div>
<p>Panorama 是WP中最典型的导航方式之一，就好像是一张长长的卷轴，包括可拖动的背景图、主板面和其他面板。</p>
<p>主面板承担着导航和链接的应用，可以提供通往其他应用的链接和收纳不需要在第一层级展示的功能。可以这么理解，不同的面板相当于不同栏目的主导航，同时在主面板收纳提醒、消息等辅助功能的链接。实际上并不一定要在主面板上开始，可以在应用启动时首先切换到最新动态等更加有趣的内容。</p>
<ul>
<li>每个面板的功能和主题可以是完全独立，没必要其他面板相关。</li>
<li>一般来说建议不要超过五个面板，太多的面板将会使用户感到困惑。</li>
<li>在面板内部可以自由的使用各种样式组织内容，如 深化细目列表 和 图像网格 。</li>
<li>可以混合使用面板间的横向导航和面板内列表的垂直滚动，但是不能在图像网格中纵向滚动。</li>
<li>可以使用和主题相关但并不影响阅读的背景图，也可以使用代码动态改变。</li>
</ul>
<h4>Pivot 标签筛选式应用程序中心控件</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC622527.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC622527.png" /></a><p>标准的 Pivot 控件效果</p></div>
<p>相对于 Panorama 控件，Pivot 更像是桌面系统中的程序选项卡。最大的区别在于，其中的每一个标签内部的主题是完全相同的。Pivot 具有会在顶部紧凑显示标签、点击标签即可跳至目标标签以及支持横向模式等 Panorama 不具有的特性。每个标签具有相同的结构和主题模版，同时可以实时生成和改变标签，相当于动态给固定的模版传入参数。</p>
<p>Pivot 控件往往作为 Panorama 控件的二级界面使用，同时不推荐从一个 Panorama 控件跳至 另一个 Panorama 控件，容易使得用户忘记自己身处的位置。可以增加一个 “主页” 页面，显示所有其余标签的列表，用户就不必依次滑动导航至目标标签。同理，也不必让用户在 主页 开始，而可以在进入时先转到更有趣的主题。</p>
<h4>深化细目列表</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC625681.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC625681.png" /></a><p>一种深化细目列表效果</p></div>
<p>所谓“深化细目列表”，实际上就是一组高度可自定义的列表入口样式。可以由此提供一个包含许多可点击的包括图片和文本的项的列表。</p>
<ul>
<li>列表的一个项可以是图片、文本或二者的混合，也可以同时提供，亦或者增加其他样式。</li>
<li>每个项必须可以点击并查看详细内容。</li>
<li>可以和其他控件混合使用深化细目列表，这样会具有横向和纵向两个方向的滚动导航。</li>
</ul>
<h4>实用设备和游戏</h4>
<p>WP中提倡在应用内使用现实生活中的设备的外观样式，以便用户快速上手。但是于拟物设计决定性的不同，是WP不允许需要操作的控件样式拟物化，因为现实中的旋钮在手机中相对滑块极其难以操作。应该仅仅将拟物设计用在工具类应用的结构和数据呈现，而不可以改变操作方式。合理是使用实用设备设计风格，可以为应用增添魅力，更易使用。</p>
<p>游戏使用的是沉浸式设计，因此并不需要遵守WP的交互指南。在游戏中只需要遵守游戏独有的UX设计准则即可。</p>
<h3>二 交互和体验</h3>
<h4>主题配色</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC622510.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC622510.png" /></a><p>不同的主题配色</p></div>
<p>WP提供了可供用户自定义的多种主题配色。应用默认采用WP设置的全局样式，记得在深色和浅色配色中反复测试样式效果，以免出现不和谐的效果、一般来说，为了系统体验的统一，最好尊重用户的配色选择。但是如果切换不同的样式会对应用的特定品牌元素造成影响，可以将应用锁定为深色或浅色。也可以完全覆写从背景到强调色的一切样式，或者退出系统主题从新建立样式，从而建立品牌特征。</p>
<h4>操作动画和后退堆栈</h4>
<p>WP存在两种运动，“转换”和“动画”。“转换”用于在不同应用、不同面板、不同层级间切换的导航，以帮助用户明确所在的位置。“动画”是当前应用内对用户操作的反馈，如点击、拖动等效果。动画以 2.5 维展现，如倾斜动画并不会表现出深度、阴影等效果，仅展示平面从而强调内容。</p>
<p>系统将把用户访问轨迹中的每个页面保存在 后退堆栈 中。页面的定义是“一个用户可识别的持久状态集合”，即不包括启动动画、登录页面、对话框这些不包含信息的弹出屏幕。使用硬件上的后退按钮将依次退回到用户曾访问的页面快照，但是即使页面内容已经发生改变，在刷新前页面的状态也不会变化。请注意不同的 Pivot 标签尽管包含可记忆的内容，但不算独立的页面，而是整个 Pivot 框架的一部分。</p>
<h4>操作方式</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC622543.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC622543-600x419.png" /></a><p>三种屏幕方向</p></div>
<p>WP提供三种屏幕方向，分别是纵向、横向靠左和横向靠右。在横屏时，状态栏从默认的 32px 扩展到 72px。可以为应用定义全屏视图，并选择是否在全屏下显示状态栏和应用栏。</p>
<p>在WP中的手指和触控笔的交互方式拥有点按（轻触）、连按（双击）、平移（按住拖动）、轻拂（扔出，即按住拖动并快速移动然后离开屏幕）、按住（长按）。WP要求所有设备支持最少4个触控点，最多可支持10个触控点，因硬件而异。</p>
<h4>触摸可访问性</h4>
<p>在WP中，9mm或更大的方块是推荐的理想触控目标大小。最低的触控目标大小不应小于7mm，并且只能在不得已的情况下使用。控件的视觉大小未必与触控面积完全相等，但最低可视大小不应小于4.2mm。更小的情况下，用户不会意识到控件是可触控的。在设计时应该首先判断错误点击的后果，例如拨号程序中触控目标的间距极大，因为出错的代价很高。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC622526.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC622526.png" /></a><p>触控目标的结构</p></div>
<p>一个触控目标拥有以下结构：可视间距、可视资产、触控目标、死空间。可以理解为视觉上的外边距、视觉上的实际大小、实际可触控的区域、触控不执行任何操作的空余区域。</p>
<p>Modern UI 是一种基于排版的设计语言，因此文字缺乏除了颜色以外的更多纹理和样式修饰，排版和拼写的重要性相对较大。WP上最小的字体大小是15磅。</p>
<h4>与系统体验一致</h4>
<p>请在应用中尽可能使用系统控件以保证体验的一致性。</p>
<ul>
<li>每台WP手机都包含“返回”、“开始”和“搜索”三个硬件按钮，因此请勿在应用中内置如上按钮，例如在应用中放置“主页”按钮以回到主页很可能会和原有的后退堆栈逻辑上冲突，使得用户迷失方向。</li>
<li>无法修改“搜索”按钮的行为。在 Outlook 等系统应用中，触摸“搜索”按钮会跳至应用内的搜索功能。在第三方的应用中，将会跳至 Bing 以提供一致的搜索体验。要实现应用内的搜索，请将应用包括在 Bing 搜索范围中。</li>
<li>在信息流中安放操作按钮很可能会造成容易混淆的导航，对于每一项生效的操作，请使用应用栏。</li>
</ul>
<p>WP中无法将应用的设置放在系统设置内部，应该在应用内创建一个和系统设置样式一样的设置页面。需要注意：</p>
<ul>
<li>大部分设置无需点击确认，每个更改应该立即实现，并提供反馈使得用户得知已经操作成功。</li>
<li>对于无法撤销的不可逆更改，例如修改文本，必须提供取消选项。</li>
</ul>
<p>WP提供一个名为 AdControl 的控件显示广告。广告的默认和建议大小为480x80px。具体的定位可以脱离于容器外悬浮显示，也可以标准流定位显示在 Panorama 等控件中并跟随控件改变位置。</p>
<h3>三 控件和实现</h3>
<h4>Title图块</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/69605310.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/07/69605310.jpg" /></a><p>典型的开始屏幕</p></div>
<p>Modern 设计语言的一个标志性特征就是开始屏幕和Title动态磁贴，即图块。图块可以是静态的，也可以通过通知进行更新。图块有超大(4×4，只有系统应用有权限)，宽(2×4)，中(2×2)，小(1×1)几种，用户可以随时切换。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC624343.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC624343.jpg" /></a><p>图块通知</p></div>
<p>所有图标右上角都有一个用于计数的区域，类似于iOS的“红膏药”。可以结合动态图块功能使用。</p>
<ul>
<li>在可能的情况下，尽可能的使用实时拼贴，如动态的显示提醒数量或最新消息。</li>
<li>可以使用“图块通知”服务来控制图块的计数器、背景图像、动态更新。</li>
<li>在应用内提供开关图块动态更新的设置。</li>
<li>如果应用具有一系列图块，确保使用相近的风格以方便辨识为系列。</li>
<li>尽量使用清晰容易理解的几何图形，避免在图块中使用3D、渐变、阴影、圆角等样式。</li>
<li>不能为图块使用黑色或白色背景，这样将在深色或浅色主题的开始屏幕中无法辨别出背景。</li>
<li>如果不想设置背景颜色，可以将背景颜色设为透明，系统会自动进行分配。在这种情况下，确保图标的前景色是白色。</li>
</ul>
<h4>应用栏</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC625674.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC625674.png" /></a><p>标准的应用栏效果</p></div>
<p>应用栏类似于 Android 的 Action Bar 和菜单的结合，是一个永远位于三个硬件按钮方向的72px高栏。</p>
<ul>
<li>在应用栏中最多可以把五个菜单项以按钮方式显示，其余菜单项折叠于右侧的省略号(连续点可视指示器)中。</li>
<li>默认应用栏不算在应用内容有效空间内，如果为应用栏设置了透明，应用会改为全屏显示且应用栏悬浮于底部。</li>
<li>应用栏按键可以显示为启用和禁用两种状态。</li>
</ul>
<p>图标大小为48x48px的透明通道图片，中心是前景色为白色的26x26px图案，不需要包含圆圈，系统会自动生成。只需要绘制白色版本，对于其他主题系统会自动填色。</p>
<h4>Toast 提醒通知</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC625676.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC625676.png" /></a><p>Toast 通知</p></div>
<p>Toast 通知一般用于推送即时消息，不会打断用户的当前任务，显示10秒后会自动消失。如果点击了通知，将会进入应用。一个通知包含应用图标、加粗的标题和一段内容文本。内容只显示一行，过长的文本会被截断。请注意过多的 Toast 通知会使得用户受到打扰。</p>
<h4>Raw 操作通知</h4>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/IC625677.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/IC625677-340x600.png" /></a><p>Raw 通知</p></div>
<p>Raw 通知更加像桌面系统中的弹出对话框，用于在应用中必须执行以进行下一步的操作。仅可以通过应用启动该种通知，无系统范围内显示的方法。</p>
<h3>四 链接和结语</h3>
<p>提供一些可供参考和使用的链接：</p>
<ul>
<li><a href="http://dev.windowsphone.com/zh-cn/" target="_blank">Windows Phone Dev Center</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/windowsphone/design/hh202915" target="_blank"><span>Windows Phone 设计库</span></a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/windowsphone/design/ff637515" target="_blank">Windows Phone 设计资源</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/ff967556(v=vs.105).aspx" target="_blank">Windows Phone 用户界面开发与实现</a></li>
</ul>
<p>写了两天终于写完了这篇所谓的“速览”，不得不说微软确实对交互模式做出了极大的创新。至少从个人来说，Modern UI 是我非常喜欢也觉得极其富有新意和美感的设计。Windows Phone 推出以来在应用增长速度上大大超越了 Android 和 iOS，只是因为后来者的身份差距尚远。今年是诸多新系统参与移动操作系统角逐的一年，Firefox OS、 Ubuntu Phone、 Sailfish OS 等等相继推出， iOS7 和 Windows Phone 8 以及 Ubuntu Phone 也创造了其别具一格的设计。至于将来哪个系统能在市场上获得胜利，只能拭目以待了。</p>
<p>本人才疏学浅，若有错误敬请指出。转载请注明出处：<a href="http://blog.dimpurr.com/wp-guide/" target="_blank">Windows Phone UI 交互设计指南速览 | 钉子の次元</a> http://blog.dimpurr.com/wp-guide/</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/wp-guide/">Windows Phone UI 交互设计指南速览</a></p>]]></content>
        
        <summary type="html">
            
            灵感来自于瑞士平面设计风格的 Modern UI 开始于Xbox时代，在微软的革新浪潮中成为了 Windows 家族跨平台的标志性设计语言。无论看官如何议论纷纷，鲍尔默算是铁了心要把所有产品拍扁了。 因为项目需要，在此对 Windows Phone 8 的设计指南稍作整理。这份
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="Microsoft"/>
        
        <category term="UI"/>
        
        <category term="Windows"/>
        
        <category term="Windows Phone"/>
        
        <category term="设计指南"/>
        
    </entry>
    
    <entry>
        <title>Photoshop 三分钟学会去码</title>
        <link href="http://blog.dimpurr.com/ps-mosaics/"/>
        <id>http://blog.dimpurr.com/ps-mosaics/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-19T19:23:38+08:00</published>
        <updated>2013-07-19T19:23:38+08:00</updated>
        
        <content type="html"><![CDATA[<p><em>感谢本文原作者 <a href="https://plus.google.com/116941926954892465421" target="_blank">Luc Plus</a> 同学授权转载，原文地址于 Google+ <a href="https://plus.google.com/116941926954892465421/posts/ASYwTbSJLSx" target="_blank">#三分钟学会去码</a> ，原作者 <a href="http://restart.moe/?p=84" target="_blank">博客</a></em></p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/22_39_141.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/22_39_141.png" /></a><p>三分钟学会去码</p></div>
<p>准备 <s>拖</s> 了这么久渣渣的去字教程终于完成了~本教程分为三个部分，分别介绍三种常用的去字工具，用GIF演示用法并附上详细文字说明。因为本人渣渣没学过PS，所谓教程难免有问题和误区，发现教程有任何问题欢迎+本人大力打脸，抖M的PO会很高兴的。</p>
<p>声明：Po主没系统地学过PS，所有相关知识都是从网上零星学来的，本“教程”仅代表Po主个人观点，各位菊苣如果发现有错欢迎打脸，各位参考这个教程的同学发现被我误导了请尽情骂Po主是混蛋。另外本教程所介绍的工具用法很简单，所以只能进行简单的去字处理。像是在脸上眼睛上华丽的衣服上进行大规模去字什么的处理基本上就要靠画画补上去字的部分，Po主也做不到。遇到难处理的图片还是放弃吧，事前提醒一下，别花了很多时间也没搞定怪教程没用。</p>
<p><span></span></p>
<h3>本教程例图</h3>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/yande%2B257564%2Bfukagawa_kazumi%2Bgenei_wo_kakeru_taiyou%2Bseifuku%2Btaiyou_akari.jpg"><img src="http://img1.dimpurr.com/dimblog/2013/07/yande_akari-600x387.jpg" /></a><p>三分钟学会去码 原图</p></div>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/yande.re+225645+akinashi_yuu+aomi_isara+kiba_mifuyu+koi_to_senkyo_to_chocolate+loli+morishita_michiru+nopan+seifuku+shinonome_satsuki+sumiyoshi_chisato+thighhighs.png"><img src="http://img1.dimpurr.com/dimblog/2013/07/yande.re+225645+akinashi_yuu+aomi_isara+kiba_mifuyu+koi_to_senkyo_to_chocolate+loli+morishita_michiru+nopan+seifuku+shinonome_satsuki+sumiyoshi_chisato+thighhighs-600x387.png" /></a><p>三分钟学会去码 完成图</p></div>
<p>看完上面两张图片对比的同学不要想太多了，咱不可能把从原图到完成图的流程都讲一遍，本渣渣花了8个小时才做了个半成品，要我做完整流程的请饶命……本教程只是用这张图做栗子简单演示三种去字工具的用法，具体怎么运用还是需要你们自己去感受一下。</p>
<p>Ps：别吐槽这个PO配的海报了，我真的不会PS，不会拿PS嵌字，这海报是拿PPT的艺术字做的…</p>
<h3>一 自动填充</h3>
<p>本PO讲的是自动填充，自动填充原理很简单，就是从选区附近的地方选择与边缘相似的图片区域填充覆盖上去，但是这个功能十分神奇，使用效果经常出奇地好，阿逗比做了这么多年的PS算法还是值得信赖的。大部分情况下都推荐先试一下自动填充再进行其它操作，就算第一次自动填充失败也可以试试调整选区之后继续尝试自动填充，总有一次效果会让你满意的。点几下就搞定了，自动填充真棒！塞糕！（殴）</p>
<p>自动填充的操作也十分简单（详见GIF），用任意选择工具选中要进行自动填充的范围，右键选择 填充 （魔棒除外），内容选择 自动识别*，然后确定就行了，⑨都能学会~</p>
<p>不推荐使用自动填充的情况：比如原图的右侧和右上方的一大块文字，使用自动填充基本没效果，由于自动填充是从附近区域找图案进行填充，在周围都是字的地方使用自动填充的结果就是填充了一块别的地方的字到原来的地方，做了等于没做，不信的同学可以自己去试试。</p>
<p>注意事项：</p>
<ol>
<li>选区不能太大，选区太大经常会出现很奇葩的填充结果，比如说会把半边脸拉过来贴到附近的墙上什么的的……</li>
<li>用魔棒创建选区之后要选择其它选择工具才能看见填充的选项，比如说用魔棒选了一个球，选完你在球的选区上按右键是没有填充选项的，要换成矩形选框工具或者套索工具（其它的也行）再右键填充。</li>
<li>要注意在自动填充较大的区域之后要取消选择看一下效果，因为选区的边框附近可能会有一些“脏东西”残留，再用自动填充把不和谐的脏东西和谐掉就OK了。</li>
<li>选择自动填充的时候要注意选区附近的“环境”，太乱的话自动填充的效果可能会很差，见不推荐使用的情况。</li>
</ol>
<p>Ps：图片越大自动填充需要计算的时间越长，变数也多一些，建议把图片调小（宽2000左右）再尝试演示GIF中的操作，直接使用原例图的话结果可能会不一样。另外演示GIF只演示了自动填充的一步，实际上这块区域还是需要处理的，详细的以后再说。</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/1.gif"><img src="http://img1.dimpurr.com/dimblog/2013/07/1.gif" /></a><p>一 自动填充</p></div>
<h3>二 仿制图章</h3>
<p>本PO讲的是仿制图章，仿制图章这个工具泛用性也很广，因为自由选取取样点、画笔大小和硬度可以定制，所以经常用来进行细节的处理。仿制图章对于颜色变化不大的图片效果拔群，指哪打哪谁用谁知道；但是对于色彩变化较多的图片不推荐大规模使用，对于色彩变化比较多的图片使用大量仿制图章处理的时候选取采样点不当的话很有可能会出现不和谐的“色块”，整体效果也不好。</p>
<p>使用仿制图章有一个要点就是要不断变化取样点，取样点一直不变的话很容易出现一大块都是同一种颜色和图案的情况。总之泛用型对图兵器仿制图章想要用好还是要多用把熟练度提高，这个工具机师补正挺高的。</p>
<p>仿制图章的操作也很简单，选择仿制图章，先按住Alt键选择采样点，然后在要覆盖的处理的用画笔地方涂上就行了。</p>
<p>注意事项：</p>
<ol>
<li>根据实际情况选择大小和硬度。在仿制图章的状态下在画布任意地方点右键可以调整画笔的硬度和大小，硬度越大边缘越清晰。像处理衣服天空背景这样的大色块的时候画笔可以大一点，硬度也调高一点；相反处理边缘的时候硬度要适当降低才不会出现明显PS痕迹。</li>
<li>要经常设置取样点。上面也说了取样点一直不变的话涂出来的效果会很难看，取样点变化多一些涂出来的效果才自然。处理颜色变化多的区域更要注意，去字的时候尽量选择字附近的空白地方作取样点，最好能上下左右包围着把字涂掉 <s>太麻烦了我们试试自动填充吧</s> 取样点的选择是机师补正比较大的一项，多做就熟了。</li>
<li>涂一段要松一下鼠标再继续涂。就算是涂大色块也不能选好取样点之后一直刷过去，因为你涂下去的操作要松开鼠标左键才算完成，在松开鼠标之前你涂的部分还是原来的样子。注意GIF中采样点在下面的时候刷的最后一笔，可以看到把下面字的一部分刷上去了。另外举个栗子，现在有线段ABC，你在A左边设了一个取样点，把画笔从A拖到C的过程中你会发现涂到B的时候A那部分又出现了，因为取样点到了原来A的位置，而这时你没松开鼠标，仿制图章的效果没应用，A实际上还是原来的样子所以被捕获涂到B的位置上了。正确的做法是在A左边取样之后涂到B之前松开左键应用修改，然后到C的右边取样从又往左涂，又或者直接在A下方取样直接涂过去，C点上方感觉也不错呢…这一条实际做过很容易理解，总之多试试就好了。</li>
</ol>
<p>Ps：其实处理示例图里的东西只要用自动填充就好了，但是这张图好像也找不到能演示仿制图章的地方了…</p>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/2.gif"><img src="http://img1.dimpurr.com/dimblog/2013/07/2.gif" /></a><p>二 仿制图章</p></div>
<h3>三 修补工具</h3>
<p>本PO讲的是修补工具。修补工具的原理和仿制图章差不多，也是从别的区域选择图案填充到指定的地方。跟仿制图章不同的是修补工具有一个特性，就是在复制图案到目的地之后修补工具会 自动适应 周围的颜色，就像自带光学迷彩一样。如果复制的源图案不明显，周围的色彩又比较鲜明，有可能复制的图案会被后续的适应颜色覆盖而看不出来。修补工具在附近颜色差不多而且附近又有类似形状供抓取的地方使用效果比较好，像引索PO原图右上方黄色天空下的一大片字、“瞳に映る世界”下面的几行小字就很适合用修补工具。</p>
<p>修补工具的操作见GIF，详细用法引用官方说明：</p>
<ul>
<li>在图像中拖移以选择想要修复的区域，并在选项栏中选择“源”。</li>
<li>在图像中拖移，选择要从中取样的区域，并在选项栏中选择“目标”。您也可以在选择修补工具之前建立选区。</li>
<li>将指针定位在选区内，并执行下列操作之一：</li>
<li>如果在选项栏中选中了“源”，请将选区边框拖移到想要从中进行取样的区域。松开鼠标按钮时，原来选中的区域被使用样本像素进行修补。</li>
<li>如果在选项栏中选中了“目标”，请将选区边框拖移到要修补的区域。松开鼠标按钮时，新选中的区域被用样本像素进行修补。</li>
</ul>
<p>注意事项：</p>
<ol>
<li>选框要离修补区远点。由于修补工具的光学迷彩特性，如果你的修补选取贴住了字的边缘，在修补应用光学迷彩效果的时候选区边缘会有很奇怪的现象，比如说边框贴着字的位置可能会出现乱入的圣骑放圣光……</li>
<li>选区内最好不要混进其它差异较大的颜色。理由同上，在处理白色衣物上面的字的时候选框如果不小心把外面的黑色背景选中了，处理的时候会乱入个熊孩子把白色衣服搞脏。另外提一下选框有很多种，不一定都像示例用矩形选框工具。魔棒有点不好控制，在选取不规则图形的时候套索很好用。</li>
<li>使用修补工具之前要确保目标地点的色彩“正确”。这个只能举例说明了，比如说一张图的地上有一大块字要修掉，你先用了自动填充但是效果不好，旁边的黑色水迹违和地被填充到原来没水迹的地面上了，这时不能使用修补工具直接对这块水迹进行处理，如果直接用修补工具结果就是“带着水迹颜色的地面”，这是光学迷彩的效果。所以说使用修补工具之前要确保目标地点的色彩“正确”，正确的做法是使用仿制图章或者变换选区再进行自动填充操作知道去掉不和谐的水迹，调整到地面颜色正常而图案不正常的时候就可以选择使用修补工具处理了。</li>
</ol>
<div><a href="http://img1.dimpurr.com/dimblog/2013/07/3.gif"><img src="http://img1.dimpurr.com/dimblog/2013/07/3.gif" /></a><p>三 修补工具</p></div>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/ps-mosaics/">Photoshop 三分钟学会去码</a></p>]]></content>
        
        <summary type="html">
            
            感谢本文原作者 Luc Plus 同学授权转载，原文地址于 Google+ #三分钟学会去码 ，原作者 博客 三分钟学会去码 准备 拖 了这么久渣渣的去字教程终于完成了~本教程分为三个部分，分别介绍三种常用的去字工具，用GIF演示用法并附上详细文字说明。因为本人渣渣没学过PS，
            
        </summary>
        
        <category term="设计癖"/>
        
        <category term="Photoshop"/>
        
        <category term="修图"/>
        
        <category term="去码"/>
        
        <category term="平面"/>
        
        <category term="美化"/>
        
    </entry>
    
    <entry>
        <title>Ubuntu/Liunx 下 GoAgent 翻墙教程</title>
        <link href="http://blog.dimpurr.com/ubuntu-gae/"/>
        <id>http://blog.dimpurr.com/ubuntu-gae/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-09T22:03:00+08:00</published>
        <updated>2013-07-09T22:03:00+08:00</updated>
        
        <content type="html"><![CDATA[<div><a href="http://img1.dimpurr.com/cyblog/2013/04/2013-04-29-115547.png"><img src="http://img1.dimpurr.com/cyblog/2013/04/2013-04-29-115547-600x341.png" /></a><p>GoAgent 翻墙成功效果</p></div>
<p>因为在 Github 上下载的时候实在无法忍受 24 kb/s 的龟速……查了下资料， Linux 下好像比较常用 ssh 翻墙，但对我来说还是 GoAgent 比较熟悉，于是折腾了一下，最终搞定。上教程。</p>
<p><span>一、准备工作</span></p>
<p>1、申请 AppID 和 Win 下相同，本文假定已经成功申请到至少一个 AppID ，方法在此不再详述，需要的话请访问：<a href="http://blog.howgo.info/archives/3246.html">http://blog.howgo.info/archives/3246.html</a></p>
<p>2、Ubuntu 已经自带 Python ，但是建议还是确认一下。终端 sudo apt-get install python</p>
<p>3、下载 GAE for Linux <a href="https://developers.google.com/appengine/downloads?hl=zh-CN">https://developers.google.com/appengine/downloads?hl=zh-CN</a></p>
<p>4、下载 GoAgent ，Win 和 Linux 是通用的， Linux 下直接用 .py 脚本运行 <a href="https://code.google.com/p/goagent/">https://code.google.com/p/goagent/</a></p>
<h3><span></span></h3>
<h3>二、上传服务端</h3>
<p>如果已经在 Win 下或者其他时候上传过 GoAgent 服务端可跳过此步，无需重新上传。在此重新上传不影响其他平台使用。</p>
<p>1、先解压 GAE 和 GoAgent ，将 goAgent 放到 GAE 的 google_appengine 目录下</p>
<p>2、进入 GoAgent目录/server/python ，编辑 app.yaml ，填入 AppID 和 Version （默认是1)</p>
<p>3、进终端，使用  CD 命令进入你的 GAE 目录，然后激活位于你的 GoAgent 目录的上传脚本。</p>
<pre>cd [GoAgent目录]/server
python uploader.zip</pre>
<p>或者使用Python的内置同步脚本：</p>
<pre>sudo python appcfg.py update [GoAgent目录]/server/python</pre>
<p>随后在终端填入你的email和密码就能上传了。</p>
<h3>三、配置客户端环境</h3>
<p>1、安装 Gevent （非必须组件，若后面遇到问题可尝试安装）：</p>
<pre>sudo apt-get install python-dev curl -L -O https://github.com/python-greenlet/greenlet/archive/0.4.0.tar.gz &amp;&amp; tar xvzpf 0.4.0.tar.gz &amp;&amp; cd greenlet-0.4.0 &amp;&amp;
sudo python setup.py install curl -L -O https://github.com/downloads/surfly/gevent/gevent-1.0rc2.tar.gz &amp;&amp; tar xvzpf gevent-1.0rc2.tar.gz &amp;&amp; cd gevent-1.0rc2 &amp;&amp;
sudo python setup.py install</pre>
<p>2、要正常使用gtk托盘以在托盘区显示图标，需要安装以下软件包（按需要选择）：</p>
<pre>sudo apt-get install python-appindicator
sudo apt-get install python-vte</pre>
<h3>四、配置客户端</h3>
<p>1、在 GoAgent 的 local 目录中，有一个 proxy.ini 文件，将你的 AppID 填入</p>
<p>2、终端 CD 进 GoAgent 目录，激活客户端，如：</p>
<pre>cd [GoAgent目录]/local
sudo python proxy.py</pre>
<p>3、也可以赋予 proxy.py 可执行权限之后直接双击 proxy.py 运行，在 proxy.py 上面右击，属性的权限中勾选允许以程序执行文件即可。</p>
<p>4、运行 goagent-gtk.py 可以使用 GTK 托盘方式即在右上角显示小图标运行 GoAgent 。</p>
<h3>五、其他问题</h3>
<p>1、配置好 GoAgent 后使用方法同与Win下相同，只需要浏览器翻墙的话推荐 Chromium + SwitchProxy ，具体方法参见第一步中给出的申请 AppID 教程结尾处。</p>
<p>2、如果不止在浏览器中翻墙，还需要设置全局代理，可以访问 Ubuntu 系统设置 &gt; 网络 &gt; 代理 在http和https连接处填写 GoAgent 的本地端口地址 127.0.0.1:8087 ，然后点击应用即可。</p>
<p>如果桌面环境没有提供全局代理的设置，也可以手动编辑 /etc/profile 文件，在其中加入：</p>
<pre># 分别指定 HTTP HTTPS FTP 协议使用的代理服务器地址
http_proxy= 127.0.0.1:8087
https_proxy= 127.0.0.1:8087
ftp_proxy= # GoAgent 不支持 FTP
# 设置不使用代理的网址或者IP，用逗号分隔
no_proxy= 127.0.0.1, 192.168.1.1
# 设置环境变量
export http_proxy https_proxy ftp_proxy no_proxy</pre>
<p>3、访问部分网站提示证书不受信任问题与 Win 下相同。解决方法是： Chromium 首选项 &gt; 高级选项 &gt; 管理证书，在 授权中心 导入 GoAgent/local 目录下的 CA.crt 证书，注意不要导入到 服务器 ，否则不起作用。在 授权中心 找到 GoAgent CA 修改信任设置为全部选中，其他浏览器相同。重启浏览器生效。</p>
<p>4、启动后似乎会自动创建桌面图标，如果没有，可以尝试以下办法（别忘了更改为对应路径）：</p>
<p>在桌面新建一个空白文档，命名为 GoAgent.desktop ，然后使用 gedit 或其他文本编辑器打开，然后输入：</p>
<pre>[Desktop Entry]
Type=Application
Name=GoAgent
Comment=GoAgent Start
Categories=Network;Proxy;
Exec=sudo python [GoAgent目录]/local/goagent-gtk.py
Icon=[GoAgent目录]/local/goagent-logo.png
Terminal=true
StartupNotify=true</pre>
<p>这是唯一一种可以和Win下一样正常显示代理窗口的方法，不过每次都要输入一遍账户密码。也可以不让 GoAgent 在终端显示，只需要将 Terminal=true 改成 Terminal=false 。最后别忘了更改一下权限：</p>
<pre>sudo chmod 777  [GoAgent目录]/local/proxy.py</pre>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/ubuntu-gae/">Ubuntu/Liunx 下 GoAgent 翻墙教程</a></p>]]></content>
        
        <summary type="html">
            
            GoAgent 翻墙成功效果 因为在 Github 上下载的时候实在无法忍受 24 kb/s 的龟速……查了下资料， Linux 下好像比较常用 ssh 翻墙，但对我来说还是 GoAgent 比较熟悉，于是折腾了一下，最终搞定。上教程。 一、准备工作 1、申请 AppID 和 
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="GoAgent"/>
        
        <category term="Google"/>
        
        <category term="Liunx"/>
        
        <category term="Python"/>
        
        <category term="Ubuntu"/>
        
        <category term="网络"/>
        
        <category term="翻墙"/>
        
    </entry>
    
    <entry>
        <title>CSS3 Media Query 响应式媒体查询</title>
        <link href="http://blog.dimpurr.com/css-media/"/>
        <id>http://blog.dimpurr.com/css-media/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-07-03T13:46:57+08:00</published>
        <updated>2013-07-03T13:46:57+08:00</updated>
        
        <content type="html"><![CDATA[<p>在CSS中，有一个极其实用的功能：@media 响应式布局。具体来说，就是可以根据客户端的介质和屏幕大小，提供不同的样式表或者只展示样式表中的一部分。通过响应式布局，可以达到只使用单一文件提供多平台的兼容性，省去了诸如浏览器判断之类的代码。</p>
<p>当然这种设计也存在着缺点，比如我所见的不少使用响应式布局的设计在适配移动端时大量使用 display:none 隐藏富媒体元素，这样势必会导致大量不必要的流量。因此，如果有较为重要的移动端需求，那么还是开发专门的移动版页面为好。不过，对于诸如内容较少的页面或者单页式网站来说，响应式布局依然不失为一种偷懒的好方法 ^ ^</p>
<h3>一、在 &lt;head&gt; 链接CSS文件时提供判断语句，选择性加载不同的CSS文件</h3>
<pre>&lt;link rel=&quot;stylesheet&quot; href=&quot;middle.css&quot; media=&quot;screen and (min-width: 400px)&quot;&gt;</pre>
<p>这句意味在满足 media 的判断语句 screen and (min-width: 400px) 即 屏幕并且最小宽度不小于400px 的介质上面使用 middle.css 。</p>
<p><span></span></p>
<h3>二、在CSS文件中分段书写不同设备的代码</h3>
<pre>/* CSS Code */
@media screen and (min-width: 600px) { /* CSS Code */ }
@media screen and (max-width: 599px) { /* CSS Code */ }</pre>
<p>相信这个代码也很容易理解，写在 @media 语句段外的是共用代码，第一个 @media 语句段是 屏幕以及最小宽度600px ，第而个 @media 语句段是 屏幕以及最大宽度599px 。</p>
<p>如果不同的代码段有冲突或者重叠，会按照CSS原本的代码优先级排序，即后方代码替代前方代码，等等。</p>
<h3>三、媒体介质类型</h3>
<p>CSS3中提供了多种媒体介质类型，虽然常用的就俩……注意媒体类型名称区分大小写，并且尽管有些介质类型有重合，但是一个平台只会有一种介质类型。（我猜这个标准很多浏览器不会遵守吧？）</p>
<ol>
<li><strong>all</strong> – 全部媒体类型</li>
<li><strong>braille</strong> – 盲文触摸装置</li>
<li><strong>embossed</strong> – 分页盲文打印机 （W3C的无障碍做的真细心……）</li>
<li><strong>handheld</strong> – 小屏幕和流量有限的手持设备（注意！安装标准来说移动设备都应该使用这个介质类型，但是实际上安卓根本不理会这个介质，请使用 screen 结合媒体查询语句使用）</li>
<li><strong>print</strong> – 提供给打印机的样式，最常用的介质类型，打印页面时获得适合阅读的效果</li>
<li><strong>projection</strong> – 投影，给投影机使用（有人用？）</li>
<li><strong>screen</strong> – 彩色屏幕，最常用的介质类型，一般和屏幕大小表达式联合使用</li>
<li><strong>speech</strong> – 语音朗诵，用于屏幕阅读软件（和将来的Siri？）</li>
<li><strong>tty</strong> – 固定间距字符网格，例如功能机那样的</li>
<li><strong>tv</strong> – 智能电视设备（唔不知道我家的创维酷开支持如何……）</li>
</ol>
<h3>四、媒体查询语句</h3>
<p>除了媒体介质，我们还能通过 and 使用 Media Query 语句，达到对屏幕大小的判断生成响应式布局。（可以通过改变浏览器窗口大小在桌面下测试效果）</p>
<p>一个 Media Query 包含一种媒体类型，如果媒体类型没有指定，那么就是默认类型all，比如：</p>
<pre>media=&quot;(max-width: 600px)&quot;</pre>
<p>也可以使用 and 表示同时满足这两者时生效，达到限定范围：</p>
<pre>handheld and (min-width:20em) and (max-width:50em)</pre>
<p>逗号 , 被用来表示 并列 和 或者 ：</p>
<pre>handheld and (max-width:20em), screen and (max-width:30em)</pre>
<p>not 用来排除符合表达式的设备：</p>
<pre>not screen and (color)</pre>
<p>下面来解释一下遇到冲突时的机制：</p>
<pre>&lt;link rel=&quot;stylesheet&quot; href=&quot;styleA.css&quot; media=&quot;screen and (min-width: 800px)&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styleB.css&quot; media=&quot;screen and (min-width: 600px) and (max-width: 800px)&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styleC.css&quot; media=&quot;screen and (max-width: 600px)&quot;&gt;</pre>
<p>上面将设备分成3种，分别是宽度大于800px时，应用 styleA ，宽度在600px到800px之间时应用 styleB ，以及宽度小于600px时应用 styleC 。那假如宽度正好等于800px时该应用那个样式？是 styleB，因为前两条表达式都成立，按CSS默认优先级规则后者覆盖了前者。</p>
<p>因此，为了避免冲突，这个例子正常情况应该这样写：</p>
<pre>&lt;link rel=&quot;stylesheet&quot; href=&quot;styleA.css&quot; media=&quot;screen&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styleB.css&quot; media=&quot;screen and (max-width: 800px)&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styleC.css&quot; media=&quot;screen and (max-width: 600px)&quot;&gt;</pre>
<h3>五、浏览器支持</h3>
<p>媒体介质在CSS2中已经被添加，因此主流平台的浏览器毫无疑问都可以正确支持。但是 Media Query 语句是CSS3中添加的新功能，部分浏览器可能并不理解。例如IE能成功解读媒体介质，但是却无法解读 and 后面的媒体查询语句，就会连带媒体介质一起忽略。为了让不识别媒体查询语句的浏览器依然识别到媒体介质，可以使用 only 关键字进行hack。</p>
<pre>&lt;link rel=&quot;stylesheet&quot;  href=&quot;example.css&quot; media=&quot;only screen and (color)&quot;&gt;</pre>
<p>添加了 only 关键字后，支持媒体查询语句的浏览器依然正常解析。但不支持媒体查询语句但正确读取媒体介质的设备，由于先读取到 only 而不是 screen ，将忽略这个样式。不支持媒体查询的IE不论是否有 only ，都直接忽略样式。</p>
<p>最后是浏览器支持情况：</p>
<ul>
<li><del><span>IE8-</span></del></li>
<li>IE9+</li>
<li>Chrome 5+</li>
<li>Opera 10+</li>
<li>Firefox 3.6+&lt;</li>
<li>Safari 4+</li>
</ul>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/css-media/">CSS3 Media Query 响应式媒体查询</a></p>]]></content>
        
        <summary type="html">
            
            在CSS中，有一个极其实用的功能：@media 响应式布局。具体来说，就是可以根据客户端的介质和屏幕大小，提供不同的样式表或者只展示样式表中的一部分。通过响应式布局，可以达到只使用单一文件提供多平台的兼容性，省去了诸如浏览器判断之类的代码。 当然这种设计也存在着缺点，比如我所见
            
        </summary>
        
        <category term="代码宅"/>
        
        <category term="CSS"/>
        
        <category term="HTML"/>
        
        <category term="HTML5"/>
        
        <category term="代码"/>
        
        <category term="前端"/>
        
        <category term="网络"/>
        
    </entry>
    
    <entry>
        <title>New Standard.</title>
        <link href="http://blog.dimpurr.com/new-standard/"/>
        <id>http://blog.dimpurr.com/new-standard/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-06-28T23:45:15+08:00</published>
        <updated>2013-06-28T23:45:15+08:00</updated>
        
        <content type="html"><![CDATA[<p>忧郁的打开某某笔记，糟糕的默认行距不得不让人只能回想起自带记事本。后天就是期末考了，这个时间段写这个文章的这个标题有种莫名的讽刺意味。New Stardard，《英语（新标准）》。</p>
<p>既然作为新博客的开荒之文，当然应该先自我介绍背景资料什么的。这里是Dimpurr，可以称呼为钉子。起因大致是在发现母上大人一直在亲切的观摩在下的博客之后，不得不对重新审视自己的言行然后万念俱灰决定从此二三次元分家。不得不说这其实也是个一时兴起的结果，只是ID邮箱QQ都到手之后已经是既成事实了。如果非要在这里对自己做个概括，大概就是个正在二次元化的技术宅吧。或许是谴责我在考前不务正业，GoDaddy毫不留情的吞了我买域名的60元。嗯，这货很穷，支付宝里余额的仅仅供得起一年期。打越洋电话，吃力的听英语，托人代打，搜相关案例，发客户邮件，最后干脆的想不要了。最后还是靠着RP，去他爹臭名昭著的客户邮件破天荒的两天内帮我对账买下了域名。</p>
<p>有时候也不禁会想自己如何才能写出来看起来很有深度实则也很有深度的文字，可惜笔下流出的是和人一样浅薄的扯淡。人失意了就喜欢回首过去辉煌，想当年我也是个吟诗作赋行文流水的文艺青年。只是那个诗词写作音乐美术电脑balabala样样精通的钉子死在了应试教育之下，现在疲于年级排名之下的我去掉电脑就只剩下废材一个。果然小学的自己才是真正的牛逼，只是那个时候自己不懂得炫耀。《失控》《科技想要什么》一本本砖头书堆在书柜上许久没看，相对于曾经津津有味的抱着量子力学的自己纯属历史倒退。社交娱乐真是精神毒药。</p>
<p>都说青春是人生中最美好的时光，初二已经让人不禁想哀叹时间不等人了。被大触刺激的次数已经不少，每次看到年龄和自己相仿的同辈神人总是想一头撞到墙上。越发的长大，自己就越发的变得一文不值。大概是又一次被同辈刺激后，自己下了决心把刷社交网站的时间全用来啃书充电。至于执行力度，这个咱下次再谈。</p>
<p>回首一下之前的博客，大概可以得出的结论是过于轻浮的文风容易使人事后不住捂脸。当然在下随时根据心情和当时情况改变的毫无章法的文风以及时吐槽时文艺的笔触，也是无可推托的直接原因。不过翻阅了不少大触博客的初期文章，倒也是幼稚简单的文笔。只是注目到那上面五六年前的时间戳时，果然笔耕不辍才是唯一一途啊。虽然无法断定现在的文风不会让以后的自己发笑，但是可以确定码字时淡定些总是好的。</p>
<p>最后回首一下此篇文章，铺陈背景，回首过去，展望未来，对新的革命目标和道路提出标准，文风正常，内容有序，是一个合格的开荒文章，可以喝杯水歇歇了。</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/new-standard/">New Standard.</a></p>]]></content>
        
        <summary type="html">
            
            忧郁的打开某某笔记，糟糕的默认行距不得不让人只能回想起自带记事本。后天就是期末考了，这个时间段写这个文章的这个标题有种莫名的讽刺意味。New Stardard，《英语（新标准）》。 既然作为新博客的开荒之文，当然应该先自我介绍背景资料什么的。这里是Dimpurr，可以称呼为钉子
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="介绍"/>
        
        <category term="公告"/>
        
        <category term="域名"/>
        
        <category term="大触"/>
        
        <category term="文字"/>
        
        <category term="期末考"/>
        
        <category term="青春"/>
        
    </entry>
    
    <entry>
        <title>世界，你好！</title>
        <link href="http://blog.dimpurr.com/hello-world/"/>
        <id>http://blog.dimpurr.com/hello-world/</id>
        
        <author>
            <name>Dimpurr</name>
        </author>
        
        <published>2013-06-21T21:18:14+08:00</published>
        <updated>2013-06-21T21:18:14+08:00</updated>
        
        <content type="html"><![CDATA[<blockquote><p>欢迎使用 WordPress。这是系统自动生成的演示文章。编辑或者删除它，然后开始您的博客！</p></blockquote>
<p>唔。我很好，谢谢……</p>
<p>本文来自 <a href="http://blog.dimpurr.com">钉子の次元 - Dimpurr - 千里之行，始於足下。</a> ,原文地址 <a href="http://blog.dimpurr.com/hello-world/">世界，你好！</a></p>]]></content>
        
        <summary type="html">
            
            欢迎使用 WordPress。这是系统自动生成的演示文章。编辑或者删除它，然后开始您的博客！ 唔。我很好，谢谢…… 本文来自 钉子の次元 - Dimpurr - 千里之行，始於足下。 ,原文地址 世界，你好！
            
        </summary>
        
        <category term="碎碎念"/>
        
        <category term="hello word"/>
        
        <category term="介绍"/>
        
        <category term="你好"/>
        
        <category term="公告"/>
        
        <category term="博客"/>
        
    </entry>
    
</feed>